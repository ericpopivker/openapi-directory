openapi: 3.0.1
info:
  title: MINDBODY Public API
  version: v6
servers:
- url: https://api.mindbodyonline.com/
paths:
  /public/v{version}/appointment/addappointment:
    post:
      tags:
      - Appointment
      summary: Book a new appointment.
      description: To book an appointment, you must use a location ID, staff ID, client
        ID, session type ID, and the `StartDateTime` of the appointment. You can get
        most of this information using `GET BookableItems`.
      operationId: Appointment_AddApppointment
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAppointmentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddAppointmentRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddAppointmentRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddAppointmentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddAppointmentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddAppointmentRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAppointmentResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/AddAppointmentResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AddAppointmentResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AddAppointmentResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/AddAppointmentResponse'
      x-codegen-request-body-name: request
  /public/v{version}/appointment/updateappointment:
    post:
      tags:
      - Appointment
      summary: Update an existing appointment.
      description: To update the information for a specific appointment, you must
        have a staff user token with the proper permissions. Note that you can only
        update the appointment’s `StartDateTime`, `EndDateTime`, `StaffId`, `Notes`,
        and `SessionTypeId`.
      operationId: Appointment_UpdateApppointment
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAppointmentResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UpdateAppointmentResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UpdateAppointmentResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/UpdateAppointmentResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/UpdateAppointmentResponse'
      x-codegen-request-body-name: request
  /public/v{version}/appointment/bookableitems:
    get:
      tags:
      - Appointment
      summary: Get staff appointment availability.
      description: Returns a list of availabilities with the information needed to
        book appointments. Availabilities include information such as the location
        and its amenities, staff members, programs, and session types.
      operationId: Appointment_GetBookableItems
      parameters:
      - name: request.sessionTypeIds
        in: query
        description: A list of the requested session type IDs.
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.appointmentId
        in: query
        description: If provided, filters out the appointment with this ID.
        schema:
          type: integer
          format: int64
      - name: request.endDate
        in: query
        description: "The end date of the requested date range. \r\n<br />Default:\
          \ **StartDate**"
        schema:
          type: string
          format: date-time
      - name: request.ignoreDefaultSessionLength
        in: query
        description: "When `true`, availabilities that are non-default return, for\
          \ example, a 30-minute availability with a 60-minute default session length.<br\
          \ />\r\nWhen `false`, only availabilities that have the default session\
          \ length return."
        schema:
          type: boolean
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationIds
        in: query
        description: A list of the requested location IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.staffIds
        in: query
        description: A list of the requested staff IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: request.startDate
        in: query
        description: "The start date of the requested date range. \r\n<br />Default:\
          \ **today’s date**"
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookableItemsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetBookableItemsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetBookableItemsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetBookableItemsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetBookableItemsResponse'
  /public/v{version}/appointment/activesessiontimes:
    get:
      tags:
      - Appointment
      summary: Get active session times.
      description: Returns a list of the times that can be booked for a given program
        schedule type. `ActiveSessionTimes` represent the scheduling increments that
        can be booked during the active business hours for services.
      operationId: Appointment_GetActiveSessionTimes
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endTime
        in: query
        description: "Filters results to times that end on or before this time on\
          \ the current date. Any date provided is ignored..\r\n<br />Default: **23:59:59**"
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.scheduleType
        in: query
        description: Filters on the provided the schedule type. Either `SessionTypeIds`
          or `ScheduleType` must be provided.
        schema:
          type: string
          enum:
          - All
          - Class
          - Enrollment
          - Appointment
          - Resource
          - Media
          - Arrival
      - name: request.sessionTypeIds
        in: query
        description: Filters on the provided session type IDs. Either `SessionTypeIds`
          or `ScheduleType` must be provided.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.startTime
        in: query
        description: "Filters results to times that start on or after this time on\
          \ the current date. Any date provided is ignored.\r\n<br />Default: **00:00:00**"
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActiveSessionTimesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetActiveSessionTimesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetActiveSessionTimesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetActiveSessionTimesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetActiveSessionTimesResponse'
  /public/v{version}/appointment/scheduleitems:
    get:
      tags:
      - Appointment
      summary: Get appointment schedule.
      description: Returns a list of schedule items, including appointments, availabilities,
        and unavailabilities. Unavailabilities are the times at which appointments
        cannot be booked, for example, on holidays or after hours when the business
        is closed.
      operationId: Appointment_GetScheduleItems
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endDate
        in: query
        description: "The end date of the requested date range. \r\n<br />Default:\
          \ **today’s date**"
        schema:
          type: string
          format: date-time
      - name: request.ignorePrepFinishTimes
        in: query
        description: "When `true`, appointment preparation and finish unavailabilities\
          \ are not returned. \r\n<br />Default: **false**"
        schema:
          type: boolean
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationIds
        in: query
        description: A list of requested location IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.staffIds
        in: query
        description: A list of requested staff IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: request.startDate
        in: query
        description: "The start date of the requested date range. \r\n<br />Default:\
          \ **today’s date**"
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScheduleItemsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetScheduleItemsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetScheduleItemsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetScheduleItemsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetScheduleItemsResponse'
  /public/v{version}/appointment/appointmentoptions:
    get:
      tags:
      - Appointment
      summary: Get appointment-related settings.
      description: This endpoint has no query parameters.
      operationId: Appointment_GetAppointmentOptions
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAppointmentOptionsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetAppointmentOptionsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetAppointmentOptionsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetAppointmentOptionsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetAppointmentOptionsResponse'
  /public/v{version}/appointment/staffappointments:
    get:
      tags:
      - Appointment
      summary: Get appointments grouped by staff member.
      description: Returns a list of appointments by staff member.
      operationId: Appointment_GetStaffAppointments
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.appointmentIds
        in: query
        description: A list of the requested appointment IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.clientId
        in: query
        description: The client ID to be returned.
        schema:
          type: string
      - name: request.endDate
        in: query
        description: "The end date of the requested date range. \r\n<br />Default:\
          \ **StartDate**"
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationIds
        in: query
        description: A list of the requested location IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.staffIds
        in: query
        description: List of staff IDs to be returned. Use a value of zero to return
          all staff appointments.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: request.startDate
        in: query
        description: "The start date of the requested date range. If omitted, the\
          \ default is used. \r\n<br />Default: **today’s date**"
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStaffAppointmentsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetStaffAppointmentsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetStaffAppointmentsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetStaffAppointmentsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetStaffAppointmentsResponse'
  /public/v{version}/class/classes:
    get:
      tags:
      - Class
      summary: Get scheduled classes.
      operationId: Class_GetClasses
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.classDescriptionIds
        in: query
        description: The requested class description IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.classIds
        in: query
        description: The requested class IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.clientId
        in: query
        description: The client ID of the client who is viewing this class list. Based
          on identity, the client may be able to see additional information, such
          as membership specials.
        schema:
          type: string
      - name: request.endDateTime
        in: query
        description: "The requested end date for filtering.\r\n<br />Default: **today’\
          s date**"
        schema:
          type: string
          format: date-time
      - name: request.hideCanceledClasses
        in: query
        description: "When `true`, canceled classes are removed from the response.<br\
          \ />\r\nWhen `false`, canceled classes are included in the response.<br\
          \ />\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.lastModifiedDate
        in: query
        description: When included in the request, only records modified on or after
          the `LastModifiedDate` specified are included in the response.
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationIds
        in: query
        description: A list of location IDs on which to base the search.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.programIds
        in: query
        description: A list of program IDs on which to base the search.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.schedulingWindow
        in: query
        description: "When `true`, classes outside scheduling window are removed from\
          \ the response.<br />\r\nWhen `false`, classes are included in the response,\
          \ regardless of the scheduling window.<br />\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.semesterIds
        in: query
        description: A list of semester IDs on which to base the search.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.sessionTypeIds
        in: query
        description: A list of session type IDs on which to base the search.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.staffIds
        in: query
        description: The requested IDs of the teaching staff members.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: request.startDateTime
        in: query
        description: "The requested start date for filtering. \r\n<br />Default: **today’\
          s date**"
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClassesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClassesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClassesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClassesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClassesResponse'
  /public/v{version}/class/classdescriptions:
    get:
      tags:
      - Class
      summary: Get class descriptions.
      description: To find class descriptions associated with **scheduled classes**,
        pass `StaffId`, `StartClassDateTime`, `EndClassDateTime`, or `LocationId`
        in the request.
      operationId: Class_GetClassDescriptions
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.classDescriptionId
        in: query
        description: Filters to the single result with the given ID.
        schema:
          type: integer
          format: int32
      - name: request.endClassDateTime
        in: query
        description: Filters the results to class descriptions for scheduled classes
          that happen before the given date and time.
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationId
        in: query
        description: Filters results to classes descriptions for schedule classes
          as the given location.
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.programIds
        in: query
        description: Filters results to class descriptions belonging to the given
          programs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.staffId
        in: query
        description: Filters results to class descriptions for scheduled classes taught
          by the given staff member.
        schema:
          type: integer
          format: int64
      - name: request.startClassDateTime
        in: query
        description: Filters the results to class descriptions for scheduled classes
          that happen on or after the given date and time.
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClassDescriptionsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClassDescriptionsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClassDescriptionsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClassDescriptionsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClassDescriptionsResponse'
  /public/v{version}/class/classvisits:
    get:
      tags:
      - Class
      summary: Get information about clients booked in a class.
      description: Returns a list of visits that contain information for a specified
        class. On success, this request returns the class object in the response with
        a list of visits.
      operationId: Class_GetClassVisits
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.classID
        in: query
        description: The class ID.
        schema:
          type: integer
          format: int64
      - name: request.lastModifiedDate
        in: query
        description: When included in the request, only records modified on or after
          the `LastModifiedDate` specified are included in the response.
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClassVisitsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClassVisitsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClassVisitsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClassVisitsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClassVisitsResponse'
  /public/v{version}/class/removeclientfromclass:
    post:
      tags:
      - Class
      summary: Remove a client from a class.
      operationId: Class_RemoveClientFromClass
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveClientFromClassRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/RemoveClientFromClassRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/RemoveClientFromClassRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/RemoveClientFromClassRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RemoveClientFromClassRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RemoveClientFromClassRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveClientFromClassResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoveClientFromClassResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/RemoveClientFromClassResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/RemoveClientFromClassResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/RemoveClientFromClassResponse'
      x-codegen-request-body-name: request
  /public/v{version}/class/addclienttoclass:
    post:
      tags:
      - Class
      summary: Book a client into a class.
      description: "This endpoint adds a client to a class or to a class waiting list.\
        \ It is helpful to use this endpoint in the following situations:\r\n* Use\
        \ after calling `GET Clients` and `GET Classes` so that you are sure which\
        \ client to book in which class.\r\n* If adding a client to a class from a\
        \ waiting list, use this call after you call `GET WaitlistEntries` and determine\
        \ the ID of the waiting list from which you are moving the client.\r\n* If\
        \ adding a client to a class and using a pricing option that the client has\
        \ already purchased, use this call after you call `GET ClientServices` to\
        \ determine the ID of the pricing option that the client wants to use.\r\n\
        \r\nIf you add a client to a class and the client purchases a new pricing\
        \ option, use `GET Services`, `GET Classes`, and then `POST CheckoutShoppingCart`\
        \ in place of this call.\r\n\r\nThis endpoint also supports cross-regional\
        \ class bookings. If you want to perform a cross-regional class booking, set\
        \ `CrossRegionalBooking` to `true`. This endpoint does not support adding\
        \ a user to a waiting list using a cross-regional client pricing option(service).\
        \ Cross-regional booking workflows do not support client service scheduling\
        \ restrictions.\r\n\r\nWhen performing a cross-regional class booking, this\
        \ endpoint loops through the first ten sites that the client is associated\
        \ with, looks for client pricing options at each of those sites, and then\
        \ uses the oldest client pricing option found.It is important to note that\
        \ this endpoint only loops through a maximum of ten associated client sites.\
        \ If a `ClientID` is associated with more than ten sites in an organization,\
        \ this endpoint only loops through the first ten.If you know that a client\
        \ has a client service at another site, you can specify that site using the\
        \ `CrossRegionalBookingClientServiceSiteId` query parameter.\r\n\r\nIf you\
        \ perform a cross-regional booking, two additional fields are included in\
        \ the `SessionType` object of the response:\r\n* `SiteID`, which specifies\
        \ where the client service is coming from\r\n* `CrossRegionalBookingPerformed`,\
        \ a Boolean field that is set to `true`\r\n\r\nAs a prerequisite to using\
        \ this endpoint, your `SourceName` must have been granted access to the organization\
        \ to which the site belongs."
      operationId: Class_AddClientToClass
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClientToClassRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddClientToClassRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddClientToClassRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddClientToClassRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddClientToClassRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddClientToClassRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddClientToClassResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/AddClientToClassResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AddClientToClassResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AddClientToClassResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/AddClientToClassResponse'
      x-codegen-request-body-name: request
  /public/v{version}/class/classschedules:
    get:
      tags:
      - Class
      summary: Get class schedules.
      operationId: Class_GetClassSchedules
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.classScheduleIds
        in: query
        description: "The class schedule IDs.\r\n<br />Default: **all**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.endDate
        in: query
        description: "The end date of the range. Return any active enrollments that\
          \ occur on or before this day.\r\n<br />Default: **StartDate**"
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationIds
        in: query
        description: "The location IDs. \r\n<br />Default: **all**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.programIds
        in: query
        description: "The program IDs. \r\n<br />Default: **all**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.sessionTypeIds
        in: query
        description: "The session type IDs. \r\n<br />Default: **all**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.staffIds
        in: query
        description: "The staff IDs. \r\n<br />Default: **all**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: request.startDate
        in: query
        description: "The start date of the range. Return any active enrollments that\
          \ occur on or after this day.\r\n<br />Default: **today’s date**"
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClassSchedulesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClassSchedulesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClassSchedulesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClassSchedulesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClassSchedulesResponse'
  /public/v{version}/class/waitlistentries:
    get:
      tags:
      - Class
      summary: Get waiting list entries.
      description: Returns a list of waiting list entries for a specified class schedule
        or class. The request requires staff credentials and either a class schedule
        ID or class ID.
      operationId: Class_GetWaitlistEntries
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.classIds
        in: query
        description: "The requested class IDs. If a class ID is present, the request\
          \ automatically disregards any class schedule IDs in the request. <br />\r\
          \nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds`\
          \ is required; the others become optional.<br />\r\nDefault: **all ClassIds**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.classScheduleIds
        in: query
        description: "The requested class schedule IDs. If a class ID is present,\
          \ the request automatically disregards any class schedule IDs in the request.<br\
          \ />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds`\
          \ is required; the others become optional.<br />\r\nDefault: **all ClassScheduleIds**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.clientIds
        in: query
        description: "The requested client IDs.<br />\r\nEither `ClassScheduleIds`,\
          \ `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others\
          \ become optional.<br />\r\nDefault: **all ClientIds**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: request.hidePastEntries
        in: query
        description: "When `true`, indicates that past waiting list entries are hidden\
          \ from clients.<br />\r\nWhen `false`, indicates that past entries are not\
          \ hidden from clients.<br />\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.waitlistEntryIds
        in: query
        description: "The requested waiting list entry IDs.<br />\r\nEither `ClassScheduleIds`,\
          \ `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others\
          \ become optional.<br />\r\nDefault: **all WaitlistEntryIds**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWaitlistEntriesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetWaitlistEntriesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetWaitlistEntriesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetWaitlistEntriesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetWaitlistEntriesResponse'
  /public/v{version}/class/removefromwaitlist:
    post:
      tags:
      - Class
      summary: Remove a client from a waiting list.
      description: This endpoint does not return a response. If a call to this endpoint
        results in a 200 OK HTTP status code, then the call was successful.
      operationId: Class_RemoveFromWaitlist
      parameters:
      - name: request.waitlistEntryIds
        in: query
        description: A list of waiting list IDs to remove from waiting lists.
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveFromWaitlistResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoveFromWaitlistResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/RemoveFromWaitlistResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/RemoveFromWaitlistResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/RemoveFromWaitlistResponse'
  /public/v{version}/class/substituteclassteacher:
    post:
      tags:
      - Class
      summary: Substitute a class teacher.
      operationId: Class_SubstituteClassTeacher
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubstituteClassTeacherRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/SubstituteClassTeacherRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/SubstituteClassTeacherRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/SubstituteClassTeacherRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubstituteClassTeacherRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubstituteClassTeacherRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubstituteClassTeacherResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/SubstituteClassTeacherResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/SubstituteClassTeacherResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/SubstituteClassTeacherResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/SubstituteClassTeacherResponse'
      x-codegen-request-body-name: request
  /public/v{version}/client/clients:
    get:
      tags:
      - Client
      summary: Get clients.
      operationId: Client_GetClients
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.clientIDs
        in: query
        description: "The requested client IDs.\r\nDefault: **all IDs** that the authenticated\
          \ user’s access level allows."
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: request.isProspect
        in: query
        description: "When `true`, filters the results to include only those clients\
          \ marked as prospects for the business.<br />\r\nWhen `false`, indicates\
          \ that only those clients who are not marked prospects should be returned."
        schema:
          type: boolean
      - name: request.lastModifiedDate
        in: query
        description: Filters the results to include only the clients that have been
          modified on or after this date.
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.searchText
        in: query
        description: Text to use in the search. Can include FirstName, LastName, and
          Email. Note that user credentials must be provided.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClientsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClientsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClientsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClientsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClientsResponse'
  /public/v{version}/client/clientformulanotes:
    get:
      tags:
      - Client
      summary: Get a client's formula notes.
      operationId: Client_GetClientFormulaNotes
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.appointmentId
        in: query
        description: The appointment ID of the appointment that the formula notes
          are related to.
        schema:
          type: integer
          format: int64
      - name: request.clientId
        in: query
        description: The client ID of the client whose formula notes are being requested.
        schema:
          type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClientFormulaNotesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClientFormulaNotesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClientFormulaNotesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClientFormulaNotesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClientFormulaNotesResponse'
  /public/v{version}/client/uploadclientdocument:
    post:
      tags:
      - Client
      summary: Upload a document to a client's profile.
      description: "Returns a string representation of the image byte array. The maximum\
        \ document size is 1MB.\r\n\r\nThe maximum size file that can be uploaded\
        \ is 4 MB."
      operationId: Client_UploadClientDocument
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadClientDocumentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UploadClientDocumentRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UploadClientDocumentRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/UploadClientDocumentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UploadClientDocumentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadClientDocumentRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadClientDocumentResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UploadClientDocumentResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UploadClientDocumentResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/UploadClientDocumentResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/UploadClientDocumentResponse'
      x-codegen-request-body-name: request
  /public/v{version}/client/uploadclientphoto:
    post:
      tags:
      - Client
      summary: Upload a profile photo to a client's profile.
      description: "The maximum file size is 4 MB and acceptable file types are:\r\
        \n* bmp\r\n* jpeg\r\n* gif\r\n* tiff\r\n* png"
      operationId: Client_UploadClientPhoto
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadClientPhotoRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UploadClientPhotoRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UploadClientPhotoRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/UploadClientPhotoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UploadClientPhotoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadClientPhotoRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadClientPhotoResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UploadClientPhotoResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UploadClientPhotoResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/UploadClientPhotoResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/UploadClientPhotoResponse'
      x-codegen-request-body-name: request
  /public/v{version}/client/clientcontracts:
    get:
      tags:
      - Client
      summary: Get contracts that a client has purchased.
      operationId: Client_GetClientContracts
      parameters:
      - name: request.clientId
        in: query
        description: The ID of the client.
        required: true
        schema:
          type: string
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.clientAssociatedSitesOffset
        in: query
        description: "Determines how many sites are skipped over when retrieving a\
          \ client’s cross regional contracts. Used when a client ID is linked to\
          \ more than ten sites in an organization. Only a maximum of ten site databases\
          \ are queried when this call is made and `CrossRegionalLookup` is set to\
          \ `true`. To change which sites are queried, change this offset value.\r\
          \nDefault: **0**"
        schema:
          type: integer
          format: int32
      - name: request.crossRegionalLookup
        in: query
        description: "When `true`, indicates that the requesting client’s cross regional\
          \ contracts are returned, if any.<br />\r\nWhen `false`, indicates that\
          \ cross regional contracts are not returned."
        schema:
          type: boolean
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClientContractsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClientContractsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClientContractsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClientContractsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClientContractsResponse'
  /public/v{version}/client/clientservices:
    get:
      tags:
      - Client
      summary: Get pricing options that a client has purchased.
      operationId: Client_GetClientServices
      parameters:
      - name: request.clientId
        in: query
        description: The ID of the client to query. The results are a list of pricing
          options that the client has purchased. Note that “service” and “pricing
          option” are synonymous in this section of the documentation.
        required: true
        schema:
          type: string
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.classId
        in: query
        description: Filters results to only those pricing options that can be used
          to pay for this class.
        schema:
          type: integer
          format: int32
      - name: request.clientAssociatedSitesOffset
        in: query
        description: "Used to retrieve a client’s pricing options from multiple sites\
          \ within an organization when the client is associated with more than ten\
          \ sites. To change which ten sites are searched, change this offset value.\
          \ A value of 0 means that no sites are skipped and the first ten sites are\
          \ returned. You can use the `CrossRegionalClientAssociations` value from\
          \ `GET CrossRegionalClientAssociations` to determine how many sites the\
          \ client is associated with. Note that you must always have `CrossRegionalLookup`\
          \ set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor\
          \ example, if a client is associated with 25 sites, you need to call `GetClientServices`\
          \ three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations`\
          \ to determine how many sites a client is associated with, which tells you\
          \ how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset`\
          \ or set it to 0 to return the client’s services (pricing options) from\
          \ sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the\
          \ client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset`\
          \ to 20 to return the client pricing options from sites 21-25"
        schema:
          type: integer
          format: int32
      - name: request.crossRegionalLookup
        in: query
        description: "Used to retrieve a client’s pricing options from multiple sites\
          \ within an organization. When included and set to `true`, it searches a\
          \ maximum of ten sites with which this client is associated. When a client\
          \ is associated with more than ten sites, use `ClientAssociatedSitesOffset`\
          \ as many times as needed to search the additional sites with which the\
          \ client is associated. You can use the `CrossRegionalClientAssociations`\
          \ value from `GET CrossRegionalClientAssociations` to determine how many\
          \ sites the client is associated with. Note that a `SiteID` is returned\
          \ and populated in the `ClientServices` response when `CrossRegionalLookup`\
          \ is set to `true`.\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.endDate
        in: query
        description: Filters results to pricing options that are valid on or before
          this date.
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationIds
        in: query
        description: Filters results to pricing options that can be used at the listed
          location IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.programIds
        in: query
        description: Filters results to pricing options that belong to one of the
          given program IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.sessionTypeId
        in: query
        description: Filters results to pricing options that will pay for the given
          session type ID. Use this to find pricing options that will pay for a specific
          appointment type.
        schema:
          type: integer
          format: int32
      - name: request.showActiveOnly
        in: query
        description: "When `true`, includes active services only.\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.startDate
        in: query
        description: Filters results to pricing options that are valid on or after
          this date.
        schema:
          type: string
          format: date-time
      - name: request.visitCount
        in: query
        description: A filter on the minimum number of visits a service can pay for.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClientServicesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClientServicesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClientServicesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClientServicesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClientServicesResponse'
  /public/v{version}/client/clientvisits:
    get:
      tags:
      - Client
      summary: Get a client's visit history.
      operationId: Client_GetClientVisits
      parameters:
      - name: request.clientId
        in: query
        description: The ID of the requested client.
        required: true
        schema:
          type: string
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.clientAssociatedSitesOffset
        in: query
        description: The number of sites to skip when returning the site associated
          with a client.
        schema:
          type: integer
          format: int32
      - name: request.crossRegionalLookup
        in: query
        description: "When `true`, indicates that past and scheduled client visits\
          \ across all sites in the region are returned.<br />\r\nWhen `false`, indicates\
          \ that only visits at the current site are returned."
        schema:
          type: boolean
      - name: request.endDate
        in: query
        description: "The date past which class visits are not returned.\r\nDefault:\
          \ **today’s date**"
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.startDate
        in: query
        description: "The date before which class visits are not returned.\r\nDefault:\
          \ **the end date**"
        schema:
          type: string
          format: date-time
      - name: request.unpaidsOnly
        in: query
        description: "When `true`, indicates that only visits that have not been paid\
          \ for are returned.<br />\r\nWhen `false`, indicates that all visits are\
          \ returned, regardless of whether they have been paid for.<br />\r\nDefault:\
          \ **false**"
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClientVisitsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClientVisitsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClientVisitsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClientVisitsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClientVisitsResponse'
  /public/v{version}/client/activeclientmemberships:
    get:
      tags:
      - Client
      summary: Get a client's active memberships.
      operationId: Client_GetActiveClientMemberships
      parameters:
      - name: request.clientId
        in: query
        description: The ID of the client whose membership was requested.
        required: true
        schema:
          type: string
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.clientAssociatedSitesOffset
        in: query
        description: "Used to retrieve a client’s memberships from multiple sites\
          \ within an organization when the client is associated with more than ten\
          \ sites. To change which ten sites are searched, change this offset value.\
          \ A value of 0 means that no sites are skipped and the first ten sites are\
          \ returned. You can use the `CrossRegionalClientAssociations` value from\
          \ `GET CrossRegionalClientAssociations` to determine how many sites the\
          \ client is associated with. Note that you must always have `CrossRegionalLookup`\
          \ set to `true` to use this parameter.<br />\r\nDefault: **0**\r\n\r\nFor\
          \ example, if a client is associated with 25 sites, you need to call `GetClientServices`\
          \ three times, as follows:\r\n* Use `GET CrossRegionalClientAssociations`\
          \ to determine how many sites a client is associated with, which tells you\
          \ how many additional calls you need to make.\r\n* Either omit `ClientAssociatedSitesOffset`\
          \ or set it to 0 to return the client’s services (pricing options) from\
          \ sites 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the\
          \ client pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset`\
          \ to 20 to return the client pricing options from sites 21-25"
        schema:
          type: integer
          format: int32
      - name: request.crossRegionalLookup
        in: query
        description: "Used to retrieve a client’s memberships from multiple sites\
          \ within an organization. When included and set to `true`, it searches a\
          \ maximum of ten sites with which this client is associated. When a client\
          \ is associated with more than ten sites, use `ClientAssociatedSitesOffset`\
          \ as many times as needed to search the additional sites with which the\
          \ client is associated. You can use the `CrossRegionalClientAssociations`\
          \ value from `GET CrossRegionalClientAssociations` to determine how many\
          \ sites the client is associated with. Note that a `SiteID` is returned\
          \ and populated in the `ClientServices` response when `CrossRegionalLookup`\
          \ is set to `true`.\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationId
        in: query
        description: The ID of the location where the requested membership was created.
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActiveClientMembershipsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetActiveClientMembershipsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetActiveClientMembershipsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetActiveClientMembershipsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetActiveClientMembershipsResponse'
  /public/v{version}/client/requiredclientfields:
    get:
      tags:
      - Client
      summary: Get client required fields for a site.
      description: "Gets the list of fields that a new client has to fill out in business\
        \ mode, specifically for the sign-up process. `AddClient` and `UpdateClient`\
        \ validate against these fields.\r\n\r\nThis endpoint has no query parameters."
      operationId: Client_GetRequiredClientFields
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRequiredClientFieldsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetRequiredClientFieldsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetRequiredClientFieldsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetRequiredClientFieldsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetRequiredClientFieldsResponse'
  /public/v{version}/client/clientreferraltypes:
    get:
      tags:
      - Client
      summary: Get a site's configured client referral types.
      description: Gets a list of referral types. Referral types are options that
        new clients can choose to identify how they learned about the business. Referral
        types are typically used for the sign-up process.
      operationId: Client_GetClientReferralTypes
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.includeInactive
        in: query
        description: "When `true`, filters the results to include subtypes and inactive\
          \ referral types.<br />\r\nWhen `false`, includes no subtypes and only active\
          \ types."
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClientReferralTypesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClientReferralTypesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClientReferralTypesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClientReferralTypesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClientReferralTypesResponse'
  /public/v{version}/client/clientaccountbalances:
    get:
      tags:
      - Client
      summary: Get account balance information for one or more client(s).
      operationId: Client_GetClientAccountBalances
      parameters:
      - name: request.clientIds
        in: query
        description: The list of clients IDs for which you want account balances.
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.balanceDate
        in: query
        description: "The date you want a balance relative to. \r\nDefault: **the\
          \ current date**"
        schema:
          type: string
          format: date-time
      - name: request.classId
        in: query
        description: The class ID of the event for which you want a balance.
        schema:
          type: integer
          format: int32
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClientAccountBalancesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClientAccountBalancesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClientAccountBalancesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClientAccountBalancesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClientAccountBalancesResponse'
  /public/v{version}/client/clientpurchases:
    get:
      tags:
      - Client
      summary: Get a client's purchase history.
      operationId: Client_GetClientPurchases
      parameters:
      - name: request.clientId
        in: query
        description: The ID of the client you are querying for purchases.
        required: true
        schema:
          type: string
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endDate
        in: query
        description: "Filters results to purchases made before this timestamp.<br\
          \ />\r\nDefault: **end of today**"
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.saleId
        in: query
        description: Filters results to the single record associated with this ID.
        schema:
          type: integer
          format: int32
      - name: request.startDate
        in: query
        description: "Filters results to purchases made on or after this timestamp.<br\
          \ />\r\nDefault: **now**"
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClientPurchasesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClientPurchasesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClientPurchasesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClientPurchasesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClientPurchasesResponse'
  /public/v{version}/client/clientindexes:
    get:
      tags:
      - Client
      summary: Get a site's configured client indexes and client index values.
      description: "Client indexes are used to analyze client demographics. A business\
        \ owner can set up different categories with sets of values which they can\
        \ assign to each client. Client indexes are used in client searches, for tagging\
        \ clients so that the owner can send mass emails to similar groups, and for\
        \ many reports.\r\n\r\nFor more information, see Client Indexes and [Client\
        \ Index Values (video tutorial)](https://support.mindbodyonline.com/s/article/203261653-Client-indexes-and-client-index-values-video-tutorial?language=en_USclient)."
      operationId: Client_GetClientIndexes
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.requiredOnly
        in: query
        description: "When `true`, filters the results to only indexes that are required\
          \ on creation.<br />\r\nWhen `false` or omitted, returns all of the client\
          \ indexes."
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClientIndexesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetClientIndexesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetClientIndexesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetClientIndexesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetClientIndexesResponse'
  /public/v{version}/client/customclientfields:
    get:
      tags:
      - Client
      summary: Get a site's configured custom client fields.
      operationId: Client_GetCustomClientFields
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomClientFieldsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetCustomClientFieldsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetCustomClientFieldsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetCustomClientFieldsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetCustomClientFieldsResponse'
  /public/v{version}/client/addcontactlog:
    post:
      tags:
      - Client
      summary: Add a contact log to a client's account.
      operationId: Client_AddContactLog
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddContactLogRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddContactLogRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddContactLogRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddContactLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddContactLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddContactLogRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactLog'
            text/json:
              schema:
                $ref: '#/components/schemas/ContactLog'
            application/xml:
              schema:
                $ref: '#/components/schemas/ContactLog'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContactLog'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/ContactLog'
      x-codegen-request-body-name: request
  /public/v{version}/client/updatecontactlog:
    post:
      tags:
      - Client
      summary: Update a contact log on a client's account.
      operationId: Client_UpdateContactLog
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactLogRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateContactLogRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateContactLogRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateContactLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateContactLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateContactLogRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactLog'
            text/json:
              schema:
                $ref: '#/components/schemas/ContactLog'
            application/xml:
              schema:
                $ref: '#/components/schemas/ContactLog'
            text/xml:
              schema:
                $ref: '#/components/schemas/ContactLog'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/ContactLog'
      x-codegen-request-body-name: request
  /public/v{version}/client/crossregionalclientassociations:
    get:
      tags:
      - Client
      summary: Get a client's cross regional site associations.
      description: "Returns a list of sites that a particular client ID (also referred\
        \ to as an RSSID) or a client email address is associated with in a cross-regional\
        \ organization. Either the `ClientID` or `Email` parameter is required. If\
        \ both are provided, the `ClientID` is used.\r\n\r\nUse this endpoint to retrieve\
        \ information for other Public API endpoints, about the same client at multiple\
        \ sites within an organization. To use this endpoint, your developer account\
        \ must have been granted permission to the site’s entire organization.\r\n\
        \r\nNote that this endpoint does not work on the Developer Sandbox site, as\
        \ it is not set up for cross-regional use cases."
      operationId: Client_GetCrossRegionalClientAssociations
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.clientId
        in: query
        description: Looks up the cross regional associations by the client’s ID.
          Either `ClientId` or `Email` must be provided. If both are provided, the
          `ClientId` is used by default.
        schema:
          type: string
      - name: request.email
        in: query
        description: Looks up the cross regional associations by the client’s email
          address. Either `ClientId` or `Email` must be provided. If both are provided,
          the `ClientId` is used by default.
        schema:
          type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCrossRegionalClientAssociationsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetCrossRegionalClientAssociationsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetCrossRegionalClientAssociationsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetCrossRegionalClientAssociationsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetCrossRegionalClientAssociationsResponse'
  /public/v{version}/client/addclient:
    post:
      tags:
      - Client
      summary: Add a client to a site.
      description: "The `FirstName` and `LastName` parameters are always required\
        \ in this request. All other parameters are optional, but note that any of\
        \ the optional parameters could be required by a particular business, depending\
        \ on how the business has configured the site settings.\r\n\r\nUse after calling\
        \ the `GetRequiredClientFields` endpoint to make sure you are collecting all\
        \ required pieces of information."
      operationId: Client_AddClient
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClientRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddClientRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddClientRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddClientRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddClientRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddClientRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddClientResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/AddClientResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AddClientResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AddClientResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/AddClientResponse'
      x-codegen-request-body-name: request
  /public/v{version}/client/updateclient:
    post:
      tags:
      - Client
      summary: Update a client at a site.
      description: "Updates an existing client for a specific subscriber. Use this\
        \ endpoint as follows:\r\n* If you need to update the `ReferredBy` parameter,\
        \ use this endpoint after calling `GET ClientReferralTypes`.\r\n* When updating\
        \ a client’s home location, use after calling `GET Locations`.\r\n* If you\
        \ are updating a client’s stored credit card, use after calling `GET AcceptedCardTypes`\
        \ so that you can make sure the card is a type that is accepted at the subscriber.\r\
        \nIf this endpoint is used on a cross-regional site, passing in a client’\
        s RSSID and email address creates a cross-regional link. This means that the\
        \ client is created in cross-regional sites where the client does not exist\
        \ and `GET CrossRegionalClientAssociations` returns all appropriate cross-regional\
        \ sites. When `CrossRegionalUpdate` is omitted or set to `true`, the client’\
        s updated information is propagated to all of the region’s sites. If `CrossRegionalUpdate`\
        \ is set to `false`, only the local client is updated.\r\n\r\nNote that the\
        \ following items cannot be updated for a cross-regional client:\r\n* `ClientIndexes`\r\
        \n* `ClientRelationships`\r\n* `CustomClientFields`\r\n* `SalesReps`\r\n*\
        \ `SendAccountEmails`\r\n* `SendAccountTexts`\r\n* `SendPromotionalEmails`\r\
        \n* `SendPromotionalTexts`\r\n* `SendScheduleEmails`\r\n* `SendScheduleTexts`"
      operationId: Client_UpdateClient
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateClientResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UpdateClientResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UpdateClientResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/UpdateClientResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/UpdateClientResponse'
      x-codegen-request-body-name: request
  /public/v{version}/client/updateclientvisit:
    post:
      tags:
      - Client
      summary: Update a client's visit.
      operationId: Client_UpdateClientVisit
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientVisitRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateClientVisitRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateClientVisitRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateClientVisitRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateClientVisitRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateClientVisitRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateClientVisitResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UpdateClientVisitResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UpdateClientVisitResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/UpdateClientVisitResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/UpdateClientVisitResponse'
      x-codegen-request-body-name: request
  /public/v{version}/client/addarrival:
    post:
      tags:
      - Client
      summary: Add an arrival for a client.
      operationId: Client_AddArrival
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddArrivalRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddArrivalRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddArrivalRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddArrivalRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddArrivalRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddArrivalRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddArrivalResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/AddArrivalResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AddArrivalResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AddArrivalResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/AddArrivalResponse'
      x-codegen-request-body-name: request
  /public/v{version}/client/sendpasswordresetemail:
    post:
      tags:
      - Client
      summary: Send a password reset email to a client.
      operationId: Client_SendPasswordResetEmail
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendPasswordResetEmailRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/SendPasswordResetEmailRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/SendPasswordResetEmailRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/SendPasswordResetEmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendPasswordResetEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendPasswordResetEmailRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
            multipart/form-data:
              schema:
                type: object
      x-codegen-request-body-name: request
  /public/v{version}/client/contactlogs:
    get:
      tags:
      - Client
      summary: Get contact logs on a client's account.
      description: This endpoint contains a variety of filters that can return not
        just all contact logs, but also system-generated contact logs, contact logs
        assigned to specific staff members, and contact logs of specific types or
        subtypes.
      operationId: Client_GetContactLogs
      parameters:
      - name: request.clientId
        in: query
        description: The ID of the client whose contact logs are being requested.
        required: true
        schema:
          type: string
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endDate
        in: query
        description: "Filters the results to contact logs created before this date.<br\
          \ />\r\nDefault: **the start date**"
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.showSystemGenerated
        in: query
        description: "When `true`, system-generated contact logs are returned in the\
          \ results.<br />\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.staffIds
        in: query
        description: Filters the results to return contact logs assigned to one or
          more staff IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: request.startDate
        in: query
        description: "Filters the results to contact logs created on or after this\
          \ date.<br />\r\nDefault: **the current date**"
        schema:
          type: string
          format: date-time
      - name: request.subtypeIds
        in: query
        description: Filters the results to contact logs assigned one or more of these
          subtype IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.typeIds
        in: query
        description: Filters the results to contact logs assigned one or more of these
          type IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContactLogsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetContactLogsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetContactLogsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetContactLogsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetContactLogsResponse'
  /public/v{version}/client/updateclientservice:
    post:
      tags:
      - Client
      summary: Update a client's purchase pricing option.
      description: Updates the active date and/or expiration date of a client pricing
        option. This request requires staff user credentials. If the active date is
        modified, the expiration date is also modified accordingly. If the expiration
        date is modified, the active date is unchanged.
      operationId: Client_UpdateClientService
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientServiceRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateClientServiceRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateClientServiceRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/UpdateClientServiceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateClientServiceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateClientServiceRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateClientServiceResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UpdateClientServiceResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UpdateClientServiceResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/UpdateClientServiceResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/UpdateClientServiceResponse'
      x-codegen-request-body-name: request
  /public/v{version}/client/clientdirectdebitinfo:
    get:
      tags:
      - Client
      summary: Get direct debit info for a client.
      operationId: Client_GetDirectDebitInfo
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: clientId
        in: query
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebitInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/DirectDebitInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/DirectDebitInfo'
            text/xml:
              schema:
                $ref: '#/components/schemas/DirectDebitInfo'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/DirectDebitInfo'
    delete:
      tags:
      - Client
      summary: Delete direct debit info for a client.
      operationId: Client_DeleteDirectDebitInfo
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: clientId
        in: query
        schema:
          type: string
      responses:
        200:
          description: OK No Content
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
            multipart/form-data:
              schema:
                type: object
  /public/v{version}/client/addclientdirectdebitinfo:
    post:
      tags:
      - Client
      operationId: Client_AddClientDirectDebitInfo
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClientDirectDebitInfoRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddClientDirectDebitInfoRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddClientDirectDebitInfoRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddClientDirectDebitInfoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddClientDirectDebitInfoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddClientDirectDebitInfoRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddClientDirectDebitInfoResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/AddClientDirectDebitInfoResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AddClientDirectDebitInfoResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AddClientDirectDebitInfoResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/AddClientDirectDebitInfoResponse'
      x-codegen-request-body-name: request
  /public/v{version}/enrollment/addclienttoenrollment:
    post:
      tags:
      - Enrollment
      summary: Book a client into an enrollment.
      operationId: Enrollment_AddClientToEnrollment
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClientToEnrollmentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddClientToEnrollmentRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddClientToEnrollmentRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/AddClientToEnrollmentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddClientToEnrollmentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddClientToEnrollmentRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassSchedule'
            text/json:
              schema:
                $ref: '#/components/schemas/ClassSchedule'
            application/xml:
              schema:
                $ref: '#/components/schemas/ClassSchedule'
            text/xml:
              schema:
                $ref: '#/components/schemas/ClassSchedule'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/ClassSchedule'
      x-codegen-request-body-name: request
  /public/v{version}/enrollment/enrollments:
    get:
      tags:
      - Enrollment
      summary: Get enrollments scheduled at a site.
      description: Returns a list of enrollments. An enrollment is a service, such
        as a workshop or an event, that a staff member offers to multiple students,
        who commit to coming to all or most of the scheduled sessions. Enrollments
        typically run for a limited time only.
      operationId: Enrollment_GetEnrollments
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.classScheduleIds
        in: query
        description: A list of the requested class schedule IDs. If omitted, all class
          schedule IDs return.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.endDate
        in: query
        description: "The end of the date range. The response returns any active enrollments\
          \ that occur on or before this day.<br />\r\nDefault: **StartDate**"
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationIds
        in: query
        description: List of the IDs for the requested locations. If omitted, all
          location IDs return.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.programIds
        in: query
        description: List of the IDs for the requested programs. If omitted, all program
          IDs return.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.sessionTypeIds
        in: query
        description: List of the IDs for the requested session types. If omitted,
          all session types IDs return.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.staffIds
        in: query
        description: List of the IDs for the requested staff IDs. If omitted, all
          staff IDs return.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: request.startDate
        in: query
        description: "The start of the date range. The response returns any active\
          \ enrollments that occur on or after this day.<br />\r\nDefault: **today’\
          s date**"
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEnrollmentsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetEnrollmentsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetEnrollmentsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetEnrollmentsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetEnrollmentsResponse'
  /public/v{version}/payroll/scheduledserviceearnings:
    get:
      tags:
      - Payroll
      summary: Get class payroll for staff members.
      description: "A staff authorization token is not required for this endpoint,\
        \ but if one is passed, its permissions are honored. Depending on the access\
        \ permissions configured for the staff member whose token is passed, the endpoint\
        \ returns either only the payroll information for that staff member or it\
        \ returns the payroll information for all staff members.\r\n\r\nNote that\
        \ if a staff member is not paid for a class, earnings of zero are returned\
        \ by this endpoint.\r\n\r\nNote that this endpoint calculates both bonus and\
        \ no-reg rates for assistants.These rates are not supported by the Payroll\
        \ report in the web interface.\r\n\r\nNote that this endpoint returns both\
        \ the teacher’s adjusted rate and the assistant’s pay rate when the assistant\
        \ is paid by the teacher.The Payroll report in the web interface only returns\
        \ the teacher’s adjusted rate."
      operationId: Payroll_GetScheduledServiceEarnings
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endDateTime
        in: query
        description: "The end of the date range for the payroll information to be\
          \ returned. The maximum allowed date range is 14 days.<br />\r\nDefault:\
          \ **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data\
          \ returns for the period from the `StartDateTime` that you supply to today’\
          s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`,\
          \ data returns for the seven days prior to today’s date."
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.scheduledServiceId
        in: query
        description: The ID for the instance of the service offered
        schema:
          type: integer
          format: int64
      - name: request.scheduledServiceType
        in: query
        description: Defines a payroll filter for the type of service offered, either
          "Class", "Appointment", or "Enrollment".
        schema:
          type: string
      - name: request.staffId
        in: query
        description: A list of staff IDs that you want to retrieve payroll information
          for. If you do not supply a `StaffId`, all active staff members return,
          ordered by staff ID.
        schema:
          type: integer
          format: int64
      - name: request.startDateTime
        in: query
        description: "The beginning of the date range for the payroll information\
          \ to be returned. The maximum allowed date range is 14 days.\r\n* If you\
          \ do not supply a `StartDateTime`, data returns for the seven days prior\
          \ to the `EndDateTime` that you supply.\r\n* If you do not supply either\
          \ a `StartDateTime` or an `EndDateTime`, the data returns for seven days\
          \ prior to today’s date."
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScheduledServiceEarningsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetScheduledServiceEarningsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetScheduledServiceEarningsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetScheduledServiceEarningsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetScheduledServiceEarningsResponse'
  /public/v{version}/payroll/timecards:
    get:
      tags:
      - Payroll
      summary: Get time card payroll for staff members.
      operationId: Payroll_GetTimeCards
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endDateTime
        in: query
        description: "The end of the date range for the payroll information to be\
          \ returned. The maximum allowed date range is 14 days.<br />\r\nDefault:\
          \ **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data\
          \ returns for the period from the `StartDateTime` that you supply to today’\
          s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`,\
          \ data returns for the seven days prior to today’s date."
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.staffId
        in: query
        description: A list of staff IDs that you want to retrieve payroll information
          for. If you do not supply a `StaffId`, all active staff members return,
          ordered by staff ID.
        schema:
          type: integer
          format: int64
      - name: request.startDateTime
        in: query
        description: "The beginning of the date range for the payroll information\
          \ to be returned. The maximum allowed date range is 14 days.\r\n* If you\
          \ do not supply a `StartDateTime`, data returns for the seven days prior\
          \ to the `EndDateTime` that you supply.\r\n* If you do not supply either\
          \ a `StartDateTime` or an `EndDateTime`, the data returns for seven days\
          \ prior to today’s date."
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTimeCardsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetTimeCardsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetTimeCardsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetTimeCardsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetTimeCardsResponse'
  /public/v{version}/payroll/commissions:
    get:
      tags:
      - Payroll
      summary: Get commission payroll for staff members.
      description: A staff authorization token is not required for this endpoint,
        but if one is passed, its permissions are honored. Depending on the access
        permissions configured for the staff member whose token is passed, the endpoint
        returns either only the payroll information for that staff member or it returns
        the payroll information for all staff members.
      operationId: Payroll_GetCommissions
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endDateTime
        in: query
        description: "The end of the date range for the payroll information to be\
          \ returned. The maximum allowed date range is 14 days.<br />\r\nDefault:\
          \ **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data\
          \ returns for the period from the `StartDateTime` that you supply to today’\
          s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`,\
          \ data returns for the seven days prior to today’s date."
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.staffId
        in: query
        description: A list of staff IDs that you want to retrieve payroll information
          for. If you do not supply a `StaffId`, all active staff members return,
          ordered by staff ID.
        schema:
          type: integer
          format: int64
      - name: request.startDateTime
        in: query
        description: "The beginning of the date range for the payroll information\
          \ to be returned. The maximum allowed date range is 14 days.\r\n* If you\
          \ do not supply a `StartDateTime`, data returns for the seven days prior\
          \ to the `EndDateTime` that you supply.\r\n* If you do not supply either\
          \ a `StartDateTime` or an `EndDateTime`, the data returns for seven days\
          \ prior to today’s date."
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommissionsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetCommissionsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetCommissionsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetCommissionsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetCommissionsResponse'
  /public/v{version}/payroll/tips:
    get:
      tags:
      - Payroll
      summary: Get tips for staff members.
      operationId: Payroll_GetTips
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endDateTime
        in: query
        description: "The end of the date range for the payroll information to be\
          \ returned. The maximum allowed date range is 14 days.<br />\r\nDefault:\
          \ **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data\
          \ returns for the period from the `StartDateTime` that you supply to today’\
          s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`,\
          \ data returns for the seven days prior to today’s date."
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.staffId
        in: query
        description: A list of staff IDs that you want to retrieve payroll information
          for. If you do not supply a `StaffId`, all active staff members return,
          ordered by staff ID.
        schema:
          type: integer
          format: int64
      - name: request.startDateTime
        in: query
        description: "The beginning of the date range for the payroll information\
          \ to be returned. The maximum allowed date range is 14 days.\r\n* If you\
          \ do not supply a `StartDateTime`, data returns for the seven days prior\
          \ to the `EndDateTime` that you supply.\r\n* If you do not supply either\
          \ a `StartDateTime` or an `EndDateTime`, the data returns for seven days\
          \ prior to today’s date."
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTipsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetTipsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetTipsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetTipsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetTipsResponse'
  /public/v{version}/sale/sales:
    get:
      tags:
      - Sale
      summary: Get sales completed at a site.
      operationId: Sale_GetSales
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endSaleDateTime
        in: query
        description: Filters results to sales that happened before this date and time.
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.paymentMethodId
        in: query
        description: Filters results to sales paid for by the given payment method
          ID.
        schema:
          type: integer
          format: int32
      - name: request.saleId
        in: query
        description: Filters results to the requested sale ID.
        schema:
          type: integer
          format: int64
      - name: request.startSaleDateTime
        in: query
        description: Filters results to sales that happened after this date and time.
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSalesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetSalesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetSalesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetSalesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetSalesResponse'
  /public/v{version}/sale/purchasecontract:
    post:
      tags:
      - Sale
      summary: Purchase a contract for a client.
      description: "Allows a client to sign up for a contract or autopay using the\
        \ information returned from the `GET Contracts` endpoint. The client can pay\
        \ with a new credit card or with a stored credit card. The client must exist\
        \ at the site specified before this call is made.\r\n\r\nThis endpoint allows\
        \ a developer to specify whether a client pays now or pays on the `StartDate`.If\
        \ you are building a client-facing experience, you should talk with the business\
        \ owner to understand the owner’s policies before you give clients a choice\
        \ of the two payment types."
      operationId: Sale_PurchaseContract
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseContractRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PurchaseContractRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/PurchaseContractRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/PurchaseContractRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PurchaseContractRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PurchaseContractRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseContractResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PurchaseContractResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/PurchaseContractResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/PurchaseContractResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/PurchaseContractResponse'
      x-codegen-request-body-name: request
  /public/v{version}/sale/checkoutshoppingcart:
    post:
      tags:
      - Sale
      summary: Purchase pricing options, packages, retail products, or tips for a
        client.
      description: "This endpoint provides a wide range of functionality. For example,\
        \ you can use it when a client purchases new pricing options, retail products,\
        \ packages, and tips. You can also combine purchasing a new pricing option\
        \ and many other functions, such as booking a client into a class, booking\
        \ a new appointment for a client, enrolling a client into an enrollment or\
        \ course, or reconciling an unpaid, already booked appointment or class. Use\
        \ this call when a client purchases:\r\n* a pricing option, after calling\
        \ `GET Services` and choosing a specific pricing option’s ID\r\n* a retail\
        \ product, after calling `GET Products` and choosing a specific retail product’\
        s ID\r\n* a package, after calling `GET Packages` and choosing a specific\
        \ package’s ID\r\n* a tip to give to a staff member, after calling `GET Staff`\
        \ and choosing a specific staff member ID, and the amount that the client\
        \ wants to tip\r\nThe documentation provides explanations of the request body\
        \ and response, as well as the cart item metadata, payment item metadata,\
        \ and purchased cart items."
      operationId: Sale_CheckoutShoppingCart
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutShoppingCartRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CheckoutShoppingCartRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CheckoutShoppingCartRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/CheckoutShoppingCartRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CheckoutShoppingCartRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CheckoutShoppingCartRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
            multipart/form-data:
              schema:
                type: object
      x-codegen-request-body-name: request
  /public/v{version}/sale/giftcards:
    get:
      tags:
      - Sale
      summary: Get gift cards available for purchase at a site.
      operationId: Sale_GetGiftCards
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.ids
        in: query
        description: "Filters the results to the requested gift card IDs.<br />\r\n\
          Default: **all** gift cards."
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationId
        in: query
        description: When included, returns gift cards that are sold at the provided
          location ID.
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.soldOnline
        in: query
        description: "When `true`, only returns gift cards that are sold online.<br\
          \ />\r\nDefault: **false**"
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGiftCardResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetGiftCardResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetGiftCardResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetGiftCardResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetGiftCardResponse'
  /public/v{version}/sale/services:
    get:
      tags:
      - Sale
      summary: Get pricing options available for purchase at a site
      operationId: Sale_GetServices
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.classId
        in: query
        description: Filters to the pricing options for the specified class ID.
        schema:
          type: integer
          format: int32
      - name: request.classScheduleId
        in: query
        description: Filters to the pricing options for the specified class schedule
          ID.
        schema:
          type: integer
          format: int32
      - name: request.hideRelatedPrograms
        in: query
        description: "When `true`, indicates that pricing options of related programs\
          \ are omitted from the response.<br />\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationId
        in: query
        description: When specified, for each returned pricing option, `TaxRate` and
          `TaxIncluded` are calculated according to the specified location. Note that
          this does not filter results to only services provided at the given location,
          and for locations where Value-Added Tax (VAT) rules apply, the `TaxRate`
          is set to zero.
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.programIds
        in: query
        description: Filters to pricing options with the specified program IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.sellOnline
        in: query
        description: "When `true`, filters to the pricing options that can be sold\
          \ online.<br />\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.serviceIds
        in: query
        description: Filters to the pricing options with the specified IDs. In this
          context, service and pricing option are used interchangeably.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: request.sessionTypeIds
        in: query
        description: Filters to the pricing options with the specified session types
          IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.staffId
        in: query
        description: Sets `Price` and `OnlinePrice` to the particular pricing of a
          specific staff member, if allowed by the business.
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetServicesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetServicesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetServicesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetServicesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetServicesResponse'
  /public/v{version}/sale/products:
    get:
      tags:
      - Sale
      summary: Get retail products available for purchase at a site.
      operationId: Sale_GetProducts
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.categoryIds
        in: query
        description: A list of category IDs to filter by.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationId
        in: query
        description: "The location ID to use to determine the tax for the products\
          \ that this request returns.<br />\r\nDefault: **online store**"
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.productIds
        in: query
        description: An ID filter for products.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: request.searchText
        in: query
        description: A search filter, used for searching by term.
        schema:
          type: string
      - name: request.sellOnline
        in: query
        description: "When `true`, only products that can be sold online are returned.<br\
          \ />\r\nWhen `false`, all products are returned.<br />\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.subCategoryIds
        in: query
        description: A list of subcategory IDs to filter by.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetProductsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetProductsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetProductsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetProductsResponse'
  /public/v{version}/sale/acceptedcardtypes:
    get:
      tags:
      - Sale
      summary: Get credit cards types that a site accepts.
      description: "Gets a list of card types that the site accepts. You can also\
        \ use `GET Sites` to return the Site object, which contains individual accepted\
        \ card types for requested sites.\r\n\r\nThis endpoint has no query parameters.The\
        \ response returns a list of strings. Possible values are:\r\n* Visa\r\n*\
        \ MasterCard\r\n* Discover\r\n* AMEX"
      operationId: Sale_GetAcceptedCardTypes
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
            multipart/form-data:
              schema:
                type: array
                items:
                  type: string
  /public/v{version}/sale/contracts:
    get:
      tags:
      - Sale
      summary: Get contracts available for purchase at a site.
      operationId: Sale_GetContracts
      parameters:
      - name: request.locationId
        in: query
        description: The ID of the location that has the requested contracts and AutoPay
          options.
        required: true
        schema:
          type: integer
          format: int32
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.consumerId
        in: query
        description: The ID of the client.
        schema:
          type: integer
          format: int64
      - name: request.contractIds
        in: query
        description: When included, the response only contains details about the specified
          contract IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.soldOnline
        in: query
        description: "When `true`, the response only contains details about contracts\
          \ and AutoPay options that can be sold online.<br />\r\nWhen `false`, only\
          \ contracts that are not intended to be sold online are returned.<br />\r\
          \nDefault: **all contracts**"
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContractsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetContractsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetContractsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetContractsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetContractsResponse'
  /public/v{version}/sale/custompaymentmethods:
    get:
      tags:
      - Sale
      summary: Get payment methods that can be used to pay for sales at a site.
      operationId: Sale_GetCustomPaymentMethods
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomPaymentMethodsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetCustomPaymentMethodsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetCustomPaymentMethodsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetCustomPaymentMethodsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetCustomPaymentMethodsResponse'
  /public/v{version}/sale/purchasegiftcard:
    post:
      tags:
      - Sale
      summary: Purchase a gift card for a client.
      description: Allows a client to purchase a gift card from a business in a variety
        of designs. The card can be emailed to the recipient on a specific day, and
        a card title and a personal message can be added.
      operationId: Sale_PurchaseGiftCard
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseGiftCardRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/PurchaseGiftCardRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/PurchaseGiftCardRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/PurchaseGiftCardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PurchaseGiftCardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PurchaseGiftCardRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseGiftCardResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PurchaseGiftCardResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/PurchaseGiftCardResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/PurchaseGiftCardResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/PurchaseGiftCardResponse'
      x-codegen-request-body-name: request
  /public/v{version}/sale/packages:
    get:
      tags:
      - Sale
      summary: Get packages available for purchase at a site.
      description: A package is typically used to combine multiple services and/or
        products into a single offering. Staff members can check out multiple appointments
        while selling the package, and can discount the items included. For example,
        a spa might bundle a massage, a pedicure, a manicure, a facial, and a few
        selected beauty products into a package.
      operationId: Sale_GetPackages
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.packageIds
        in: query
        description: A list of the packages IDs to filter by.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.sellOnline
        in: query
        description: "When `true`, only returns products that can be sold online.<br\
          \ />\r\nWhen `false`, all products are returned.<br />\r\nDefault: **false**"
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPackagesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetPackagesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetPackagesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetPackagesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetPackagesResponse'
  /public/v{version}/sale/giftcardbalance:
    get:
      tags:
      - Sale
      summary: Get a gift card's remaining balance.
      operationId: Sale_GetGiftCardBalance
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: barcodeId
        in: query
        description: The barcode ID of the gift card for which you want the balance.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGiftCardBalanceResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetGiftCardBalanceResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetGiftCardBalanceResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetGiftCardBalanceResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetGiftCardBalanceResponse'
  /public/v{version}/site/sites:
    get:
      tags:
      - Site
      summary: Get all sites that can be accessed by an API Key.
      description: "Gets a list of sites that the developer has permission to view.\r\
        \n* Passing in no `SiteIds` returns all sites that the developer has access\
        \ to.\r\n* Passing in one `SiteIds` returns more detailed information about\
        \ the specified site."
      operationId: Site_GetSites
      parameters:
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.siteIds
        in: query
        description: List of the requested site IDs. When omitted, returns all sites
          that the source has access to.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSitesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetSitesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetSitesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetSitesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetSitesResponse'
  /public/v{version}/site/sessiontypes:
    get:
      tags:
      - Site
      summary: Get the session types used at a site.
      operationId: Site_GetSessionTypes
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.onlineOnly
        in: query
        description: "When `true`, indicates that only the session types that can\
          \ be booked online should be returned.<br />\r\nDefault: **false**"
        schema:
          type: boolean
      - name: request.programIDs
        in: query
        description: Filters results to session types that belong to one of the given
          program IDs. If omitted, all program IDs return.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionTypesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetSessionTypesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetSessionTypesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetSessionTypesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetSessionTypesResponse'
  /public/v{version}/site/locations:
    get:
      tags:
      - Site
      summary: Get locations for a site.
      operationId: Site_GetLocations
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLocationsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetLocationsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetLocationsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetLocationsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetLocationsResponse'
  /public/v{version}/site/programs:
    get:
      tags:
      - Site
      summary: Get service categories offered at a site.
      operationId: Site_GetPrograms
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.onlineOnly
        in: query
        description: "If `true`, filters results to show only those programs that\
          \ are shown online.<br />\r\nIf `false`, all programs are returned.<br />\r\
          \nDefault: **false**"
        schema:
          type: boolean
      - name: request.scheduleType
        in: query
        description: A schedule type used to filter the returned results.
        schema:
          type: string
          enum:
          - All
          - Class
          - Enrollment
          - Appointment
          - Resource
          - Media
          - Arrival
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProgramsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetProgramsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetProgramsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetProgramsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetProgramsResponse'
  /public/v{version}/site/resources:
    get:
      tags:
      - Site
      summary: Get resources used at a site.
      operationId: Site_GetResources
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.endDateTime
        in: query
        description: The time the resource ends. This parameter is ignored if `EndDateTime`
          or `LocationID` is not set.
        schema:
          type: string
          format: date-time
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationId
        in: query
        description: "The location of the resource. This parameter is ignored if `EndDateTime`\
          \ or `LocationID` is not set.<br />\r\nDefault: **all**"
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.sessionTypeIds
        in: query
        description: "List of session type IDs.<br />\r\nDefault: **all**"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      - name: request.startDateTime
        in: query
        description: The time the resource starts. This parameter is ignored if `EndDateTime`
          or `LocationID` is not set.
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourcesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetResourcesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetResourcesResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetResourcesResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetResourcesResponse'
  /public/v{version}/site/activationcode:
    get:
      tags:
      - Site
      summary: Get an activation code for a site.
      description: "Before you can use this endpoint, MINDBODY must approve your developer\
        \ account for live access. If you have finished testing in the sandbox and\
        \ are ready to begin working with MINDBODY customers, log into your account\
        \ and request to go live.\r\n\r\nSee [Accessing Business Data From MINDBODY](https://developers.mindbodyonline.com/PublicDocumentation/V6#accessing-business-data)\
        \ for more information about the activation code and how to use it.\r\n\r\n\
        Once you are approved, this endpoint returns an activation code.This endpoint\
        \ supports only one site per call."
      operationId: Site_GetActivationCode
      parameters:
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActivationCodeResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetActivationCodeResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetActivationCodeResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetActivationCodeResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetActivationCodeResponse'
  /public/v{version}/site/memberships:
    get:
      tags:
      - Site
      summary: Get the memberships at a site.
      operationId: Site_GetMemberships
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.membershipIds
        in: query
        description: Filters results to memberships that belong to one of the given
          membership IDs. If omitted, all memberships are returned.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembershipsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetMembershipsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetMembershipsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetMembershipsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetMembershipsResponse'
  /public/v{version}/staff/staff:
    get:
      tags:
      - Staff
      summary: Get staff members at a site.
      operationId: Staff_GetStaff
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      - name: request.filters
        in: query
        description: "Filters to apply to the search. Possible values are:\r\n* StaffViewable\r\
          \n* AppointmentInstructor\r\n* ClassInstructor\r\n* Male\r\n* Female"
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: request.limit
        in: query
        description: Number of results to include, defaults to 100
        schema:
          type: integer
          format: int32
      - name: request.locationId
        in: query
        description: Return only staff members that are available at the specified
          location. You must supply a valid `SessionTypeID` and `StartDateTime` to
          use this parameter.
        schema:
          type: integer
          format: int32
      - name: request.offset
        in: query
        description: Page offset, defaults to 0.
        schema:
          type: integer
          format: int32
      - name: request.sessionTypeId
        in: query
        description: Return only staff members that are available for the specified
          session type. You must supply a valid `StartDateTime` and `LocationID` to
          use this parameter.
        schema:
          type: integer
          format: int32
      - name: request.staffIds
        in: query
        description: A list of the requested staff IDs.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: request.startDateTime
        in: query
        description: Return only staff members that are available at the specified
          date and time. You must supply a valid `SessionTypeID` and `LocationID`
          to use this parameter.
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStaffResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetStaffResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetStaffResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetStaffResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetStaffResponse'
  /public/v{version}/staff/staffpermissions:
    get:
      tags:
      - Staff
      summary: Get configured staff permissions for a staff member.
      operationId: Staff_GetStaffPermissions
      parameters:
      - name: request.staffId
        in: query
        description: The ID of the staff member whose permissions you want to return.
        required: true
        schema:
          type: integer
          format: int64
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStaffPermissionsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetStaffPermissionsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetStaffPermissionsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/GetStaffPermissionsResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/GetStaffPermissionsResponse'
  /public/v{version}/usertoken/issue:
    post:
      tags:
      - UserToken
      summary: Get a staff user token.
      operationId: UserToken_Issue
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IssueRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/IssueRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/IssueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IssueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/IssueRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/IssueResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/IssueResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/IssueResponse'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/IssueResponse'
      x-codegen-request-body-name: request
  /public/v{version}/usertoken/revoke:
    delete:
      tags:
      - UserToken
      summary: Revoke a user token.
      description: Revokes the user token in the Authorization header.
      operationId: UserToken_Revoke
      parameters:
      - name: siteId
        in: header
        description: ID of the site from which to pull data.
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authorization
        in: header
        description: A staff user authorization token.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
            text/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            text/xml:
              schema:
                type: object
            multipart/form-data:
              schema:
                type: object
components:
  schemas:
    AddAppointmentRequest:
      required:
      - ClientId
      - LocationId
      - SessionTypeId
      - StaffId
      - StartDateTime
      type: object
      properties:
        ApplyPayment:
          type: boolean
          description: "When `true`, indicates that a payment should be applied to\
            \ the appointment. \r\n<br />Default: **true**"
        ClientId:
          type: string
          description: The RRSID of the client for whom the new appointment is being
            made.
        Duration:
          type: integer
          description: The duration of the appointment. This parameter is used to
            change the default duration of an appointment.
          format: int32
        Execute:
          type: string
          description: The action taken to add this appointment.
        EndDateTime:
          type: string
          description: "The end date and time of the new appointment. <br />\r\nDefault:\
            \ **StartDateTime**, offset by the staff member’s default appointment\
            \ duration."
          format: date-time
        GenderPreference:
          type: string
          description: The client’s service provider gender preference.
          enum:
          - None
          - Female
          - Male
        LocationId:
          type: integer
          description: The ID of the location where the new appointment is to take
            place.
          format: int32
        Notes:
          type: string
          description: Any general notes about this appointment.
        ProviderId:
          type: string
          description: If a user has Complementary and Alternative Medicine features
            enabled, this parameter assigns a provider ID to the appointment.
        ResourceIds:
          type: array
          description: A list of resource IDs to associate with the new appointment.
          items:
            type: integer
            format: int32
        SendEmail:
          type: boolean
          description: " Whether to send client an email for cancellations. An email\
            \ is sent only if the client has an email address and automatic emails\
            \ have been set up. \r\n<br />Default: **false**"
        SessionTypeId:
          type: integer
          description: The session type associated with the new appointment.
          format: int32
        StaffId:
          type: integer
          description: The ID of the staff member who is adding the new appointment.
          format: int64
        StaffRequested:
          type: boolean
          description: When `true`, indicates that the staff member was requested
            specifically by the client.
        StartDateTime:
          type: string
          description: The start date and time of the new appointment.
          format: date-time
        Test:
          type: boolean
          description: " When true, indicates that the method is to be validated,\
            \ but no new appointment data is added. \r\n<br />Default: **false**"
    AddAppointmentResponse:
      type: object
      properties:
        Appointment:
          $ref: '#/components/schemas/Appointment'
    Appointment:
      type: object
      properties:
        GenderPreference:
          type: string
          description: The preferred gender of the appointment provider.
          enum:
          - None
          - Female
          - Male
        Duration:
          type: integer
          description: The duration of the appointment.
          format: int32
        ProviderId:
          type: string
          description: If a user has Complementary and Alternative Medicine features
            enabled, this property indicates the provider assigned to the appointment.
        Id:
          type: integer
          description: The unique ID of the appointment.
          format: int64
        Status:
          type: string
          description: The status of this appointment.
          enum:
          - None
          - Requested
          - Booked
          - Completed
          - Confirmed
          - Arrived
          - NoShow
          - Cancelled
          - LateCancelled
        StartDateTime:
          type: string
          description: The date and time the appointment is to start.
          format: date-time
        EndDateTime:
          type: string
          description: The date and time the appointment is to end.
          format: date-time
        Notes:
          type: string
          description: Any notes associated with the appointment.
        StaffRequested:
          type: boolean
          description: When `true`, indicates that the staff member was requested
            specifically by the client.
        ProgramId:
          type: integer
          description: The ID of the program to which this appointment belongs.
          format: int32
        SessionTypeId:
          type: integer
          description: The ID of the session type of this appointment.
          format: int32
        LocationId:
          type: integer
          description: The ID of the location where this appointment is to take place.
          format: int32
        StaffId:
          type: integer
          description: The ID of the staff member providing the service for this appointment.
          format: int64
        ClientId:
          type: string
          description: The RSSID of the client who is booked for this appointment.
        FirstAppointment:
          type: boolean
          description: When `true`, indicates that this is the client’s first appointment
            at this site.
        ClientServiceId:
          type: integer
          description: The ID of the pass on the client’s account that is to pay for
            this appointment.
          format: int64
        Resources:
          type: array
          description: The resources this appointment is to use.
          items:
            $ref: '#/components/schemas/Resource'
      description: Contains information about an appointment.
    Resource:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the resource.
          format: int32
        Name:
          type: string
          description: The name of the resource.
      description: Contains information about resources, such as rooms.
    UpdateAppointmentRequest:
      required:
      - AppointmentId
      type: object
      properties:
        AppointmentId:
          type: integer
          description: The appointments unique ID.
          format: int64
        EndDateTime:
          type: string
          description: "The end date and time of the new appointment. \r\n<br />Default:\
            \ **StartDateTime**, offset by the staff member’s default appointment\
            \ duration."
          format: date-time
        Execute:
          type: string
          description: The action taken to add this appointment.
        GenderPreference:
          type: string
          description: The client’s service provider gender preference.
        Notes:
          type: string
          description: Any general notes about this appointment.
        ProviderId:
          type: string
          description: If a user has Complementary and Alternative Medicine features
            enabled, this parameter assigns a provider ID to the appointment.
        ResourceIds:
          type: array
          description: A list of resource IDs to associate with the new appointment.
          items:
            type: integer
            format: int32
        SendEmail:
          type: boolean
          description: "Whether to send client an email for cancellations. An email\
            \ is sent only if the client has an email address and automatic emails\
            \ have been set up. \r\n<br />Default: **false**"
        SessionTypeId:
          type: integer
          description: The session type associated with the new appointment.
          format: int32
        StaffId:
          type: integer
          description: The ID of the staff member who is adding the new appointment.
          format: int64
        StartDateTime:
          type: string
          description: The start date and time of the new appointment.
          format: date-time
        Test:
          type: boolean
          description: "When `true`, indicates that the method is to be validated,\
            \ but no new appointment data is added. \r\n<br />Default: **false**"
    UpdateAppointmentResponse:
      type: object
      properties:
        Appointment:
          $ref: '#/components/schemas/Appointment'
    GetBookableItemsRequest:
      required:
      - SessionTypeIds
      type: object
      properties:
        SessionTypeIds:
          type: array
          description: A list of the requested session type IDs.
          items:
            type: integer
            format: int32
        LocationIds:
          type: array
          description: A list of the requested location IDs.
          items:
            type: integer
            format: int32
        StaffIds:
          type: array
          description: A list of the requested staff IDs.
          items:
            type: integer
            format: int64
        StartDate:
          type: string
          description: "The start date of the requested date range. \r\n<br />Default:\
            \ **today’s date**"
          format: date-time
        EndDate:
          type: string
          description: "The end date of the requested date range. \r\n<br />Default:\
            \ **StartDate**"
          format: date-time
        AppointmentId:
          type: integer
          description: If provided, filters out the appointment with this ID.
          format: int64
        IgnoreDefaultSessionLength:
          type: boolean
          description: "When `true`, availabilities that are non-default return, for\
            \ example, a 30-minute availability with a 60-minute default session length.<br\
            \ />\r\nWhen `false`, only availabilities that have the default session\
            \ length return."
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetBookableItemsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Availabilities:
          type: array
          description: Contains information about the availabilities for appointment
            booking.
          items:
            $ref: '#/components/schemas/Availability'
    PaginationResponse:
      type: object
      properties:
        RequestedLimit:
          type: integer
          description: Limit from pagination request
          format: int32
        RequestedOffset:
          type: integer
          description: Offset from pagination request
          format: int32
        PageSize:
          type: integer
          description: Number of results returned in this response
          format: int32
        TotalResults:
          type: integer
          description: Total number of results in dataset
          format: int32
    Availability:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the availability.
          format: int32
        Staff:
          $ref: '#/components/schemas/Staff'
        SessionType:
          $ref: '#/components/schemas/SessionType'
        Programs:
          type: array
          description: Contains information about the programs.
          items:
            $ref: '#/components/schemas/Program'
        StartDateTime:
          type: string
          description: The date and time the availability starts.
          format: date-time
        EndDateTime:
          type: string
          description: The date and time the availability ends.
          format: date-time
        BookableEndDateTime:
          type: string
          description: The time of day that the last appointment can start.
          format: date-time
        Location:
          $ref: '#/components/schemas/Location'
      description: A staff availability entry
    Staff:
      type: object
      properties:
        Address:
          type: string
          description: The address of the staff member who is teaching the class.
        AppointmentInstructor:
          type: boolean
          description: "When `true`, indicates that the staff member offers appointments.<br\
            \ />\r\nWhen `false`, indicates that the staff member does not offer appointments."
        AlwaysAllowDoubleBooking:
          type: boolean
          description: "When `true`, indicates that the staff member can be scheduled\
            \ for overlapping services.<br />\r\nWhen `false`, indicates that the\
            \ staff can only be scheduled for one service at a time in any given time-frame."
        Bio:
          type: string
          description: The staff member’s biography. This string contains HTML.
        City:
          type: string
          description: The staff member’s city.
        Country:
          type: string
          description: The staff member’s country.
        Email:
          type: string
          description: The staff member’s email address.
        FirstName:
          type: string
          description: The staff member’s first name.
        HomePhone:
          type: string
          description: The staff member’s home phone number.
        Id:
          type: integer
          description: The ID assigned to the staff member.
          format: int64
        IndependentContractor:
          type: boolean
          description: "When `true`, indicates that the staff member is an independent\
            \ contractor.\r\nWhen `false`, indicates that the staff member is not\
            \ an independent contractor."
        IsMale:
          type: boolean
          description: "When `true`, indicates that the staff member is male.\r\n\
            When `false`, indicates that the staff member is female."
        LastName:
          type: string
          description: The staff member’s last name.
        MobilePhone:
          type: string
          description: The staff member’s mobile phone number.
        Name:
          type: string
          description: The staff member’s name.
        PostalCode:
          type: string
          description: The staff member’s postal code.
        ClassTeacher:
          type: boolean
          description: "When `true`, indicates that the staff member can teach classes.\r\
            \nWhen `false`, indicates that the staff member cannot teach classes."
        SortOrder:
          type: integer
          description: If configured by the business owner, this field determines
            a staff member’s weight when sorting. Use this field to sort staff members
            on your interface.
          format: int32
        State:
          type: string
          description: The staff member’s state.
        WorkPhone:
          type: string
          description: The staff member’s work phone number.
        ImageUrl:
          type: string
          description: The URL of the staff member’s image, if one has been uploaded.
        Appointments:
          type: array
          description: A list of appointments for the staff.
          items:
            $ref: '#/components/schemas/Appointment'
        Unavailabilities:
          type: array
          description: A list of unavailabilities for the staff.
          items:
            $ref: '#/components/schemas/Unavailability'
        Availabilities:
          type: array
          description: A list of availabilities for the staff.
          items:
            $ref: '#/components/schemas/Availability'
    SessionType:
      type: object
      properties:
        Type:
          type: string
          description: Contains the class description session type.
          enum:
          - All
          - Class
          - Enrollment
          - Appointment
          - Resource
          - Media
          - Arrival
        DefaultTimeLength:
          type: integer
          description: The default amount of time that a session of this type typically
            lasts.
          format: int32
        Id:
          type: integer
          description: This session type’s unique ID.
          format: int32
        Name:
          type: string
          description: The name of this session type.
        NumDeducted:
          type: integer
          description: The number of sessions that this session type deducts from
            the pricing option used to pay for this type of session.
          format: int32
        ProgramId:
          type: integer
          description: This session type’s service category ID.
          format: int32
        Category:
          type: string
          description: This session type’s category.
        CategoryId:
          type: integer
          description: This session type’s category ID.
          format: int32
        Subcategory:
          type: string
          description: This session type’s subcategory.
        SubcategoryId:
          type: integer
          description: This session type’s subcategory ID.
          format: int32
    Program:
      type: object
      properties:
        Id:
          type: integer
          description: The service category’s ID.
          format: int32
        Name:
          type: string
          description: The name of this service category.
        ScheduleType:
          type: string
          description: The service category’s schedule type.
          enum:
          - All
          - Class
          - Enrollment
          - Appointment
          - Resource
          - Media
          - Arrival
        CancelOffset:
          type: integer
          description: The offset to use for the service category.
          format: int32
    Location:
      type: object
      properties:
        AdditionalImageURLs:
          type: array
          description: A list of URLs of any images associated with this location.
          items:
            type: string
        Address:
          type: string
          description: The first line of the location’s street address.
        Address2:
          type: string
          description: A second address line for the location’s street address, if
            needed.
        Amenities:
          type: array
          description: A list of strings representing amenities available at the location.
          items:
            $ref: '#/components/schemas/Amenity'
        BusinessDescription:
          type: string
          description: The business description for the location, as configured by
            the business owner.
        City:
          type: string
          description: The location’s city.
        Description:
          type: string
          description: A description of the location.
        HasClasses:
          type: boolean
          description: "When `true`, indicates that classes are held at this location.<br\
            \ />\r\nWhen `false`, Indicates that classes are not held at this location."
        Id:
          type: integer
          description: The ID assigned to this location.
          format: int32
        Latitude:
          type: number
          description: The location’s latitude.
          format: double
        Longitude:
          type: number
          description: The location’s longitude.
          format: double
        Name:
          type: string
          description: The name of this location.
        Phone:
          type: string
          description: The location’s phone number.
        PhoneExtension:
          type: string
          description: The location’s phone extension.
        PostalCode:
          type: string
          description: The location’s postal code.
        SiteID:
          type: integer
          description: The ID number assigned to this location.
          format: int32
        StateProvCode:
          type: string
          description: The location’s state or province code.
        Tax1:
          type: number
          description: A decimal representation of the location’s first tax rate.
            Tax properties are provided to apply all taxes to the purchase price that
            the purchase is subject to. Use as many tax properties as needed to represent
            all the taxes that apply in the location. Enter a decimal number that
            represents the appropriate tax rate. For example, for an 8% sales tax,
            enter 0.08.
          format: float
        Tax2:
          type: number
          description: A decimal representation of the location’s second tax rate.
            See the example in the description of Tax1.
          format: float
        Tax3:
          type: number
          description: A decimal representation of the location’s third tax rate.
            See the example in the description of Tax1.
          format: float
        Tax4:
          type: number
          description: A decimal representation of the location’s fourth tax rate.
            See the example in the description of Tax1.
          format: float
        Tax5:
          type: number
          description: A decimal representation of the location’s fifth tax rate.
            See the example in the description of Tax1.
          format: float
        TotalNumberOfRatings:
          type: integer
          description: The number of reviews that clients have left for this location.
          format: int32
        AverageRating:
          type: number
          description: The average rating for the location, out of five stars.
          format: double
        TotalNumberOfDeals:
          type: integer
          description: The number of distinct introductory pricing options available
            for purchase at this location.
          format: int64
    Unavailability:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the unavailability.
          format: int32
        StartDateTime:
          type: string
          description: The date and time the unavailability starts.
          format: date-time
        EndDateTime:
          type: string
          description: The date and time the unavailability ends.
          format: date-time
        Description:
          type: string
          description: A description of the unavailability.
    Amenity:
      type: object
      properties:
        Id:
          type: integer
          description: The ID number of the amenity.
          format: int32
        Name:
          type: string
          description: The name of the amenity, for example, food or lockers.
      description: Definition of a location amenity
    GetActiveSessionTimesRequest:
      type: object
      properties:
        ScheduleType:
          type: string
          description: Filters on the provided the schedule type. Either `SessionTypeIds`
            or `ScheduleType` must be provided.
          enum:
          - All
          - Class
          - Enrollment
          - Appointment
          - Resource
          - Media
          - Arrival
        SessionTypeIds:
          type: array
          description: Filters on the provided session type IDs. Either `SessionTypeIds`
            or `ScheduleType` must be provided.
          items:
            type: integer
            format: int32
        StartTime:
          type: string
          description: "Filters results to times that start on or after this time\
            \ on the current date. Any date provided is ignored.\r\n<br />Default:\
            \ **00:00:00**"
          format: date-time
        EndTime:
          type: string
          description: "Filters results to times that end on or before this time on\
            \ the current date. Any date provided is ignored..\r\n<br />Default: **23:59:59**"
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetActiveSessionTimesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        ActiveSessionTimes:
          type: array
          description: "List of available start times for active sessions. Note the\
            \ following:\r\n* The times returned represent possibilities for scheduling\
            \ a session, not necessarily currently scheduled sessions.\r\n* The response\
            \ includes either all schedule types or those filtered by supplying `ScheduleType`\
            \ or `SessionTypeIds`.\r\n* Each session has an associated schedule type,\
            \ but when you supply `SessionTypeIds`, they may map to one or more of\
            \ the schedule types."
          items:
            type: string
    GetScheduleItemsRequest:
      type: object
      properties:
        LocationIds:
          type: array
          description: A list of requested location IDs.
          items:
            type: integer
            format: int32
        StaffIds:
          type: array
          description: A list of requested staff IDs.
          items:
            type: integer
            format: int64
        StartDate:
          type: string
          description: "The start date of the requested date range. \r\n<br />Default:\
            \ **today’s date**"
          format: date-time
        EndDate:
          type: string
          description: "The end date of the requested date range. \r\n<br />Default:\
            \ **today’s date**"
          format: date-time
        IgnorePrepFinishTimes:
          type: boolean
          description: "When `true`, appointment preparation and finish unavailabilities\
            \ are not returned. \r\n<br />Default: **false**"
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetScheduleItemsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        StaffMembers:
          type: array
          description: Contains information about staff members with schedule items.
          items:
            $ref: '#/components/schemas/Staff'
    GetAppointmentOptionsResponse:
      type: object
      properties:
        Options:
          type: array
          description: Contains information about the appointment options.
          items:
            $ref: '#/components/schemas/AppointmentOption'
    AppointmentOption:
      type: object
      properties:
        DisplayName:
          type: string
          description: The name displayed for this appointment option.
        Name:
          type: string
          description: The name given to this option.
        Value:
          type: string
          description: The value of the option.
        Type:
          type: string
          description: The data type of the option value.
      description: An appointment option name/value pair
    GetStaffAppointmentsRequest:
      type: object
      properties:
        AppointmentIds:
          type: array
          description: A list of the requested appointment IDs.
          items:
            type: integer
            format: int32
        LocationIds:
          type: array
          description: A list of the requested location IDs.
          items:
            type: integer
            format: int32
        StartDate:
          type: string
          description: "The start date of the requested date range. If omitted, the\
            \ default is used. \r\n<br />Default: **today’s date**"
          format: date-time
        EndDate:
          type: string
          description: "The end date of the requested date range. \r\n<br />Default:\
            \ **StartDate**"
          format: date-time
        StaffIds:
          type: array
          description: List of staff IDs to be returned. Use a value of zero to return
            all staff appointments.
          items:
            type: integer
            format: int64
        ClientId:
          type: string
          description: The client ID to be returned.
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetStaffAppointmentsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Appointments:
          type: array
          description: Contains information about appointments and their details.
          items:
            $ref: '#/components/schemas/Appointment'
    GetClassesRequest:
      type: object
      properties:
        ClassDescriptionIds:
          type: array
          description: The requested class description IDs.
          items:
            type: integer
            format: int32
        ClassIds:
          type: array
          description: The requested class IDs.
          items:
            type: integer
            format: int32
        StaffIds:
          type: array
          description: The requested IDs of the teaching staff members.
          items:
            type: integer
            format: int64
        StartDateTime:
          type: string
          description: "The requested start date for filtering. \r\n<br />Default:\
            \ **today’s date**"
          format: date-time
        EndDateTime:
          type: string
          description: "The requested end date for filtering.\r\n<br />Default: **today’\
            s date**"
          format: date-time
        ClientId:
          type: string
          description: The client ID of the client who is viewing this class list.
            Based on identity, the client may be able to see additional information,
            such as membership specials.
        ProgramIds:
          type: array
          description: A list of program IDs on which to base the search.
          items:
            type: integer
            format: int32
        SessionTypeIds:
          type: array
          description: A list of session type IDs on which to base the search.
          items:
            type: integer
            format: int32
        LocationIds:
          type: array
          description: A list of location IDs on which to base the search.
          items:
            type: integer
            format: int32
        SemesterIds:
          type: array
          description: A list of semester IDs on which to base the search.
          items:
            type: integer
            format: int32
        HideCanceledClasses:
          type: boolean
          description: "When `true`, canceled classes are removed from the response.<br\
            \ />\r\nWhen `false`, canceled classes are included in the response.<br\
            \ />\r\nDefault: **false**"
        SchedulingWindow:
          type: boolean
          description: "When `true`, classes outside scheduling window are removed\
            \ from the response.<br />\r\nWhen `false`, classes are included in the\
            \ response, regardless of the scheduling window.<br />\r\nDefault: **false**"
        LastModifiedDate:
          type: string
          description: When included in the request, only records modified on or after
            the `LastModifiedDate` specified are included in the response.
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClassesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Classes:
          type: array
          description: A list of the requested classes.
          items:
            $ref: '#/components/schemas/Class'
    Class:
      type: object
      properties:
        ClassScheduleId:
          type: integer
          description: The ID used to retrieve the class schedule for the desired
            class.
          format: int32
        Visits:
          type: array
          description: Contains information about visits.
          items:
            $ref: '#/components/schemas/Visit'
        Clients:
          type: array
          description: Contains information about clients.
          items:
            $ref: '#/components/schemas/Client'
        Location:
          $ref: '#/components/schemas/Location'
        Resource:
          $ref: '#/components/schemas/Resource'
        MaxCapacity:
          type: integer
          description: The maximum number of clients allowed in the class.
          format: int32
        WebCapacity:
          type: integer
          description: The maximum number of clients allowed to sign up online for
            the class.
          format: int32
        TotalBooked:
          type: integer
          description: The total number of clients booked in the class.
          format: int32
        TotalBookedWaitlist:
          type: integer
          description: The total number of booked clients on the waiting list for
            the class.
          format: int32
        WebBooked:
          type: integer
          description: The total number of clients who signed up online for the class.
          format: int32
        SemesterId:
          type: integer
          description: The ID of the semester that the class is a part of, if any.
          format: int32
        IsCanceled:
          type: boolean
          description: "When `true`, indicates that the class has been cancelled.<br\
            \ />\r\nWhen `false`, indicates that the class has not been cancelled."
        Substitute:
          type: boolean
          description: "When `true`, indicates that the class is being taught by a\
            \ substitute teacher.<br />\r\nWhen `false`, indicates that the class\
            \ is being taught by its regular teacher."
        Active:
          type: boolean
          description: "When `true`, indicates that the class is shown to clients\
            \ when in consumer mode.<br />\r\nWhen `false`, indicates that the class\
            \ is not shown to clients when in consumer mode."
        IsWaitlistAvailable:
          type: boolean
          description: "When `true`, indicates that the clients can be placed on a\
            \ waiting list for the class.<br />\r\nWhen `false`, indicates that the\
            \ clients cannot be placed on a waiting list for the class."
        IsEnrolled:
          type: boolean
          description: "When `true`, indicates that the client with the given `ClientId`\
            \ is enrolled in this class.<br />\r\nWhen `false`, indicates that the\
            \ client with the given `ClientId` is not enrolled in this class."
        HideCancel:
          type: boolean
          description: "When `true`, indicates that this class is hidden when cancelled.<br\
            \ />\r\nWhen `false`, indicates that this class is not hidden when cancelled."
        Id:
          type: integer
          description: The unique identifier for the class.
          format: int32
        IsAvailable:
          type: boolean
          description: "When `true`, indicates that the client with the given client\
            \ ID can book this class.<br />\r\nWhen `false`, indicates that the client\
            \ with the given client ID cannot book this class."
        StartDateTime:
          type: string
          description: The time this class is scheduled to start.
          format: date-time
        EndDateTime:
          type: string
          description: The time this class is scheduled to end.
          format: date-time
        LastModifiedDateTime:
          type: string
          description: The last time this class was modified.
          format: date-time
        ClassDescription:
          $ref: '#/components/schemas/ClassDescription'
        Staff:
          $ref: '#/components/schemas/Staff'
        BookingWindow:
          $ref: '#/components/schemas/BookingWindow'
        BookingStatus:
          type: string
          description: Contains the booking’s payment status.
          enum:
          - PaymentRequired
          - BookAndPayLater
          - Free
      description: Represents a single class instance. The class meets at the start
        time, goes until the end time.
    Visit:
      type: object
      properties:
        AppointmentId:
          type: integer
          description: The appointment’s ID.
          format: int32
        AppointmentGenderPreference:
          type: string
          description: The gender of staff member with whom the client prefers to
            book appointments.
          enum:
          - None
          - Female
          - Male
        AppointmentStatus:
          type: string
          description: The status of the appointment.
          enum:
          - None
          - Requested
          - Booked
          - Completed
          - Confirmed
          - Arrived
          - NoShow
          - Cancelled
          - LateCancelled
        ClassId:
          type: integer
          description: The class ID that was used to retrieve the visits.
          format: int32
        ClientId:
          type: string
          description: The ID of the client associated with the visit.
        StartDateTime:
          type: string
          description: The time this class is scheduled to start.
          format: date-time
        EndDateTime:
          type: string
          description: The date and time the visit ends. The Public API returns UTC
            dates and times. For example, a class that occurs on June 25th, 2018 at
            2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours
            behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.
          format: date-time
        Id:
          type: integer
          description: The ID of the visit.
          format: int64
        LastModifiedDateTime:
          type: string
          description: When included in the request, only records modified on or after
            the specified `LastModifiedDate` are included in the response. The Public
            API returns UTC dates and times. For example, a class that occurs on June
            25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST
            is five hours behind UTC. Date time pairs always return in the format
            YYYY-MM-DDTHH:mm:ssZ.
          format: date-time
        LateCancelled:
          type: boolean
          description: "When `true`, indicates that the class has been `LateCancelled`.<br\
            \ />\r\nWhen `false`, indicates that the class has not been `LateCancelled`."
        SiteId:
          type: integer
          description: The ID of the site the visit occurred
          format: int32
        LocationId:
          type: integer
          description: The ID of the location where the visit took place or is to
            take place.
          format: int32
        MakeUp:
          type: boolean
          description: "When `true`, the client can make up this session and a session\
            \ is not deducted from the pricing option that was used to sign the client\
            \ into the enrollment. When the client has the make-up session, a session\
            \ is automatically removed from a pricing option that matches the service\
            \ category of the enrollment and is within the same date range of the\
            \ missed session.<br />\r\nWhen `false`, the client cannot make up this\
            \ session. See [Enrollments: Make-ups](https://support.mindbodyonline.com/s/article/203259433-Enrollments-Make-ups?language=en_US)\
            \ for more information."
        Name:
          type: string
          description: The name of the class.
        ServiceId:
          type: integer
          description: The ID of the client's pricing option applied to the class
            visit.
          format: int64
        ServiceName:
          type: string
          description: The name of the pricing option applied to the class visit.
        ProductId:
          type: integer
          description: The business' ID of the type of pricing option used to pay
            for the class visit.
          format: int64
        SignedIn:
          type: boolean
          description: "When `true`, indicates that the client has been signed in.<br\
            \ />\r\nWhen `false`, indicates that the client has not been signed in."
        StaffId:
          type: integer
          description: The ID of the staff member who is teaching the class.
          format: int64
        WebSignup:
          type: boolean
          description: "When `true`, indicates that the client signed up online.<br\
            \ />\r\nWhen `false`, indicates that the client was signed up by a staff\
            \ member."
        Action:
          type: string
          description: The action taken.
          enum:
          - None
          - Added
          - Updated
          - Failed
          - Removed
      description: Represents a specific visit to a class
    Client:
      type: object
      properties:
        AppointmentGenderPreference:
          type: string
          description: The gender of staff member with whom the client prefers to
            book appointments.
          enum:
          - None
          - Female
          - Male
        BirthDate:
          type: string
          description: The client’s date of birth.
          format: date-time
        Country:
          type: string
          description: The client’s country.
        CreationDate:
          type: string
          description: The date the client’s profile was created and added to the
            business, either by the client from the online store, or by a staff member.
            This value always returns in the format `yyyy-mm-ddThh:mm:ss:ms`.
          format: date-time
        CustomClientFields:
          type: array
          description: Contains information about the custom client fields assigned
            to the client.
          items:
            $ref: '#/components/schemas/CustomClientFieldValue'
        ClientCreditCard:
          $ref: '#/components/schemas/ClientCreditCard'
        ClientIndexes:
          type: array
          description: Contains the IDs of the client’s assigned ClientIndexes and
            ClientIndexValues.
          items:
            $ref: '#/components/schemas/AssignedClientIndex'
        ClientRelationships:
          type: array
          description: Contains information about the relationship between two clients.
          items:
            $ref: '#/components/schemas/ClientRelationship'
        FirstAppointmentDate:
          type: string
          description: The date of the client’s first booked appointment at the business.
          format: date-time
        FirstName:
          type: string
          description: The client’s first name.
        Id:
          type: string
          description: The client’s ID, as configured by the business owner. This
            is the client’s barcode ID if the business owner assigns barcodes to clients.
            This ID is used throughout the Public API for client-related Public API
            calls. When used in a POST `UpdateClient` request, the `Id` is used to
            identify the client for the update.
        IsCompany:
          type: boolean
          description: "When `true`, indicates that the client should be marked as\
            \ a company at the business.<br />\r\nWhen `false`, indicates the client\
            \ is an individual and does not represent a company."
        IsProspect:
          type: boolean
          description: "This value is set only if the business owner allows individuals\
            \ to be prospects.<br />\r\nWhen `true`, indicates that the client should\
            \ be marked as a prospect for the business.<br />\r\nWhen `false`, indicates\
            \ that the client should not be marked as a prospect for the business."
        LastName:
          type: string
          description: The client’s last name.
        Liability:
          $ref: '#/components/schemas/Liability'
        LiabilityRelease:
          type: boolean
          description: "Passing `true` sets the client’s liability information as\
            \ follows:\r\n* `IsReleased` is set to `true`.\r\n* `AgreementDate` is\
            \ set to the time zone of the business when the call was processed.\r\n\
            * `ReleasedBy` is set to `null` if the call is made by the client, `0`\
            \ if the call was made by the business owner, or to a specific staff member’\
            s ID if a staff member made the call.\r\nPassing `false` sets the client’\
            s liability information as follows:\r\n* `IsReleased` is set to `false`.\r\
            \n* `AgreementDate` is set to `null`.\r\n* `ReleasedBy` is set to `null`."
        MembershipIcon:
          type: integer
          description: The ID of the [membership icon](https://support.mindbodyonline.com/s/article/203259703-Membership-Setup-screen?language=en_US)
            displayed next to the client’s name, if the client has a membership on
            their account.
          format: int32
        MobileProvider:
          type: integer
          description: The client’s mobile provider.
          format: int32
        Notes:
          type: string
          description: Any notes entered on the client’s account by staff members.
            This value should never be shown to clients unless the business owner
            has a specific reason for showing them.
        State:
          type: string
          description: The client’s state.
        UniqueId:
          type: integer
          description: The client’s system-generated ID at the business. This value
            cannot be changed by business owners and is always unique across all clients
            at the business. This ID is not widely used in the Public API, but can
            be used by your application to uniquely identify clients.
          format: int64
        LastModifiedDateTime:
          type: string
          description: The UTC date and time when the client’s information was last
            modified.
          format: date-time
        RedAlert:
          type: string
          description: Contains any red alert information entered by the business
            owner for the client.
        YellowAlert:
          type: string
          description: Contains any yellow alert information entered by the business
            owner for the client.
        MiddleName:
          type: string
          description: The client’s middle name.
        ProspectStage:
          $ref: '#/components/schemas/ProspectStage'
        Email:
          type: string
          description: The client’s email address.
        MobilePhone:
          type: string
          description: The client’s mobile phone number.
        HomePhone:
          type: string
          description: The client’s home phone number.
        WorkPhone:
          type: string
          description: The client’s work phone number.
        AccountBalance:
          type: number
          description: The client’s current [account balance](https://mindbody-online-support.force.com/support/s/article/203262013-Adding-account-payments-video-tutorial?language=en_US).
          format: double
        AddressLine1:
          type: string
          description: The first line of the client’s street address.
        AddressLine2:
          type: string
          description: The second line of the client’s street address, if needed.
        City:
          type: string
          description: The client’s city.
        PostalCode:
          type: string
          description: The client’s postal code.
        WorkExtension:
          type: string
          description: The client’s work phone extension number.
        ReferredBy:
          type: string
          description: Specifies how the client was referred to the business. You
            can get a list of possible strings using the `GetClientReferralTypes`
            endpoint.
        PhotoUrl:
          type: string
          description: The URL of the client’s photo for the client profile.
        EmergencyContactInfoName:
          type: string
          description: The name of the client’s emergency contact.
        EmergencyContactInfoEmail:
          type: string
          description: The email address of the client’s emergency contact.
        EmergencyContactInfoPhone:
          type: string
          description: The phone number of the client’s emergency contact.
        EmergencyContactInfoRelationship:
          type: string
          description: The client’s relationship with the emergency contact.
        Gender:
          type: string
          description: The gender of the client.
        LastFormulaNotes:
          type: string
          description: The last [formula note](https://support.mindbodyonline.com/s/article/203259903-Appointments-Formula-notes?language=en_US)
            entered for the client.
        Active:
          type: boolean
          description: "When `true`, indicates that the client’s profile is marked\
            \ as active on the site.<br />\r\nWhen `false`, the client’s profile is\
            \ inactive."
        SalesReps:
          type: array
          description: A list of sales representatives.
          items:
            $ref: '#/components/schemas/SalesRep'
        Status:
          type: string
          description: "The status of the client in the business. Possible values\
            \ are:\r\n* Declined\r\n* Non-Member\r\n* Active\r\n* Expired\r\n* Suspended\r\
            \n* Terminated"
        Action:
          type: string
          description: The action taken.
          enum:
          - None
          - Added
          - Updated
          - Failed
          - Removed
        SendAccountEmails:
          type: boolean
          description: "When `true`, indicates that the client has opted to receive\
            \ general account notifications by email. This property is editable. \r\
            \n<br />Default: **false**"
        SendAccountTexts:
          type: boolean
          description: When `true`, indicates that the client has opted to receive
            general account notifications by text message. This parameter cannot be
            updated by developers. If included in a request, it is ignored.
        SendPromotionalEmails:
          type: boolean
          description: "When `true`, indicates that the client has opted to receive\
            \ promotional notifications by email. This property is editable. \r\n\
            <br />Default: **false**"
        SendPromotionalTexts:
          type: boolean
          description: When `true`, indicates that the client has opted to receive
            promotional notifications by text message. This parameter cannot be updated
            by developers. If included in a request, it is ignored.
        SendScheduleEmails:
          type: boolean
          description: "When `true`, indicates that the client has opted to receive\
            \ schedule notifications by email. This property is editable. \r\n<br\
            \ />Default: **false**"
        SendScheduleTexts:
          type: boolean
          description: When `true`, indicates that the client has opted to receive
            schedule notifications by text message. This parameter cannot be updated
            by developers. If included in a request, it is ignored.
      description: A Client
    ClassDescription:
      type: object
      properties:
        Active:
          type: boolean
          description: "When `true`, indicates that the business can assign this class\
            \ description to new class schedules.<br />\r\nWhen `false`, indicates\
            \ that the business cannot assign this class description to new class\
            \ schedules."
        Description:
          type: string
          description: The long version of the class description.
        Id:
          type: integer
          description: The class description's ID.
          format: int32
        ImageURL:
          type: string
          description: The class description's image URL, if any. If it does not exist,
            nothing is returned.
        LastUpdated:
          type: string
          description: The date this class description was last modified.
          format: date-time
        Level:
          $ref: '#/components/schemas/Level'
        Name:
          type: string
          description: The name of this class description.
        Notes:
          type: string
          description: Any notes about the class description.
        Prereq:
          type: string
          description: Any prerequisites for the class.
        Program:
          $ref: '#/components/schemas/Program'
        SessionType:
          $ref: '#/components/schemas/SessionType'
        Category:
          type: string
          description: The category of this class description.
        CategoryId:
          type: integer
          description: The category ID of this class description.
          format: int32
        Subcategory:
          type: string
          description: The subcategory of this class description.
        SubcategoryId:
          type: integer
          description: The subcategory ID of this class description.
          format: int32
      description: Represents a class definition. The class meets at the start time,
        goes until the end time.
    BookingWindow:
      type: object
      properties:
        StartDateTime:
          type: string
          description: Date and time that the booking window opens; that is, the first
            day of sales.
          format: date-time
        EndDateTime:
          type: string
          description: Date and time that the booking window closes; that is, the
            last day of sales.
          format: date-time
        DailyStartTime:
          type: string
          description: The time that the booking window opens; that is, the time that
            the store opens.
          format: date-time
        DailyEndTime:
          type: string
          description: The time that the booking window closes; that is, the time
            that the store closes.
          format: date-time
      description: The booking window for registration
    CustomClientFieldValue:
      type: object
      properties:
        Value:
          type: string
          description: The value of a specific custom field for a client.
        Id:
          type: integer
          description: The ID of the custom client field.
          format: int32
        DataType:
          type: string
          description: The data type of the field.
        Name:
          type: string
          description: The name of the field.
      description: The value of a custom client field
    ClientCreditCard:
      type: object
      properties:
        Address:
          type: string
          description: The billing address for the credit card.
        CardHolder:
          type: string
          description: The name of the card holder.
        CardNumber:
          type: string
          description: The credit card number.
        CardType:
          type: string
          description: The type of credit card, for example Visa or MasterCard.
        City:
          type: string
          description: The city in which the billing address is located.
        ExpMonth:
          type: string
          description: The month in which the credit card expires.
        ExpYear:
          type: string
          description: The year in which the credit card expires.
        LastFour:
          type: string
          description: The last four digits of the credit card number.
        PostalCode:
          type: string
          description: The postal code where the billing address is located.
        State:
          type: string
          description: The state that the billing address is located in.
      description: A client credit card.
    AssignedClientIndex:
      type: object
      properties:
        Id:
          type: integer
          description: The index ID assigned to the client.
          format: int32
        ValueId:
          type: integer
          description: The index’s value ID.
          format: int32
      description: Represents a client index value assigned to a client
    ClientRelationship:
      type: object
      properties:
        RelatedClientId:
          type: string
          description: The RSSID of the related client.
        Relationship:
          $ref: '#/components/schemas/Relationship'
        RelationshipName:
          type: string
          description: The name of the relationship of the related client.
        Delete:
          type: boolean
          description: When true, this relationship is removed from the associated
            clients.
      description: A relation between two clients.
    Liability:
      type: object
      properties:
        AgreementDate:
          type: string
          description: The date and time at which the client agreed to the liability
            waiver for the business.
          format: date-time
        IsReleased:
          type: boolean
          description: "The client’s liability release status.<br />\r\nWhen `true`,\
            \ indicates that the client has agreed to the liability release for the\
            \ business.<br />\r\nWhen `false`, indicates that the client has not agreed\
            \ to the liability release for the business."
        ReleasedBy:
          type: integer
          description: An ID indicating who released liability for the client. If
            the client agreed to the liability waiver by signing into an account online,
            this value is `null`. If a staff member marked the waiver as signed on
            behalf of the client, it is the staff member’s ID. `0` indicates that
            the business owner marked the liability waiver as signed on behalf of
            the client.
          format: int64
    ProspectStage:
      type: object
      properties:
        Active:
          type: boolean
          description: "When `true`, indicates that the client is a prospect at the\
            \ business and has not yet purchased any of the business pricing options.\r\
            \nWhen `false`, indicates that the client has already purchased at least\
            \ one pricing option from the business."
        Description:
          type: string
          description: A description of the prospect stage.
        Id:
          type: integer
          description: The ID of the prospect stage assigned to the client.
          format: int32
    SalesRep:
      type: object
      properties:
        FirstName:
          type: string
          description: The first name of the sales representative.
        Id:
          type: integer
          description: The staff ID of the sales representative.
          format: int64
        LastName:
          type: string
          description: The last name of the sales representative.
        SalesRepNumber:
          type: integer
          description: This value is the number that identifies the type of sales
            representative assigned to this client. One to six types of sales representatives
            can be assigned to a client at any given time, depending on site settings.
          format: int32
        SalesRepNumbers:
          type: array
          description: A list of the different types of sales representative functions
            assigned to this staff member.
          items:
            type: integer
            format: int32
    Level:
      type: object
      properties:
        Id:
          type: integer
          description: The level's ID.
          format: int32
        Name:
          type: string
          description: The level's name.
        Description:
          type: string
          description: The level's description.
      description: A session level.
    Relationship:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the relationship.
          format: int32
        RelationshipName1:
          type: string
          description: The name of the first relationship.
        RelationshipName2:
          type: string
          description: The name of the second relationship.
      description: Jim is a RelationshipName1 of John. John is a RelationshipName2
        of Jim.
    GetClassDescriptionsRequest:
      type: object
      properties:
        ClassDescriptionId:
          type: integer
          description: Filters to the single result with the given ID.
          format: int32
        ProgramIds:
          type: array
          description: Filters results to class descriptions belonging to the given
            programs.
          items:
            type: integer
            format: int32
        StartClassDateTime:
          type: string
          description: Filters the results to class descriptions for scheduled classes
            that happen on or after the given date and time.
          format: date-time
        EndClassDateTime:
          type: string
          description: Filters the results to class descriptions for scheduled classes
            that happen before the given date and time.
          format: date-time
        StaffId:
          type: integer
          description: Filters results to class descriptions for scheduled classes
            taught by the given staff member.
          format: int64
        LocationId:
          type: integer
          description: Filters results to classes descriptions for schedule classes
            as the given location.
          format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClassDescriptionsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        ClassDescriptions:
          type: array
          description: Contains information about the class descriptions.
          items:
            $ref: '#/components/schemas/ClassDescription'
    GetClassVisitsRequest:
      type: object
      properties:
        ClassID:
          type: integer
          description: The class ID.
          format: int64
        LastModifiedDate:
          type: string
          description: When included in the request, only records modified on or after
            the `LastModifiedDate` specified are included in the response.
          format: date-time
    GetClassVisitsResponse:
      type: object
      properties:
        Class:
          $ref: '#/components/schemas/Class'
    RemoveClientFromClassRequest:
      required:
      - ClassId
      - ClientId
      type: object
      properties:
        ClientId:
          type: string
          description: The RSSID of the client to remove from the specified class.
        ClassId:
          type: integer
          description: The ID of the class that you want to remove the client from.
          format: int32
        Test:
          type: boolean
          description: "When `true`, the request ensures that its parameters are valid\
            \ without affecting real data.<br />\r\nWhen `false`, the request performs\
            \ as intended and may affect live client data.<br />\r\nDefault: **false**"
        SendEmail:
          type: boolean
          description: "When `true`, indicates that the client should be sent an email.\
            \ Depending on the site and client settings, an email may or may not be\
            \ sent.<br />\r\nDefault: **false**"
        LateCancel:
          type: boolean
          description: "When `true`, indicates that the client is to be late cancelled\
            \ from the class.<br />\r\nWhen `false`, indicates that the client is\
            \ to be early cancelled from the class.<br />\r\nDefault: **false**"
    RemoveClientFromClassResponse:
      type: object
      properties:
        Class:
          $ref: '#/components/schemas/Class'
    AddClientToClassRequest:
      required:
      - ClassId
      - ClientId
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client who is being booked into the class
        ClassId:
          type: integer
          description: The ID of the class into which the client is being booked
          format: int32
        Test:
          type: boolean
          description: "When `true`, indicates that input information is validated,\
            \ but not committed.<br />\r\nWhen `false`, the information is committed\
            \ and the database is affected.<br />\r\nDefault: **false**"
        RequirePayment:
          type: boolean
          description: "When `true`, the client must have an active, usable pricing\
            \ option on their account.<br />\r\nWhen `false` or omitted, an active\
            \ pricing option is not required to complete the client’s booking."
        Waitlist:
          type: boolean
          description: "When `true`, indicates that the client should be added to\
            \ a specific class waiting list.<br />\r\nWhen `false`, the client should\
            \ not be added to the waiting list."
        SendEmail:
          type: boolean
          description: "When `true`, the subscriber’s configured Booking Confirmation\
            \ automatic email is sent to the client. Note that an email is sent only\
            \ if the client has an email address and automatic emails have been set\
            \ up.<br />\r\nWhen `false`, indicates that the client does not receive\
            \ emails.<br />\r\nDefault: **false**"
        WaitlistEntryId:
          type: integer
          description: The ID of the waiting list entry from which you are moving
            a client into a class.
          format: int32
        ClientServiceId:
          type: integer
          description: The ID of the pricing option on the client’s account that you
            want to use to pay for this booking, if payment is required at the time
            of the update.
          format: int32
        CrossRegionalBooking:
          type: boolean
          description: When `true`, cross regional series are checked and used if
            applicable.
        CrossRegionalBookingClientServiceSiteId:
          type: integer
          description: If the request is cross regional, use a purchased pricing option
            from this specified site. If omitted, an attempt is made to use an applicable
            pricing option from the local site.
          format: int32
    AddClientToClassResponse:
      type: object
      properties:
        Visit:
          $ref: '#/components/schemas/AddClientToClassVisit'
    AddClientToClassVisit:
      type: object
      properties:
        AppointmentId:
          type: integer
          description: The appointment’s ID.
          format: int32
        AppointmentGenderPreference:
          type: string
          description: The gender of staff member with whom the client prefers to
            book appointments.
          enum:
          - None
          - Female
          - Male
        AppointmentStatus:
          type: string
          description: The status of the appointment.
          enum:
          - None
          - Requested
          - Booked
          - Completed
          - Confirmed
          - Arrived
          - NoShow
          - Cancelled
          - LateCancelled
        ClassId:
          type: integer
          description: The class ID that was used to retrieve the visits.
          format: int32
        ClientId:
          type: string
          description: The ID of the client associated with the visit.
        StartDateTime:
          type: string
          description: The time this class is scheduled to start.
          format: date-time
        EndDateTime:
          type: string
          description: The date and time the visit ends. The Public API returns UTC
            dates and times. For example, a class that occurs on June 25th, 2018 at
            2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours
            behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.
          format: date-time
        Id:
          type: integer
          description: The ID of the visit.
          format: int64
        LastModifiedDateTime:
          type: string
          description: When included in the request, only records modified on or after
            the specified `LastModifiedDate` are included in the response. The Public
            API returns UTC dates and times. For example, a class that occurs on June
            25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST
            is five hours behind UTC. Date time pairs always return in the format
            YYYY-MM-DDTHH:mm:ssZ.
          format: date-time
        LateCancelled:
          type: boolean
          description: "When `true`, indicates that the class has been `LateCancelled`.<br\
            \ />\r\nWhen `false`, indicates that the class has not been `LateCancelled`."
        LocationId:
          type: integer
          description: The ID of the location where the visit took place or is to
            take place.
          format: int32
        MakeUp:
          type: boolean
          description: "When `true`, the client can make up this session and a session\
            \ is not deducted from the pricing option that was used to sign the client\
            \ into the enrollment. When the client has the make-up session, a session\
            \ is automatically removed from a pricing option that matches the service\
            \ category of the enrollment and is within the same date range of the\
            \ missed session.<br />\r\nWhen `false`, the client cannot make up this\
            \ session. See [Enrollments: Make-ups](https://support.mindbodyonline.com/s/article/203259433-Enrollments-Make-ups?language=en_US)\
            \ for more information."
        Name:
          type: string
          description: The name of the class.
        ServiceId:
          type: integer
          description: The ID of the client's pricing option applied to the class
            visit.
          format: int64
        ServiceName:
          type: string
          description: The name of the pricing option applied to the class visit.
        ProductId:
          type: integer
          description: The business' ID of the type of pricing option used to pay
            for the class visit.
          format: int64
        SignedIn:
          type: boolean
          description: "When `true`, indicates that the client has been signed in.<br\
            \ />\r\nWhen `false`, indicates that the client has not been signed in."
        StaffId:
          type: integer
          description: The ID of the staff member who is teaching the class.
          format: int64
        WebSignup:
          type: boolean
          description: "When `true`, indicates that the client signed up online.<br\
            \ />\r\nWhen `false`, indicates that the client was signed up by a staff\
            \ member."
        Action:
          type: string
          description: The action taken.
          enum:
          - None
          - Added
          - Updated
          - Failed
          - Removed
        CrossRegionalBookingPerformed:
          type: boolean
          description: When `true`, indicates that the client is paying for the visit
            using a pricing option from one of their associated cross-regional profiles.
        SiteId:
          type: integer
          description: The ID of the business from which cross-regional payment is
            applied.
          format: int32
        WaitlistEntryId:
          type: integer
          description: "When this value is not null, it indicates that the client\
            \ is on the waiting list for the requested class. The only additional\
            \ fields that are populated when this is not null are:\r\n* ClassId\r\n\
            * ClientId\r\n\r\nYou can call GET WaitlistEntries using `WaitlistEntryId`\
            \ to obtain more data about this waiting list entry."
          format: int32
    GetClassSchedulesRequest:
      type: object
      properties:
        ClassScheduleIds:
          type: array
          description: "The class schedule IDs.\r\n<br />Default: **all**"
          items:
            type: integer
            format: int32
        EndDate:
          type: string
          description: "The end date of the range. Return any active enrollments that\
            \ occur on or before this day.\r\n<br />Default: **StartDate**"
          format: date-time
        LocationIds:
          type: array
          description: "The location IDs. \r\n<br />Default: **all**"
          items:
            type: integer
            format: int32
        ProgramIds:
          type: array
          description: "The program IDs. \r\n<br />Default: **all**"
          items:
            type: integer
            format: int32
        SessionTypeIds:
          type: array
          description: "The session type IDs. \r\n<br />Default: **all**"
          items:
            type: integer
            format: int32
        StaffIds:
          type: array
          description: "The staff IDs. \r\n<br />Default: **all**"
          items:
            type: integer
            format: int64
        StartDate:
          type: string
          description: "The start date of the range. Return any active enrollments\
            \ that occur on or after this day.\r\n<br />Default: **today’s date**"
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClassSchedulesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        ClassSchedules:
          type: array
          description: Contains information about the class schedules.
          items:
            $ref: '#/components/schemas/ClassSchedule'
    ClassSchedule:
      type: object
      properties:
        Classes:
          type: array
          description: Contains information about classes.
          items:
            $ref: '#/components/schemas/Class'
        Clients:
          type: array
          description: Contains information about clients.
          items:
            $ref: '#/components/schemas/Client'
        Course:
          $ref: '#/components/schemas/Course'
        SemesterId:
          type: integer
          description: The semester ID for the enrollment (if any).
          format: int32
        IsAvailable:
          type: boolean
          description: "When `true`, indicates that the enrollment shows in consumer\
            \ mode, has not started yet, and there is room in each class of the enrollment.<br\
            \ />\r\nWhen `false`, indicates that either the enrollment does not show\
            \ in consumer mode, has already started, or there is no room in some classes\
            \ of the enrollment."
        Id:
          type: integer
          description: The unique ID of the class schedule.
          format: int32
        ClassDescription:
          $ref: '#/components/schemas/ClassDescription'
        DaySunday:
          type: boolean
          description: When `true`, indicates that this schedule occurs on Sundays.
        DayMonday:
          type: boolean
          description: When `true`, indicates that this schedule occurs on Mondays.
        DayTuesday:
          type: boolean
          description: When `true`, indicates that this schedule occurs on Tuesdays.
        DayWednesday:
          type: boolean
          description: When `true`, indicates that this schedule occurs on Wednesdays.
        DayThursday:
          type: boolean
          description: When `true`, indicates that this schedule occurs on Thursdays.
        DayFriday:
          type: boolean
          description: When `true`, indicates that this schedule occurs on Fridays.
        DaySaturday:
          type: boolean
          description: When `true`, indicates that this schedule occurs on Saturdays.
        AllowOpenEnrollment:
          type: boolean
          description: When `true`, indicates that the enrollment allows booking after
            the enrollment has started.
        AllowDateForwardEnrollment:
          type: boolean
          description: When `true`, indicates that this the enrollment shows in consumer
            mode, the enrollment has not started yet, and there is room in each class
            of the enrollment.
        StartTime:
          type: string
          description: The time this class schedule starts.
          format: date-time
        EndTime:
          type: string
          description: The time this class schedule ends.
          format: date-time
        StartDate:
          type: string
          description: The date this class schedule starts.
          format: date-time
        EndDate:
          type: string
          description: The date this class schedule ends.
          format: date-time
        Staff:
          $ref: '#/components/schemas/Staff'
        Location:
          $ref: '#/components/schemas/Location'
      description: Represents a single class instance. The class meets at the start
        time, goes until the end time.
    Course:
      type: object
      properties:
        Id:
          type: integer
          description: The course ID.
          format: int64
        Name:
          type: string
          description: The course name.
        Description:
          type: string
          description: A description of the course.
        Notes:
          type: string
          description: Any notes that have been written about the course.
        StartDate:
          type: string
          description: Date and time that the course starts.
          format: date-time
        EndDate:
          type: string
          description: Date and time that the course ends.
          format: date-time
        Location:
          $ref: '#/components/schemas/Location'
        Organizer:
          $ref: '#/components/schemas/Staff'
        Program:
          $ref: '#/components/schemas/Program'
        ImageUrl:
          type: string
          description: The URL of the image associated with this course, if one exists.
      description: A course.
    GetWaitlistEntriesRequest:
      type: object
      properties:
        ClassIds:
          type: array
          description: "The requested class IDs. If a class ID is present, the request\
            \ automatically disregards any class schedule IDs in the request. <br\
            \ />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or\
            \ `ClassIds` is required; the others become optional.<br />\r\nDefault:\
            \ **all ClassIds**"
          items:
            type: integer
            format: int32
        ClassScheduleIds:
          type: array
          description: "The requested class schedule IDs. If a class ID is present,\
            \ the request automatically disregards any class schedule IDs in the request.<br\
            \ />\r\nEither `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or\
            \ `ClassIds` is required; the others become optional.<br />\r\nDefault:\
            \ **all ClassScheduleIds**"
          items:
            type: integer
            format: int32
        ClientIds:
          type: array
          description: "The requested client IDs.<br />\r\nEither `ClassScheduleIds`,\
            \ `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others\
            \ become optional.<br />\r\nDefault: **all ClientIds**"
          items:
            type: string
        HidePastEntries:
          type: boolean
          description: "When `true`, indicates that past waiting list entries are\
            \ hidden from clients.<br />\r\nWhen `false`, indicates that past entries\
            \ are not hidden from clients.<br />\r\nDefault: **false**"
        WaitlistEntryIds:
          type: array
          description: "The requested waiting list entry IDs.<br />\r\nEither `ClassScheduleIds`,\
            \ `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others\
            \ become optional.<br />\r\nDefault: **all WaitlistEntryIds**"
          items:
            type: integer
            format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetWaitlistEntriesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        WaitlistEntries:
          type: array
          description: Contains information about the waiting list entries.
          items:
            $ref: '#/components/schemas/WaitlistEntry'
    WaitlistEntry:
      type: object
      properties:
        ClassDate:
          type: string
          description: The date of the class or enrollment.
          format: date-time
        ClassId:
          type: integer
          description: The ID of the class or enrollment.
          format: int64
        ClassSchedule:
          $ref: '#/components/schemas/ClassSchedule'
        Client:
          $ref: '#/components/schemas/Client'
        EnrollmentDateForward:
          type: string
          description: If the waiting list entry was created for an enrollment, this
            is the date on or after which the client can be added to the enrollment
            from the waitlist.
          format: date-time
        Id:
          type: integer
          description: The ID of the waiting list entry.
          format: int32
        RequestDateTime:
          type: string
          description: The date and time that the request to be on the waiting list
            was made.
          format: date-time
        VisitRefNo:
          type: integer
          description: The ID of the visit that is associated with the waiting list
            entry.
          format: int32
        Web:
          type: boolean
          description: "If `true`, the entry on the waiting list was requested online.<br\
            \ />\r\nIf `false`, the entry on the waiting list was requested off-line,\
            \ for example in person or by phone."
    RemoveFromWaitlistRequest:
      required:
      - WaitlistEntryIds
      type: object
      properties:
        WaitlistEntryIds:
          type: array
          description: A list of waiting list IDs to remove from waiting lists.
          items:
            type: integer
            format: int32
    RemoveFromWaitlistResponse:
      type: object
    SubstituteClassTeacherRequest:
      required:
      - ClassId
      - StaffId
      type: object
      properties:
        ClassId:
          type: integer
          description: The ID of the class to which a substitute teacher needs to
            be assigned.
          format: int32
        StaffId:
          type: integer
          description: The staff ID of the teacher to substitute.
          format: int64
        OverrideConflicts:
          type: boolean
          description: When `true`, overrides any conflicts in the schedule.
        SendClientEmail:
          type: boolean
          description: When `true`, sends the client an automatic email about the
            substitution, if the client has opted to receive email.
        SendOriginalTeacherEmail:
          type: boolean
          description: When `true`, sends the originally scheduled teacher an automatic
            email about the substitution.
        SendSubstituteTeacherEmail:
          type: boolean
          description: When `true`, sends the substituted teacher an automatic email
            about the substitution.
    SubstituteClassTeacherResponse:
      type: object
      properties:
        Class:
          $ref: '#/components/schemas/SubstituteTeacherClass'
    SubstituteTeacherClass:
      type: object
      properties:
        ClassScheduleId:
          type: integer
          description: The class schedule ID of the requested class.
          format: int32
        Location:
          $ref: '#/components/schemas/Location'
        MaxCapacity:
          type: integer
          description: The total number of bookings allowed in the class.
          format: int32
        WebCapacity:
          type: integer
          description: The total number of online bookings allowed in the class.
          format: int32
        TotalBooked:
          type: integer
          description: The total number of clients who are booked into the class prior
            to this call being made.
          format: int32
        TotalBookedWaitlist:
          type: integer
          description: The total number of booked clients who are on the waiting list
            for the class prior to this call being made.
          format: int32
        WebBooked:
          type: integer
          description: The total number of bookings in the class made by online users,
            prior to this call being made. This property is the current number of
            bookings counted toward the `WebCapacity` limit.
          format: int32
        SemesterId:
          type: integer
          description: Identifies the semester assigned to this class.
          format: int32
        IsCanceled:
          type: boolean
          description: "When `true`, indicates that the class has been canceled.<br\
            \ />\r\nWhen `false`, indicates that the class has not been canceled and\
            \ may still be bookable."
        Substitute:
          type: boolean
          description: When `true`, indicates that the class is being taught by a
            substitute teacher.
        Active:
          type: boolean
          description: When `true`, indicates that the class is being shown to clients
            in consumer mode.
        IsWaitlistAvailable:
          type: boolean
          description: "When `true`, indicates that the class has a waiting list and\
            \ there is space available on the waiting list for another client.<br\
            \ />\r\nWhen `false`, indicates either that the class does not have a\
            \ waiting list or there is no space available on the class waiting list."
        HideCancel:
          type: boolean
          description: "When `true`, indicates that this class is should not be shown\
            \ to clients when `IsCancelled` is `true`.<br />\r\nWhen `false`, indicates\
            \ that this class is should be shown to clients when `IsCancelled` is\
            \ `true`.<br />\r\nThis property can be ignored when the `IsCancelled`\
            \ property is `false`."
        Id:
          type: integer
          description: The unique identifier of the class.
          format: int32
        IsAvailable:
          type: boolean
          description: "When `true`, indicates that the class can be booked.<br />\r\
            \nWhen `false`, that the class cannot be booked at this time."
        StartDateTime:
          type: string
          description: The date and time that this class is scheduled to start.
          format: date-time
        EndDateTime:
          type: string
          description: The date and time when this class is scheduled to end.
          format: date-time
        LastModifiedDateTime:
          type: string
          description: The last time the class was modified.
          format: date-time
        ClassDescription:
          $ref: '#/components/schemas/ClassDescription'
        Staff:
          $ref: '#/components/schemas/Staff'
      description: Represents a single class instance. Used in SubstituteClassTeacher
        endpoint.
    GetClientsRequest:
      type: object
      properties:
        ClientIDs:
          type: array
          description: "The requested client IDs.\r\nDefault: **all IDs** that the\
            \ authenticated user’s access level allows."
          items:
            type: string
        SearchText:
          type: string
          description: Text to use in the search. Can include FirstName, LastName,
            and Email. Note that user credentials must be provided.
        IsProspect:
          type: boolean
          description: "When `true`, filters the results to include only those clients\
            \ marked as prospects for the business.<br />\r\nWhen `false`, indicates\
            \ that only those clients who are not marked prospects should be returned."
        LastModifiedDate:
          type: string
          description: Filters the results to include only the clients that have been
            modified on or after this date.
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClientsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Clients:
          type: array
          description: The requested clients.
          items:
            $ref: '#/components/schemas/Client'
    GetClientFormulaNotesRequest:
      type: object
      properties:
        ClientId:
          type: string
          description: The client ID of the client whose formula notes are being requested.
        AppointmentId:
          type: integer
          description: The appointment ID of the appointment that the formula notes
            are related to.
          format: int64
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClientFormulaNotesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        FormulaNotes:
          type: array
          description: Contains details about the client’s formula.
          items:
            $ref: '#/components/schemas/FormulaNote'
    FormulaNote:
      type: object
      properties:
        Id:
          type: integer
          description: ID of the formula note.
          format: int64
        ClientId:
          type: string
          description: Client ID of the formula note.
        Note:
          type: string
          description: The text of the formula note.
        EntryDateTime:
          type: string
          description: Date and time that the formula note was entered.
          format: date-time
        AppointmentId:
          type: integer
          description: The appointment ID associated with the formula note.
          format: int64
      description: A formula note.
    UploadClientDocumentRequest:
      required:
      - ClientId
      - File
      type: object
      properties:
        ClientId:
          type: string
          description: The RSSID of the client for whom the document is to be uploaded.
        File:
          $ref: '#/components/schemas/ClientDocument'
    ClientDocument:
      required:
      - Buffer
      - FileName
      - MediaType
      type: object
      properties:
        FileName:
          type: string
          description: The name of the file to be used on the client’s documents page
            when it is uploaded.
        MediaType:
          type: string
          description: "The type of file or file extension. Possible values are:\r\
            \n* pdf\r\n* jpg\r\n* jpeg\r\n* tif\r\n* tiff\r\n* png\r\n* doc\r\n* docx\r\
            \n* bmp\r\n* txt\r\n* rtf\r\n* xlsx\r\n* xls\r\n* gif\r\n* zip\r\n* ppt\r\
            \n* pptx\r\n* mov"
        Buffer:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: A Base64-encoded string representation of the file’s byte array.
          format: byte
    UploadClientDocumentResponse:
      type: object
      properties:
        FileSize:
          type: integer
          description: The size of the uploaded file.
          format: int64
        FileName:
          type: string
          description: The name of the uploaded file.
    UploadClientPhotoRequest:
      required:
      - Bytes
      - ClientId
      type: object
      properties:
        Bytes:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: A Base64-encoded string representation of the image’s byte
            array.
          format: byte
        ClientId:
          type: string
          description: The RSSID of the client for whom the photo is to be uploaded.
    UploadClientPhotoResponse:
      type: object
      properties:
        ClientId:
          type: string
          description: The RSSID of the client for whom the photo was uploaded.
        PhotoUrl:
          type: string
          description: The URL of the uploaded photo.
    GetClientContractsRequest:
      required:
      - ClientId
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client.
        CrossRegionalLookup:
          type: boolean
          description: "When `true`, indicates that the requesting client’s cross\
            \ regional contracts are returned, if any.<br />\r\nWhen `false`, indicates\
            \ that cross regional contracts are not returned."
        ClientAssociatedSitesOffset:
          type: integer
          description: "Determines how many sites are skipped over when retrieving\
            \ a client’s cross regional contracts. Used when a client ID is linked\
            \ to more than ten sites in an organization. Only a maximum of ten site\
            \ databases are queried when this call is made and `CrossRegionalLookup`\
            \ is set to `true`. To change which sites are queried, change this offset\
            \ value.\r\nDefault: **0**"
          format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClientContractsResponse:
      type: object
      properties:
        Contracts:
          type: array
          description: Contains the details of the client’s contract.
          items:
            $ref: '#/components/schemas/ClientContract'
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
    ClientContract:
      type: object
      properties:
        AgreementDate:
          type: string
          description: The date on which the contract was signed.
          format: date-time
        AutopayStatus:
          type: string
          description: The status of the client’s autopay.
          enum:
          - Active
          - Inactive
          - Suspended
        ContractName:
          type: string
          description: The name of the contract.
        EndDate:
          type: string
          description: The date that the contract expires.
          format: date-time
        Id:
          type: integer
          description: The unique ID of the contract.
          format: int32
        OriginationLocationId:
          type: integer
          description: The ID of the location where the contract was issued.
          format: int32
        StartDate:
          type: string
          description: The date that the contract became active.
          format: date-time
        SiteId:
          type: integer
          description: The ID of the site where the contract was issued.
          format: int32
        UpcomingAutopayEvents:
          type: array
          description: Contains details of the autopay events.
          items:
            $ref: '#/components/schemas/UpcomingAutopayEvent'
      description: A client contract
    UpcomingAutopayEvent:
      type: object
      properties:
        ClientContractId:
          type: integer
          description: The ID of the contract.
          format: int32
        ChargeAmount:
          type: number
          description: The amount charged.
          format: double
        PaymentMethod:
          type: string
          description: The payment method.
          enum:
          - Other
          - CreditCard
          - DebitAccount
          - ACH
        ScheduleDate:
          type: string
          description: The date and time of the next payment.
          format: date-time
    GetClientServicesRequest:
      required:
      - ClientId
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client to query. The results are a list of pricing
            options that the client has purchased. Note that “service” and “pricing
            option” are synonymous in this section of the documentation.
        ClassId:
          type: integer
          description: Filters results to only those pricing options that can be used
            to pay for this class.
          format: int32
        ProgramIds:
          type: array
          description: Filters results to pricing options that belong to one of the
            given program IDs.
          items:
            type: integer
            format: int32
        SessionTypeId:
          type: integer
          description: Filters results to pricing options that will pay for the given
            session type ID. Use this to find pricing options that will pay for a
            specific appointment type.
          format: int32
        LocationIds:
          type: array
          description: Filters results to pricing options that can be used at the
            listed location IDs.
          items:
            type: integer
            format: int32
        VisitCount:
          type: integer
          description: A filter on the minimum number of visits a service can pay
            for.
          format: int32
        StartDate:
          type: string
          description: Filters results to pricing options that are valid on or after
            this date.
          format: date-time
        EndDate:
          type: string
          description: Filters results to pricing options that are valid on or before
            this date.
          format: date-time
        ShowActiveOnly:
          type: boolean
          description: "When `true`, includes active services only.\r\nDefault: **false**"
        CrossRegionalLookup:
          type: boolean
          description: "Used to retrieve a client’s pricing options from multiple\
            \ sites within an organization. When included and set to `true`, it searches\
            \ a maximum of ten sites with which this client is associated. When a\
            \ client is associated with more than ten sites, use `ClientAssociatedSitesOffset`\
            \ as many times as needed to search the additional sites with which the\
            \ client is associated. You can use the `CrossRegionalClientAssociations`\
            \ value from `GET CrossRegionalClientAssociations` to determine how many\
            \ sites the client is associated with. Note that a `SiteID` is returned\
            \ and populated in the `ClientServices` response when `CrossRegionalLookup`\
            \ is set to `true`.\r\nDefault: **false**"
        ClientAssociatedSitesOffset:
          type: integer
          description: "Used to retrieve a client’s pricing options from multiple\
            \ sites within an organization when the client is associated with more\
            \ than ten sites. To change which ten sites are searched, change this\
            \ offset value. A value of 0 means that no sites are skipped and the first\
            \ ten sites are returned. You can use the `CrossRegionalClientAssociations`\
            \ value from `GET CrossRegionalClientAssociations` to determine how many\
            \ sites the client is associated with. Note that you must always have\
            \ `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\n\
            Default: **0**\r\n\r\nFor example, if a client is associated with 25 sites,\
            \ you need to call `GetClientServices` three times, as follows:\r\n* Use\
            \ `GET CrossRegionalClientAssociations` to determine how many sites a\
            \ client is associated with, which tells you how many additional calls\
            \ you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or\
            \ set it to 0 to return the client’s services (pricing options) from sites\
            \ 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client\
            \ pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset`\
            \ to 20 to return the client pricing options from sites 21-25"
          format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClientServicesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        ClientServices:
          type: array
          description: Contains information about client pricing options.
          items:
            $ref: '#/components/schemas/ClientService'
    ClientService:
      type: object
      properties:
        ActiveDate:
          type: string
          description: The date that this pricing option became active and could be
            used to pay for services.
          format: date-time
        Count:
          type: integer
          description: The number of service sessions this pricing option contained
            when first purchased.
          format: int32
        Current:
          type: boolean
          description: "When `true`, there are service sessions remaining on the pricing\
            \ option that can be used pay for the current session.<br />\r\nWhen `false`,\
            \ the client cannot use this pricing option to pay for other services."
        ExpirationDate:
          type: string
          description: The date when the pricing option expires and can no longer
            be used to pay for services, even if unused service sessions remain on
            the option; expressed as UTC.
          format: date-time
        Id:
          type: integer
          description: The unique ID assigned to this pricing option, specific to
            when it was purchased by the client.
          format: int64
        ProductId:
          type: integer
          description: The unique ID of this pricing option, not specific to any client's
            purchase of it.
          format: int32
        Name:
          type: string
          description: The name of this pricing option.
        PaymentDate:
          type: string
          description: The date on which the client paid for this pricing option.
          format: date-time
        Program:
          $ref: '#/components/schemas/Program'
        Remaining:
          type: integer
          description: The number of service sessions remaining in the pricing option
            that can still be used.
          format: int32
        SiteId:
          type: integer
          description: The ID of the subscriber site associated with this pricing
            option.
          format: int32
        Action:
          type: string
          description: The action taken.
          enum:
          - None
          - Added
          - Updated
          - Failed
          - Removed
      description: A service that is on a client's account.
    GetClientVisitsRequest:
      required:
      - ClientId
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the requested client.
        ClientAssociatedSitesOffset:
          type: integer
          description: The number of sites to skip when returning the site associated
            with a client.
          format: int32
        CrossRegionalLookup:
          type: boolean
          description: "When `true`, indicates that past and scheduled client visits\
            \ across all sites in the region are returned.<br />\r\nWhen `false`,\
            \ indicates that only visits at the current site are returned."
        EndDate:
          type: string
          description: "The date past which class visits are not returned.\r\nDefault:\
            \ **today’s date**"
          format: date-time
        StartDate:
          type: string
          description: "The date before which class visits are not returned.\r\nDefault:\
            \ **the end date**"
          format: date-time
        UnpaidsOnly:
          type: boolean
          description: "When `true`, indicates that only visits that have not been\
            \ paid for are returned.<br />\r\nWhen `false`, indicates that all visits\
            \ are returned, regardless of whether they have been paid for.<br />\r\
            \nDefault: **false**"
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClientVisitsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Visits:
          type: array
          description: Contains information about client visits.
          items:
            $ref: '#/components/schemas/Visit'
    GetActiveClientMembershipsRequest:
      required:
      - ClientId
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client whose membership was requested.
        LocationId:
          type: integer
          description: The ID of the location where the requested membership was created.
          format: int32
        CrossRegionalLookup:
          type: boolean
          description: "Used to retrieve a client’s memberships from multiple sites\
            \ within an organization. When included and set to `true`, it searches\
            \ a maximum of ten sites with which this client is associated. When a\
            \ client is associated with more than ten sites, use `ClientAssociatedSitesOffset`\
            \ as many times as needed to search the additional sites with which the\
            \ client is associated. You can use the `CrossRegionalClientAssociations`\
            \ value from `GET CrossRegionalClientAssociations` to determine how many\
            \ sites the client is associated with. Note that a `SiteID` is returned\
            \ and populated in the `ClientServices` response when `CrossRegionalLookup`\
            \ is set to `true`.\r\nDefault: **false**"
        ClientAssociatedSitesOffset:
          type: integer
          description: "Used to retrieve a client’s memberships from multiple sites\
            \ within an organization when the client is associated with more than\
            \ ten sites. To change which ten sites are searched, change this offset\
            \ value. A value of 0 means that no sites are skipped and the first ten\
            \ sites are returned. You can use the `CrossRegionalClientAssociations`\
            \ value from `GET CrossRegionalClientAssociations` to determine how many\
            \ sites the client is associated with. Note that you must always have\
            \ `CrossRegionalLookup` set to `true` to use this parameter.<br />\r\n\
            Default: **0**\r\n\r\nFor example, if a client is associated with 25 sites,\
            \ you need to call `GetClientServices` three times, as follows:\r\n* Use\
            \ `GET CrossRegionalClientAssociations` to determine how many sites a\
            \ client is associated with, which tells you how many additional calls\
            \ you need to make.\r\n* Either omit `ClientAssociatedSitesOffset` or\
            \ set it to 0 to return the client’s services (pricing options) from sites\
            \ 1-10.\r\n* Set `ClientAssociatedSitesOffset` to 10 to return the client\
            \ pricing options from sites 11-20\r\n* Set `ClientAssociatedSitesOffset`\
            \ to 20 to return the client pricing options from sites 21-25"
          format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetActiveClientMembershipsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        ClientMemberships:
          type: array
          description: Details about the requested memberships.
          items:
            $ref: '#/components/schemas/ClientMembership'
    ClientMembership:
      type: object
      properties:
        RestrictedLocations:
          type: array
          description: The locations that the membership is restricted to, if any.
          items:
            $ref: '#/components/schemas/Location'
        IconCode:
          type: string
          description: Text code that represents the `MembershipIcon`.
        MembershipId:
          type: integer
          description: The membership's ID.
          format: int32
        ActiveDate:
          type: string
          description: The date that this pricing option became active and could be
            used to pay for services.
          format: date-time
        Count:
          type: integer
          description: The number of service sessions this pricing option contained
            when first purchased.
          format: int32
        Current:
          type: boolean
          description: "When `true`, there are service sessions remaining on the pricing\
            \ option that can be used pay for the current session.<br />\r\nWhen `false`,\
            \ the client cannot use this pricing option to pay for other services."
        ExpirationDate:
          type: string
          description: The date when the pricing option expires and can no longer
            be used to pay for services, even if unused service sessions remain on
            the option; expressed as UTC.
          format: date-time
        Id:
          type: integer
          description: The unique ID assigned to this pricing option, specific to
            when it was purchased by the client.
          format: int64
        ProductId:
          type: integer
          description: The unique ID of this pricing option, not specific to any client's
            purchase of it.
          format: int32
        Name:
          type: string
          description: The name of this pricing option.
        PaymentDate:
          type: string
          description: The date on which the client paid for this pricing option.
          format: date-time
        Program:
          $ref: '#/components/schemas/Program'
        Remaining:
          type: integer
          description: The number of service sessions remaining in the pricing option
            that can still be used.
          format: int32
        SiteId:
          type: integer
          description: The ID of the subscriber site associated with this pricing
            option.
          format: int32
        Action:
          type: string
          description: The action taken.
          enum:
          - None
          - Added
          - Updated
          - Failed
          - Removed
    GetRequiredClientFieldsResponse:
      type: object
      properties:
        RequiredClientFields:
          type: array
          description: A list of strings that maps to the client fields that are required
            by the site.
          items:
            type: string
    GetClientReferralTypesRequest:
      type: object
      properties:
        IncludeInactive:
          type: boolean
          description: "When `true`, filters the results to include subtypes and inactive\
            \ referral types.<br />\r\nWhen `false`, includes no subtypes and only\
            \ active types."
    GetClientReferralTypesResponse:
      type: object
      properties:
        ReferralTypes:
          type: array
          description: The list of available referral types.
          items:
            type: string
    GetClientAccountBalancesRequest:
      required:
      - ClientIds
      type: object
      properties:
        BalanceDate:
          type: string
          description: "The date you want a balance relative to. \r\nDefault: **the\
            \ current date**"
          format: date-time
        ClassId:
          type: integer
          description: The class ID of the event for which you want a balance.
          format: int32
        ClientIds:
          type: array
          description: The list of clients IDs for which you want account balances.
          items:
            type: string
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClientAccountBalancesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Clients:
          type: array
          description: A list of clients.
          items:
            $ref: '#/components/schemas/Client'
    GetClientPurchasesRequest:
      required:
      - ClientId
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client you are querying for purchases.
        StartDate:
          type: string
          description: "Filters results to purchases made on or after this timestamp.<br\
            \ />\r\nDefault: **now**"
          format: date-time
        EndDate:
          type: string
          description: "Filters results to purchases made before this timestamp.<br\
            \ />\r\nDefault: **end of today**"
          format: date-time
        SaleId:
          type: integer
          description: Filters results to the single record associated with this ID.
          format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetClientPurchasesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Purchases:
          type: array
          description: Contains information that describes the item sold and the payment.
          items:
            $ref: '#/components/schemas/ClientPurchaseRecord'
    ClientPurchaseRecord:
      type: object
      properties:
        Sale:
          $ref: '#/components/schemas/Sale'
        Description:
          type: string
          description: The item name and description.
        AccountPayment:
          type: boolean
          description: If `true`, the item was a payment credited to an account.
        Price:
          type: number
          description: The item's price before taxes and discounts.
          format: double
        AmountPaid:
          type: number
          description: The amount paid for the item.
          format: double
        Discount:
          type: number
          description: The discount amount that was applied to the item.
          format: double
        Tax:
          type: number
          description: The amount of tax that was applied to the item.
          format: double
        Returned:
          type: boolean
          description: The return status of the item. If `true`, this item was returned.
        Quantity:
          type: integer
          description: The quantity of the item purchased.
          format: int32
      description: A record of a specific client purchase
    Sale:
      type: object
      properties:
        Id:
          type: integer
          description: The sale ID.
          format: int64
        SaleDate:
          type: string
          description: The date the item was sold.
          format: date-time
        SaleTime:
          type: string
          description: The time the item was sold.
        SaleDateTime:
          type: string
          description: The date and time the item was sold.
          format: date-time
        ClientId:
          type: string
          description: The ID of the client who made the purchase.
        PurchasedItems:
          type: array
          description: Contains information that describes the purchased items.
          items:
            $ref: '#/components/schemas/PurchasedItem'
        LocationId:
          type: integer
          description: The ID of the location where the sale takes place.
          format: int32
        Payments:
          type: array
          description: Contains information that describes the payments that contributed
            to this sale.
          items:
            $ref: '#/components/schemas/SalePayment'
    PurchasedItem:
      type: object
      properties:
        Id:
          type: integer
          description: The ProductID of the item.
          format: int64
        IsService:
          type: boolean
          description: When `true`, indicates that the purchased item was a pricing
            option for a service.
        BarcodeId:
          type: string
          description: "The BarcodeId of the item.\r\nFor services, BarcodeId may\
            \ be null\r\nIf no barcode id is explicitly set by the business it is\
            \ the internal id in a string format."
    SalePayment:
      type: object
      properties:
        Id:
          type: integer
          description: A unique identifier for this payment.
          format: int64
        Amount:
          type: number
          description: The amount of this payment.
          format: double
        Method:
          type: integer
          description: The method for this payment.
          format: int32
        Type:
          type: string
          description: The type of payment.
        Notes:
          type: string
          description: Notes about this payment.
    GetClientIndexesRequest:
      type: object
      properties:
        RequiredOnly:
          type: boolean
          description: "When `true`, filters the results to only indexes that are\
            \ required on creation.<br />\r\nWhen `false` or omitted, returns all\
            \ of the client indexes."
    GetClientIndexesResponse:
      type: object
      properties:
        ClientIndexes:
          type: array
          description: Contains information about the client indexes.
          items:
            $ref: '#/components/schemas/ClientIndex'
    ClientIndex:
      type: object
      properties:
        Id:
          type: integer
          description: The unique ID of the client index.
          format: int32
        Name:
          type: string
          description: The name of the client index.
        RequiredBusinessMode:
          type: boolean
          description: When `true`, indicates that the index is required when creating
            profiles in business mode.
        RequiredConsumerMode:
          type: boolean
          description: When `true`, indicates that the index is required when creating
            profiles in consumer mode.
        Values:
          type: array
          description: Contains information about the index's possible values.
          items:
            $ref: '#/components/schemas/ClientIndexValue'
        Action:
          type: string
          description: The action performed on this object.
          enum:
          - None
          - Added
          - Updated
          - Failed
          - Removed
      description: A client index.
    ClientIndexValue:
      type: object
      properties:
        Active:
          type: boolean
          description: "When `true`, indicates that the index value can be assigned\
            \ to its parent index.<br />\r\nWhen `false`, indicates that the index\
            \ value has been deactivated and cannot be assigned to its parent index."
        Id:
          type: integer
          description: The index value’s ID.
          format: int32
        Name:
          type: string
          description: The name of the client index value.
      description: A client index value.
    GetCustomClientFieldsRequest:
      type: object
      properties:
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetCustomClientFieldsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        CustomClientFields:
          type: array
          description: Contains information about the available custom client fields.
          items:
            $ref: '#/components/schemas/CustomClientField'
    CustomClientField:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the custom client field.
          format: int32
        DataType:
          type: string
          description: The data type of the field.
        Name:
          type: string
          description: The name of the field.
      description: A custom client field
    AddContactLogRequest:
      required:
      - ClientId
      - ContactMethod
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client whose contact log is being added.
        AssignedToStaffId:
          type: integer
          description: The ID of the staff member to whom the contact log is assigned.
          format: int64
        Text:
          type: string
          description: The body of the contact log.
        FollowupByDate:
          type: string
          description: The date by which the assigned staff member should complete
            this contact log.
          format: date-time
        ContactMethod:
          type: string
          description: How the client wants to be contacted.
        ContactName:
          type: string
          description: The name of the person to be contacted by the assigned staff
            member.
        Comments:
          type: array
          description: Any comments on the contact log.
          items:
            type: string
        Types:
          type: array
          description: The contact log types used to tag this contact log.
          items:
            $ref: '#/components/schemas/AddContactLogType'
        Test:
          type: boolean
          description: "When `true`, indicates that this is a test request and no\
            \ data is inserted into the subscriber’s database.<br />\r\nWhen `false`,\
            \ the database is updated."
    AddContactLogType:
      type: object
      properties:
        Id:
          type: integer
          description: The contact log type’s ID.
          format: int32
        SubTypes:
          type: array
          description: A list of the subtype IDs used to tag this contact log type.
          items:
            type: integer
            format: int32
      description: Defines what sort of subtypes we want to add to this contact log
        type
    ContactLog:
      type: object
      properties:
        Id:
          type: integer
          description: The contact log’s ID.
          format: int64
        Text:
          type: string
          description: The contact log’s body text.
        CreatedDateTime:
          type: string
          description: The local date and time when the contact log was created.
          format: date-time
        FollowupByDate:
          type: string
          description: The date by which the assigned staff member should close or
            follow up on this contact log.
          format: date-time
        ContactMethod:
          type: string
          description: The method by which the client wants to be contacted.
        ContactName:
          type: string
          description: The name of the client to contact.
        Client:
          $ref: '#/components/schemas/Client'
        CreatedBy:
          $ref: '#/components/schemas/Staff'
        AssignedTo:
          $ref: '#/components/schemas/Staff'
        Comments:
          type: array
          description: The contact log’s comments.
          items:
            $ref: '#/components/schemas/ContactLogComment'
        Types:
          type: array
          description: Contains information about contact log types.
          items:
            $ref: '#/components/schemas/ContactLogType'
      description: A contact log.
    ContactLogComment:
      type: object
      properties:
        Id:
          type: integer
          description: The comment’s ID.
          format: int32
        Text:
          type: string
          description: The comment’s body text.
        CreatedDateTime:
          type: string
          description: The local time when the comment was created.
          format: date-time
        CreatedBy:
          $ref: '#/components/schemas/Staff'
      description: A contact log comment.
    ContactLogType:
      type: object
      properties:
        Id:
          type: integer
          description: The contact log type’s ID.
          format: int32
        SubTypes:
          type: array
          description: A list of the subtypes being used to tag this contact log type.
          items:
            $ref: '#/components/schemas/ContactLogSubType'
      description: A contact log type.
    ContactLogSubType:
      type: object
      properties:
        Id:
          type: integer
          description: The contact log subtype’s ID.
          format: int32
      description: A contact log subtype.
    UpdateContactLogRequest:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the contact log being updated.
          format: int32
        Test:
          type: boolean
          description: "When `true`, indicates that this is a test request and no\
            \ data is inserted into the subscriber’s database.<br />\r\nWhen `false`,\
            \ the database is updated."
        AssignedToStaffId:
          type: integer
          description: The ID of the staff member to whom the contact log is now being
            assigned.
          format: int64
        Text:
          type: string
          description: The contact log’s new text.
        ContactName:
          type: string
          description: The name of the new person to be contacted by the assigned
            staff member.
        FollowupByDate:
          type: string
          description: The new date by which the assigned staff member should complete
            this contact log.
          format: date-time
        ContactMethod:
          type: string
          description: The new method by which the client wants to be contacted.
        Comments:
          type: array
          description: Contains information about the comments being updated or added
            to the contact log. Comments that have an ID of `0` are added to the contact
            log.
          items:
            $ref: '#/components/schemas/UpdateContactLogComment'
        Types:
          type: array
          description: Contains information about the contact logs types being assigned
            to the contact log, in addition to the contact log types that are already
            assigned.
          items:
            $ref: '#/components/schemas/UpdateContactLogType'
    UpdateContactLogComment:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the contact log comment to be updated. Pass a value
            of `0` to add a new comment to the contact log.
          format: int32
        Text:
          type: string
          description: The new text for the comment.
    UpdateContactLogType:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the contact log type to update the subtypes of.
          format: int32
        SubTypes:
          type: array
          description: The subtype IDs that are to be added to the contact log.
          items:
            type: integer
            format: int32
    GetCrossRegionalClientAssociationsRequest:
      type: object
      properties:
        ClientId:
          type: string
          description: Looks up the cross regional associations by the client’s ID.
            Either `ClientId` or `Email` must be provided. If both are provided, the
            `ClientId` is used by default.
        Email:
          type: string
          description: Looks up the cross regional associations by the client’s email
            address. Either `ClientId` or `Email` must be provided. If both are provided,
            the `ClientId` is used by default.
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetCrossRegionalClientAssociationsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        CrossRegionalClientAssociations:
          type: array
          description: Contains information about the client’s cross regional associations.
          items:
            $ref: '#/components/schemas/CrossRegionalClientAssociation'
    CrossRegionalClientAssociation:
      type: object
      properties:
        SiteId:
          type: integer
          description: The ID of the site to which the client belongs.
          format: int32
        ClientId:
          type: string
          description: The client’s RSSID.
        UniqueId:
          type: integer
          description: The client’s unique ID.
          format: int64
      description: A client cross region association
    AddClientRequest:
      required:
      - FirstName
      - LastName
      type: object
      properties:
        AccountBalance:
          type: number
          description: The client’s current [account balance](https://mindbody-online-support.force.com/support/s/article/203262013-Adding-account-payments-video-tutorial?language=en_US).
          format: double
        Action:
          type: string
          description: The action taken.
          enum:
          - None
          - Added
          - Updated
          - Failed
          - Removed
        Active:
          type: boolean
          description: "When `true`, indicates that the client is active at the site.<br\
            \ />\r\nWhen `false`, indicates that the client is not active at the site."
        AddressLine1:
          type: string
          description: The first line of the client’s street address.
        AddressLine2:
          type: string
          description: The second line of the client’s street address, if needed.
        ApptGenderPrefMale:
          type: boolean
          description: "When `true`, indicates that the client prefers services to\
            \ be provided by a male service provider.<br />\r\nWhen `false`, indicates\
            \ that the client prefers services to be provided by a female service\
            \ provider.<br />\r\nWhen `null`, indicates that the client has no preference.\r\
            \nDefault: **null**"
        BirthDate:
          type: string
          description: The client’s date of birth.
          format: date-time
        City:
          type: string
          description: The client’s city.
        ClientCreditCard:
          $ref: '#/components/schemas/ClientCreditCard'
        ClientIndexes:
          type: array
          description: Contains a list of the indexes and client index values to be
            assigned to the client.
          items:
            $ref: '#/components/schemas/AssignedClientIndex'
        ClientRelationships:
          type: array
          description: Contains information about client relationships to be assigned
            to the client.
          items:
            $ref: '#/components/schemas/ClientRelationship'
        Country:
          type: string
          description: The country in which the client is located.
        CreationDate:
          type: string
          description: The date when the client was added to the business, either
            by the client from the online store or by a staff member at the subscriber’s
            business. This value always returns in the format yyyy-mm-ddThh:mm:ss:ms.
          format: date-time
        CustomClientFields:
          type: array
          description: Contains information about the custom fields to be assigned
            to the client.
          items:
            $ref: '#/components/schemas/CustomClientFieldValue'
        Email:
          type: string
          description: The client’s email address.
        EmergencyContactInfoEmail:
          type: string
          description: "The email address of the client’s emergency contact.<br />\r\
            \nFor more information, see [Children’s program features(emergency contact\
            \ information)](https://support.mindbodyonline.com/s/article/203259283-Children-s-program-features-emergency-contact-information?language=en_US)."
        EmergencyContactInfoName:
          type: string
          description: The name of the client’s emergency contact.
        EmergencyContactInfoPhone:
          type: string
          description: The phone number of the client’s emergency contact.
        EmergencyContactInfoRelationship:
          type: string
          description: The client’s relationship with the emergency contact, for example,
            mother or spouse.
        FirstAppointmentDate:
          type: string
          description: The date of the client’s first booked appointment at the business.
          format: date-time
        FirstName:
          type: string
          description: The client’s first name. You must specify a first name when
            you add a client.
        Gender:
          type: string
          description: The client’s gender.
        HomeLocation:
          $ref: '#/components/schemas/Location'
        HomePhone:
          type: string
          description: The client’s home phone number.
        IsCompany:
          type: boolean
          description: "When `true`, indicates that the client should be marked as\
            \ a company at the business.<br />\r\nWhen `false`, indicates the client\
            \ is an individual and does not represent a company."
        IsProspect:
          type: boolean
          description: "This value is set only if the business owner allows individuals\
            \ to be prospects.<br />\r\nWhen `true`, indicates that the client should\
            \ be marked as a prospect for the business.<br />\r\nWhen `false`, indicates\
            \ that the client should not be marked as a prospect for the business."
        LastFormulaNotes:
          type: string
          description: The last [formula note](https://support.mindbodyonline.com/s/article/203259903-Appointments-Formula-notes?language=en_US)
            entered for the client.
        LastModifiedDateTime:
          type: string
          description: The UTC date and time when the client’s information was last
            modified.
          format: date-time
        LastName:
          type: string
          description: The client’s last name. You must specify a last name when you
            add a client.
        Liability:
          $ref: '#/components/schemas/Liability'
        LiabilityRelease:
          type: boolean
          description: "Passing `true` sets the client’s liability information as\
            \ follows:\r\n* `IsReleased` is set to `true`.\r\n* `AgreementDate` is\
            \ set to the time zone of the business when the call was processed.\r\n\
            * `ReleasedBy` is set to `null` if the call is made by the client, `0`\
            \ if the call was made by the business owner, or to a specific staff member’\
            s ID if a staff member made the call.\r\nPassing `false` sets the client’\
            s liability information as follows:\r\n* `IsReleased` is set to `false`.\r\
            \n* `AgreementDate` is set to `null`.\r\n* `ReleasedBy` is set to `null`."
        MembershipIcon:
          type: integer
          description: The ID of the membership icon displayed next to the client’s
            name, if the client has a membership on their account.
          format: int32
        MiddleName:
          type: string
          description: The client’s middle name.
        MobilePhone:
          type: string
          description: The client’s mobile phone number.
        MobileProvider:
          type: integer
          description: The client's mobile provider.
          format: int32
        NewId:
          type: string
          description: When passed, sets the client's ID to this value. Otherwise,
            the client's ID will match their `UniqueId`.
        Notes:
          type: string
          description: Any notes entered on the client’s account by staff members.
            This value should never be shown to clients unless the business owner
            has a specific reason for showing them.
        PhotoUrl:
          type: string
          description: The URL for the client’s photo, if one has been uploaded.
        PostalCode:
          type: string
          description: The client’s postal code.
        ProspectStage:
          $ref: '#/components/schemas/ProspectStage'
        RedAlert:
          type: string
          description: Contains any red alert information entered by the business
            owner for the client.
        ReferredBy:
          type: string
          description: "Specifies how the client was referred to the business. You\
            \ can get a list of possible strings using the `GET ClientReferralTypes`\
            \ endpoint.<br />\r\nFor more information, see [Referral types and referral\
            \ subtypes](https://support.mindbodyonline.com/s/article/203259393-Referral-types-and-referral-subtypes?language=en_US)."
        SalesReps:
          type: array
          description: Contains information about the sales representatives to be
            assigned to the new client.
          items:
            $ref: '#/components/schemas/SalesRep'
        SiteId:
          type: integer
          description: The ID of the site.
          format: int32
        State:
          type: string
          description: The client’s state.
        Status:
          type: string
          description: The client’s status.
        Test:
          type: boolean
          description: "When `true`, indicates that test mode is enabled. The method\
            \ is validated, but no client data is added or updated.<br />\r\nDefault:\
            \ **false**"
        UniqueId:
          type: integer
          description: The client’s system-generated ID at the business. This value
            cannot be changed by business owners and is always unique across all clients
            at the business. This ID is not widely used in the Public API, but can
            be used by your application to uniquely identify clients.
          format: int64
        WorkExtension:
          type: string
          description: The client’s work phone extension number.
        WorkPhone:
          type: string
          description: The client’s work phone number.
        YellowAlert:
          type: string
          description: Contains any yellow alert information entered by the business
            owner for the client.
        SendScheduleEmails:
          type: boolean
          description: When `true`, indicates that the client opts to receive schedule
            emails.
        SendAccountEmails:
          type: boolean
          description: When `true`, indicates that the client opts to receive account
            emails.
        SendPromotionalEmails:
          type: boolean
          description: When `true`, indicates that the client opts to receive promotional
            emails.
    AddClientResponse:
      type: object
      properties:
        Client:
          $ref: '#/components/schemas/Client'
    UpdateClientRequest:
      required:
      - Client
      type: object
      properties:
        Client:
          $ref: '#/components/schemas/Client'
        Test:
          type: boolean
          description: "When `true`, indicates that test mode is enabled. The method\
            \ is validated, but no client data is added or updated.<br />\r\nDefault:\
            \ **false**"
        CrossRegionalUpdate:
          type: boolean
          description: "When `true`, the updated information is propagated to all\
            \ of the region’s sites where the client has a profile.<br />\r\nWhen\
            \ `false`, only the local client is updated.<br />\r\nDefault: **true**"
        NewId:
          type: string
          description: The new RSSID to be used for the client. Use `NewId` to assign
            a specific number to be a client’s ID. If that number is not available,
            the call returns an error. This RSSID must be unique within the subscriber’s
            site. If this is a cross-regional update, the RSSID must be unique across
            the region. If the requested number is already in use, an error is returned.
    UpdateClientResponse:
      type: object
      properties:
        Client:
          $ref: '#/components/schemas/Client'
    UpdateClientVisitRequest:
      required:
      - VisitId
      type: object
      properties:
        VisitId:
          type: integer
          description: The ID of the visit to be updated.
          format: int32
        Makeup:
          type: boolean
          description: When `true`, indicates that the visit is eligible to be made
            up.
        SignedIn:
          type: boolean
          description: When `true`, indicates that the client has signed in for the
            visit.
        Execute:
          type: string
          description: "The execute code used to update this visit. Possible values\
            \ are:\r\n* Cancel\r\n* Latecancel\r\n* Unlatecancel"
        Test:
          type: boolean
          description: "When `true`, indicates that test mode is enabled. When test\
            \ mode is enabled, input information is validated, but not committed.<br\
            \ />\r\nDefault: **false**"
        SendEmail:
          type: boolean
          description: "When `true`, indicates that the client should be sent an email\
            \ for cancellations. Note that email is not sent unless the client has\
            \ an email address and automatic emails have been set up correctly.<br\
            \ />\r\nDefault: **false**"
    UpdateClientVisitResponse:
      type: object
      properties:
        Visit:
          $ref: '#/components/schemas/Visit'
    AddArrivalRequest:
      required:
      - ClientId
      - LocationId
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the requested client.
        LocationId:
          type: integer
          description: The ID of the location for the requested arrival.
          format: int32
    AddArrivalResponse:
      type: object
      properties:
        ArrivalAdded:
          type: boolean
          description: When `true`, indicates that the arrival was added to the database.
        ClientService:
          $ref: '#/components/schemas/ClientService'
    SendPasswordResetEmailRequest:
      required:
      - UserEmail
      - UserFirstName
      - UserLastName
      type: object
      properties:
        UserEmail:
          type: string
          description: The user’s email address. The software uses this parameter
            as the username.
        UserFirstName:
          type: string
          description: The user’s first name. The software uses this parameter to
            verify the user.
        UserLastName:
          type: string
          description: The user’s last name. The software uses this parameter to verify
            the user.
      description: Request to send a password reset email to a user
    GetContactLogsRequest:
      required:
      - ClientId
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client whose contact logs are being requested.
        StartDate:
          type: string
          description: "Filters the results to contact logs created on or after this\
            \ date.<br />\r\nDefault: **the current date**"
          format: date-time
        EndDate:
          type: string
          description: "Filters the results to contact logs created before this date.<br\
            \ />\r\nDefault: **the start date**"
          format: date-time
        StaffIds:
          type: array
          description: Filters the results to return contact logs assigned to one
            or more staff IDs.
          items:
            type: integer
            format: int64
        ShowSystemGenerated:
          type: boolean
          description: "When `true`, system-generated contact logs are returned in\
            \ the results.<br />\r\nDefault: **false**"
        TypeIds:
          type: array
          description: Filters the results to contact logs assigned one or more of
            these type IDs.
          items:
            type: integer
            format: int32
        SubtypeIds:
          type: array
          description: Filters the results to contact logs assigned one or more of
            these subtype IDs.
          items:
            type: integer
            format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetContactLogsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        ContactLogs:
          type: array
          description: Contains the information about the contact logs.
          items:
            $ref: '#/components/schemas/ContactLog'
    UpdateClientServiceRequest:
      required:
      - ServiceId
      type: object
      properties:
        ServiceId:
          type: integer
          description: The ID of the service to update.
          format: int32
        ActiveDate:
          type: string
          description: The date that the service became active.
          format: date-time
        ExpirationDate:
          type: string
          description: The date that the service is to expire.
          format: date-time
        Test:
          type: boolean
          description: "When `true`, indicates that input information is to be validated,\
            \ but not committed.<br />\r\nWhen `false` or omitted, the database is\
            \ affected.<br />\r\nDefault: **false**"
    UpdateClientServiceResponse:
      type: object
      properties:
        ClientService:
          $ref: '#/components/schemas/ClientService'
    DirectDebitInfo:
      type: object
      properties:
        NameOnAccount:
          type: string
          description: The name on the bank account.
        RoutingNumber:
          type: string
          description: The routing number for the bank.
        AccountNumber:
          type: string
          description: The bank account number.
        AccountType:
          type: string
          description: The account type. Either Checking or Savings.
    AddClientDirectDebitInfoRequest:
      type: object
      properties:
        Test:
          type: boolean
          description: A value of true performs a dry run exectuion
        ClientId:
          type: string
          description: The ID of the client being updated
        NameOnAccount:
          type: string
          description: The name on the bank account being added
        RoutingNumber:
          type: string
          description: The routing number of the bank account being added
        AccountNumber:
          type: string
          description: The account number of the bank account being added
        AccountType:
          type: string
          description: Either "Checking" or "Savings"
    AddClientDirectDebitInfoResponse:
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client being updated
        NameOnAccount:
          type: string
          description: The name on the bank account being added
        RoutingNumber:
          type: string
          description: The routing number of the bank account being added
        AccountNumber:
          type: string
          description: The account number of the bank account being added
        AccountType:
          type: string
          description: Either "Checking" or "Savings"
    AddClientToEnrollmentRequest:
      required:
      - ClassScheduleId
      - ClientId
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client who is being booked into the enrollment.
        ClassScheduleId:
          type: integer
          description: The ID of the class schedule (enrollment) into which the client
            is being booked.
          format: int32
        EnrollDateForward:
          type: string
          description: Enroll the clients from this date forward. `EnrollDateForward`
            takes priority over open enrollment.
          format: date-time
        EnrollOpen:
          type: array
          description: Enroll for selected days.
          items:
            type: string
            format: date-time
        Test:
          type: boolean
          description: "When `true`, input information is validated, but not committed.<br\
            \ />\r\nDefault: **false**"
        SendEmail:
          type: boolean
          description: "When `true`, indicates that the client should be sent an email.\
            \ An email is only sent if the client has an email address and automatic\
            \ emails have been set up.<br />\r\nDefault: **false**"
        Waitlist:
          type: boolean
          description: When `true`, the client is added to a specific enrollments
            waiting list.
        WaitlistEntryId:
          type: integer
          description: The waiting list entry to add. Used to add a client to an enrollment
            from a waiting list entry.
          format: int32
    GetEnrollmentsRequest:
      type: object
      properties:
        ClassScheduleIds:
          type: array
          description: A list of the requested class schedule IDs. If omitted, all
            class schedule IDs return.
          items:
            type: integer
            format: int32
        EndDate:
          type: string
          description: "The end of the date range. The response returns any active\
            \ enrollments that occur on or before this day.<br />\r\nDefault: **StartDate**"
          format: date-time
        LocationIds:
          type: array
          description: List of the IDs for the requested locations. If omitted, all
            location IDs return.
          items:
            type: integer
            format: int32
        ProgramIds:
          type: array
          description: List of the IDs for the requested programs. If omitted, all
            program IDs return.
          items:
            type: integer
            format: int32
        SessionTypeIds:
          type: array
          description: List of the IDs for the requested session types. If omitted,
            all session types IDs return.
          items:
            type: integer
            format: int32
        StaffIds:
          type: array
          description: List of the IDs for the requested staff IDs. If omitted, all
            staff IDs return.
          items:
            type: integer
            format: int64
        StartDate:
          type: string
          description: "The start of the date range. The response returns any active\
            \ enrollments that occur on or after this day.<br />\r\nDefault: **today’\
            s date**"
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetEnrollmentsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Enrollments:
          type: array
          description: Contains information about the enrollments.
          items:
            $ref: '#/components/schemas/ClassSchedule'
    GetScheduledServiceEarningsRequest:
      type: object
      properties:
        ScheduledServiceType:
          type: string
          description: Defines a payroll filter for the type of service offered, either
            "Class", "Appointment", or "Enrollment".
        ScheduledServiceId:
          type: integer
          description: The ID for the instance of the service offered
          format: int64
        StaffId:
          type: integer
          description: A list of staff IDs that you want to retrieve payroll information
            for. If you do not supply a `StaffId`, all active staff members return,
            ordered by staff ID.
          format: int64
        StartDateTime:
          type: string
          description: "The beginning of the date range for the payroll information\
            \ to be returned. The maximum allowed date range is 14 days.\r\n* If you\
            \ do not supply a `StartDateTime`, data returns for the seven days prior\
            \ to the `EndDateTime` that you supply.\r\n* If you do not supply either\
            \ a `StartDateTime` or an `EndDateTime`, the data returns for seven days\
            \ prior to today’s date."
          format: date-time
        EndDateTime:
          type: string
          description: "The end of the date range for the payroll information to be\
            \ returned. The maximum allowed date range is 14 days.<br />\r\nDefault:\
            \ **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data\
            \ returns for the period from the `StartDateTime` that you supply to today’\
            s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`,\
            \ data returns for the seven days prior to today’s date."
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetScheduledServiceEarningsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        ScheduledServiceEarnings:
          type: array
          description: Contains the class payroll events.
          items:
            $ref: '#/components/schemas/ScheduledServiceEarningsEvent'
    ScheduledServiceEarningsEvent:
      type: object
      properties:
        StaffId:
          type: integer
          description: The ID of the staff member who taught the class.
          format: int64
        ScheduledServiceId:
          type: integer
          description: The class' ID.
          format: int64
        ScheduledServiceType:
          type: string
          description: The type of the scheduled service; i.e, a class, appointment,
            or enrollment.
          enum:
          - Class
          - Appointment
          - Enrollment
          - All
        Earnings:
          type: number
          description: The total monetary amount the staff is to be paid for this
            class.
          format: double
        DateTime:
          type: string
          format: date-time
    GetTimeCardsRequest:
      type: object
      properties:
        StaffId:
          type: integer
          description: A list of staff IDs that you want to retrieve payroll information
            for. If you do not supply a `StaffId`, all active staff members return,
            ordered by staff ID.
          format: int64
        StartDateTime:
          type: string
          description: "The beginning of the date range for the payroll information\
            \ to be returned. The maximum allowed date range is 14 days.\r\n* If you\
            \ do not supply a `StartDateTime`, data returns for the seven days prior\
            \ to the `EndDateTime` that you supply.\r\n* If you do not supply either\
            \ a `StartDateTime` or an `EndDateTime`, the data returns for seven days\
            \ prior to today’s date."
          format: date-time
        EndDateTime:
          type: string
          description: "The end of the date range for the payroll information to be\
            \ returned. The maximum allowed date range is 14 days.<br />\r\nDefault:\
            \ **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data\
            \ returns for the period from the `StartDateTime` that you supply to today’\
            s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`,\
            \ data returns for the seven days prior to today’s date."
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetTimeCardsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        TimeCards:
          type: array
          description: Information about time card entries, ordered by staff ID.
          items:
            $ref: '#/components/schemas/TimeCardEvent'
    TimeCardEvent:
      type: object
      properties:
        StaffId:
          type: integer
          description: The ID of the requested staff member.
          format: int64
        Task:
          type: string
          description: The staff member’s job title.
        TimeIn:
          type: string
          description: The time that the staff member started the job task.
          format: date-time
        TimeOut:
          type: string
          description: The time that the staff member stopped doing the job task.
          format: date-time
        Hours:
          type: number
          description: The number of hours on this time card, rounded to the nearest
            fourth decimal place.
          format: double
        HourlyRate:
          type: number
          description: The hourly rate the business pays this staff for this `Task`.
          format: double
        Earnings:
          type: number
          description: The total amount earned by the staff member for this time card
            entry.
          format: double
    GetCommissionsRequest:
      type: object
      properties:
        StaffId:
          type: integer
          description: A list of staff IDs that you want to retrieve payroll information
            for. If you do not supply a `StaffId`, all active staff members return,
            ordered by staff ID.
          format: int64
        StartDateTime:
          type: string
          description: "The beginning of the date range for the payroll information\
            \ to be returned. The maximum allowed date range is 14 days.\r\n* If you\
            \ do not supply a `StartDateTime`, data returns for the seven days prior\
            \ to the `EndDateTime` that you supply.\r\n* If you do not supply either\
            \ a `StartDateTime` or an `EndDateTime`, the data returns for seven days\
            \ prior to today’s date."
          format: date-time
        EndDateTime:
          type: string
          description: "The end of the date range for the payroll information to be\
            \ returned. The maximum allowed date range is 14 days.<br />\r\nDefault:\
            \ **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data\
            \ returns for the period from the `StartDateTime` that you supply to today’\
            s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`,\
            \ data returns for the seven days prior to today’s date."
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetCommissionsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Commissions:
          type: array
          description: Contains information about commissions earned by staff for
            sales within the given date range. Results are ordered by `SaleId`, then
            by `StaffId`.
          items:
            $ref: '#/components/schemas/CommissionPayrollEvent'
    CommissionPayrollEvent:
      type: object
      properties:
        StaffId:
          type: integer
          description: The ID of the staff member who earned commissions.
          format: int64
        SaleDateTime:
          type: string
          description: The date and time when the sale occurred.
          format: date-time
        SaleId:
          type: integer
          description: The sale’s ID.
          format: int64
        ProductId:
          type: integer
          description: The product ID of the item for which the staff earned commissions.
          format: int64
        EarningsDetails:
          type: array
          description: Contains information about which commissions the staff earned
            for this item.
          items:
            $ref: '#/components/schemas/CommissionDetail'
        Earnings:
          type: number
          description: The total commissions earned by the staff for this item.
          format: double
    CommissionDetail:
      type: object
      properties:
        CommissionType:
          type: string
          description: "The type of commission earned. Possible values are:\r\n* ItemStandardPercentageCommission\r\
            \n* ItemStandardFlatCommission\r\n* ItemPromotionalPercentageCommission\r\
            \n* ItemPromotionalFlatCommission\r\n* StaffStandardPercentageCommission\r\
            \n* StaffStandardFlatCommission\r\n* StaffPromotionalPercentageCommission\r\
            \n* StaffPromotionalFlatCommission"
        CommissionEarnings:
          type: number
          description: The portion of `Earnings` earned by this `CommissionType`.
          format: double
    GetTipsRequest:
      type: object
      properties:
        StaffId:
          type: integer
          description: A list of staff IDs that you want to retrieve payroll information
            for. If you do not supply a `StaffId`, all active staff members return,
            ordered by staff ID.
          format: int64
        StartDateTime:
          type: string
          description: "The beginning of the date range for the payroll information\
            \ to be returned. The maximum allowed date range is 14 days.\r\n* If you\
            \ do not supply a `StartDateTime`, data returns for the seven days prior\
            \ to the `EndDateTime` that you supply.\r\n* If you do not supply either\
            \ a `StartDateTime` or an `EndDateTime`, the data returns for seven days\
            \ prior to today’s date."
          format: date-time
        EndDateTime:
          type: string
          description: "The end of the date range for the payroll information to be\
            \ returned. The maximum allowed date range is 14 days.<br />\r\nDefault:\
            \ **Today’s date**\r\n* If you do not supply an `EndDateTime`, the data\
            \ returns for the period from the `StartDateTime` that you supply to today’\
            s date.\r\n* If you do not supply an `EndDateTime` or a `StartDateTime`,\
            \ data returns for the seven days prior to today’s date."
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetTipsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Tips:
          type: array
          description: Contains information about tips given to staff members within
            the given date range. Results are ordered by StaffId.
          items:
            $ref: '#/components/schemas/Tip'
    Tip:
      type: object
      properties:
        StaffId:
          type: integer
          description: The ID of the staff member the tip is for.
          format: int64
        SaleId:
          type: integer
          description: The sale’s ID associated with the tip.
          format: int64
        SaleDateTime:
          type: string
          description: The date and time when the tip was given.
          format: date-time
        Earnings:
          type: number
          description: The amount tipped to the staff member.
          format: double
    GetSalesRequest:
      type: object
      properties:
        SaleId:
          type: integer
          description: Filters results to the requested sale ID.
          format: int64
        StartSaleDateTime:
          type: string
          description: Filters results to sales that happened after this date and
            time.
          format: date-time
        EndSaleDateTime:
          type: string
          description: Filters results to sales that happened before this date and
            time.
          format: date-time
        PaymentMethodId:
          type: integer
          description: Filters results to sales paid for by the given payment method
            ID.
          format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetSalesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Sales:
          type: array
          description: Contains the Sale objects, each of which describes the sale
            and payment for a purchase event.
          items:
            $ref: '#/components/schemas/Sale'
    PurchaseContractRequest:
      required:
      - ClientId
      - ContractId
      type: object
      properties:
        Test:
          type: boolean
          description: "When `true`, the Public API validates input information, but\
            \ does not commit it, so no client data is affected.<br />\r\nWhen `false`\
            \ or omitted, the transaction is committed, and client data is affected.<br\
            \ />\r\nDefault: **false**"
        LocationId:
          type: integer
          description: The ID of the location where the client is purchasing the contract;
            used for AutoPays.
          format: int32
        ClientId:
          type: string
          description: The ID of the client. Note that this is not the same as the
            client’s unique ID.
        ContractId:
          type: integer
          description: The ID of the contract being purchased.
          format: int32
        StartDate:
          type: string
          description: "The date that the contract starts.<br />\r\nDefault: **today’\
            s date**"
          format: date-time
        FirstPaymentOccurs:
          type: string
          description: "The date on which the first payment is to occur. Possible\
            \ values:\r\n* Instant\r\n* `StartDate`"
        ClientSignature:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: "A representation of the client’s signature. This value can\
            \ take the form of Base64-encoded byte array. The file type should be\
            \ PNG. The picture of the client’s signature is uploaded and viewable\
            \ from the Client Documents page in the Core Business Mode software. The\
            \ title of the document is:<br />\r\nclientContractSignature-{uniquePurchasedClientContractID}-{contractName}-{contractStartDate}.{fileType}"
          format: byte
        PromotionCode:
          type: string
          description: A promotion code, if one applies. Promotion codes are applied
            to items that are both marked as pay now in a contract and are discounted
            by the promotion code. If a pay now item is an autopay item, its autopay
            price is the price at the time of checkout, so, if a promotion code was
            applied, all autopays are scheduled using that discounted price.
        CreditCardInfo:
          $ref: '#/components/schemas/CreditCardInfo'
        StoredCardInfo:
          $ref: '#/components/schemas/StoredCardInfo'
        SendNotifications:
          type: boolean
          description: "When `true`, indicates that email and SMS notifications should\
            \ be sent to the client after purchase.<br />\r\nDefault: **true**"
        SalesRepId:
          type: integer
          description: The ID of the staff member who is to be marked as the sales
            rep for this contract purchase.
          format: int64
        UseDirectDebit:
          type: boolean
          description: "When `true`, indicates that the direct debit information stored\
            \ on the client's account is to be used to pay for the contract.<br />\r\
            \nThis is only required if both `CreditCardInfo` and `StoredCardInfo`\
            \ are not passed.<br />\r\nDefault: **false**"
    CreditCardInfo:
      type: object
      properties:
        CreditCardNumber:
          type: string
        ExpMonth:
          type: string
        ExpYear:
          type: string
        BillingName:
          type: string
        BillingAddress:
          type: string
        BillingCity:
          type: string
        BillingState:
          type: string
        BillingPostalCode:
          type: string
        SaveInfo:
          type: boolean
      description: INformation about an individual credit card
    StoredCardInfo:
      type: object
      properties:
        LastFour:
          type: string
    PurchaseContractResponse:
      type: object
      properties:
        ClientId:
          type: string
          description: The ID of the client who is purchasing the contract.
        LocationId:
          type: integer
          description: The ID of the location where the contract is being purchased.
          format: int32
        ContractId:
          type: integer
          description: The ID of the general contract being purchased.
          format: int32
        ClientContractId:
          type: integer
          description: The ID of the specific contract being purchased by this specific
            client, not to be confused with the `ContractId`, which refers to a general
            contract that the business offers.
          format: int32
    CheckoutShoppingCartRequest:
      required:
      - ClientId
      - Items
      - Payments
      type: object
      properties:
        CartId:
          type: string
          description: The unique ID of the shopping cart to be processed. You can
            use this value to maintain a persistent cart. If you do not specify a
            cart ID, the MINDBODY software generates one.
        ClientId:
          type: string
          description: The RSSID of the client making the purchase. A cart can be
            validated without a client ID, but a client ID must be specified to complete
            a sale.
        Test:
          type: boolean
          description: "When `true`, indicates that the contents of the cart are validated,\
            \ but the transaction does not take place. You should use this parameter\
            \ during testing and when checking the calculated totals of the items\
            \ in the cart.<br />\r\nWhen `false`, the transaction takes place and\
            \ the database is affected.<br />\r\nDefault: **false**"
        Items:
          type: array
          description: A list of the items in the cart.
          items:
            $ref: '#/components/schemas/CheckoutItemWrapper'
        InStore:
          type: boolean
          description: "When `true`, indicates that the cart is to be completed by\
            \ a staff member and is to take place at one of the business’ physical\
            \ locations.<br />\r\nWhen `false`, indicates that the cart is to be completed\
            \ by a client from the business’ online store.<br />\r\nDefault: **false**"
        PromotionCode:
          type: string
          description: Promotion code to be applied to the cart.
        Payments:
          type: array
          description: A list of payment information objects to be applied to payment
            against the items in the cart.
          items:
            $ref: '#/components/schemas/CheckoutPaymentInfo'
        SendEmail:
          type: boolean
          description: "When `true`, sends a purchase receipt email to the client.\
            \ Note that all appropriate permissions and settings must be enabled for\
            \ the client to receive an email.<br />\r\nDefault: **false**"
        LocationId:
          type: integer
          description: "The location ID to be used for pulling business mode prices\
            \ and taxes. If no location ID is supplied, it defaults to the online\
            \ store, represented by a null value. \r\nDefault: **null** (the online\
            \ store)"
          format: int32
        Image:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: The byte array data of the signature image.
          format: byte
        ImageFileName:
          type: string
          description: The name of the signature image being uploaded.
    CheckoutItemWrapper:
      type: object
      properties:
        Item:
          $ref: '#/components/schemas/CheckoutItem'
        DiscountAmount:
          type: number
          description: The amount the item is discounted. This parameter is ignored
            for packages.
          format: double
        AppointmentBookingRequests:
          type: array
          description: A list of appointments to be booked then paid for by this item.
            This parameter applies only to pricing option items.
          items:
            $ref: '#/components/schemas/CheckoutAppointmentBookingRequest'
        EnrollmentIds:
          type: array
          description: A list of enrollment IDs that this item is to pay for. This
            parameter applies only to pricing option items.
          items:
            type: integer
            format: int32
        ClassIds:
          type: array
          description: A list of class IDs that this item is to pay for. This parameter
            applies only to pricing option items.
          items:
            type: integer
            format: int32
        CourseIds:
          type: array
          description: A list of course IDs that this item is to pay for. This parameter
            applies only to pricing option items.
          items:
            type: integer
            format: int64
        VisitIds:
          type: array
          description: A list of visit IDs that this item is to pay for. This parameter
            applies only to pricing option items.
          items:
            type: integer
            format: int64
        AppointmentIds:
          type: array
          description: A list of appointment IDs that this item is to reconcile.
          items:
            type: integer
            format: int64
        Id:
          type: integer
          description: The item’s unique ID within the cart.
          format: int32
        Quantity:
          type: integer
          description: The number of this item to be purchased.
          format: int32
    CheckoutPaymentInfo:
      type: object
      properties:
        Type:
          type: string
          description: "The type of payment. Possible values are:\r\n* CreditCard\
            \ - Indicates that this payment item is a credit card.\r\n* StoredCard\
            \ - Indicates that this payment item is a credit card stored on the client’\
            s account.\r\n* EncryptedTrackData - Indicates that this payment item\
            \ is a swiped credit card.\r\n* TrackData - Indicates that this payment\
            \ item is a swiped credit card.\r\n* DebitAccount - Indicates that funds\
            \ should be debited from the client’s account.\r\n* Custom - Indicates\
            \ that this payment item is a custom payment method configured by the\
            \ business.\r\n* Comp - Indicates that this payment item is making all\
            \ or part of the cart’s total complementary.\r\n* Cash - Indicates that\
            \ this payment item is cash.\r\n* Check - Indicates that this payment\
            \ item is a check.\r\n* GiftCard - Indicates that this payment item is\
            \ a gift card."
        Metadata:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Contains information about the cart’s payments. See [Payment
            Item Metadata](https://developers.mindbodyonline.com/PublicDocumentation/V6#payment-item-metadata)
            for more information.
    CheckoutItem:
      type: object
      properties:
        Type:
          type: string
          description: "The type of item. Possible values are:\r\n* Service - Indicates\
            \ that this item is a pricing option.\r\n* Product - Indicates that this\
            \ item is a retail product.\r\n* Package - Indicates that this item is\
            \ a package.\r\n* Tip - Indicates that this item is a tip."
        Metadata:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Contains information about the item to be purchased. See [Cart
            Item Metadata](https://developers.mindbodyonline.com/PublicDocumentation/V6#cart-item-metadata)
            for more information.
    CheckoutAppointmentBookingRequest:
      type: object
      properties:
        StaffId:
          type: integer
          description: The ID of the staff member who is to provide the service being
            booked.
          format: int64
        LocationId:
          type: integer
          description: The ID of the location where the appointment is to take place.
          format: int32
        SessionTypeId:
          type: integer
          description: The ID of the session type of this appointment.
          format: int32
        Resources:
          type: array
          description: Contains information about the resources to be used for the
            appointment.
          items:
            $ref: '#/components/schemas/Resource'
        StartDateTime:
          type: string
          description: The date and time that the appointment is to start in the business’
            timezone. This value must be passed in the format yyyy-mm-ddThh:mm:ss.
          format: date-time
        EndDateTime:
          type: string
          description: The date and time that the appointment is to end in the business’
            timezone. This value must be passed in the format yyyy-mm-ddThh:mm:ss.
          format: date-time
        ProviderId:
          type: string
          description: The National Provider Identifier (NPI) of the staff member
            who is to provide the service. For an explanation of Provider IDs, see
            [Provider IDs](https://support.mindbodyonline.com/s/article/204075743-Provider-IDs?language=en_US).
    GetGiftCardsRequest:
      type: object
      properties:
        LocationId:
          type: integer
          description: When included, returns gift cards that are sold at the provided
            location ID.
          format: int32
        SoldOnline:
          type: boolean
          description: "When `true`, only returns gift cards that are sold online.<br\
            \ />\r\nDefault: **false**"
        Ids:
          type: array
          description: "Filters the results to the requested gift card IDs.<br />\r\
            \nDefault: **all** gift cards."
          items:
            type: integer
            format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetGiftCardResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        GiftCards:
          type: array
          description: Contains information about the gift cards.
          items:
            $ref: '#/components/schemas/GiftCard'
    GiftCard:
      type: object
      properties:
        Id:
          type: integer
          description: The gift card's `ProductID`.
          format: int32
        LocationIds:
          type: array
          description: The IDs of the locations where the gift card is sold.
          items:
            type: integer
            format: int32
        Description:
          type: string
          description: A description of the gift card.
        EditableByConsumer:
          type: boolean
          description: When `true`, indicates that the gift card can be edited by
            the client.
        CardValue:
          type: number
          description: The value of the gift card.
          format: double
        SalePrice:
          type: number
          description: The sale price of the gift card, if applicable.
          format: double
        SoldOnline:
          type: boolean
          description: When `true`, indicates that the gift card is sold online.
        MembershipRestrictionIds:
          type: array
          description: A list of IDs for membership restrictions, if this card is
            restricted to members with certain types of memberships.
          items:
            type: integer
            format: int32
        GiftCardTerms:
          type: string
          description: The terms of the gift card.
        ContactInfo:
          type: string
          description: Contact information for the gift card.
        DisplayLogo:
          type: boolean
          description: When `true`, indicates that the logo should be displayed on
            the gift card.
        Layouts:
          type: array
          description: A list of layouts available for the gift card.
          items:
            $ref: '#/components/schemas/GiftCardLayout'
    GiftCardLayout:
      type: object
      properties:
        LayoutId:
          type: integer
          description: The ID of the layout.
          format: int32
        LayoutName:
          type: string
          description: The name of the layout.
      description: Gift card layout
    GetServicesRequest:
      type: object
      properties:
        ProgramIds:
          type: array
          description: Filters to pricing options with the specified program IDs.
          items:
            type: integer
            format: int32
        SessionTypeIds:
          type: array
          description: Filters to the pricing options with the specified session types
            IDs.
          items:
            type: integer
            format: int32
        ServiceIds:
          type: array
          description: Filters to the pricing options with the specified IDs. In this
            context, service and pricing option are used interchangeably.
          items:
            type: string
        ClassId:
          type: integer
          description: Filters to the pricing options for the specified class ID.
          format: int32
        ClassScheduleId:
          type: integer
          description: Filters to the pricing options for the specified class schedule
            ID.
          format: int32
        SellOnline:
          type: boolean
          description: "When `true`, filters to the pricing options that can be sold\
            \ online.<br />\r\nDefault: **false**"
        LocationId:
          type: integer
          description: When specified, for each returned pricing option, `TaxRate`
            and `TaxIncluded` are calculated according to the specified location.
            Note that this does not filter results to only services provided at the
            given location, and for locations where Value-Added Tax (VAT) rules apply,
            the `TaxRate` is set to zero.
          format: int32
        HideRelatedPrograms:
          type: boolean
          description: "When `true`, indicates that pricing options of related programs\
            \ are omitted from the response.<br />\r\nDefault: **false**"
        StaffId:
          type: integer
          description: Sets `Price` and `OnlinePrice` to the particular pricing of
            a specific staff member, if allowed by the business.
          format: int64
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetServicesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Services:
          type: array
          description: Contains information about the services.
          items:
            $ref: '#/components/schemas/Service'
    Service:
      type: object
      properties:
        Price:
          type: number
          description: The cost of the pricing option when sold at a physical location.
          format: double
        OnlinePrice:
          type: number
          description: The cost of the pricing option when sold online.
          format: double
        TaxIncluded:
          type: number
          description: The amount of tax included in the price, if inclusive pricing
            is enabled.
          format: double
        ProgramId:
          type: integer
          description: The ID of the program that this pricing option applies to.
          format: int32
        TaxRate:
          type: number
          description: The tax rate applied to the pricing option. This field is populated
            only when you include a `LocationID` in the request.
          format: double
        ProductId:
          type: integer
          description: The unique ID of the pricing option.
          format: int32
        Id:
          type: string
          description: The barcode ID of the pricing option.
        Name:
          type: string
          description: The name of the pricing option.
        Count:
          type: integer
          description: The initial count of usages available for the pricing option.
          format: int32
    GetProductsRequest:
      type: object
      properties:
        ProductIds:
          type: array
          description: An ID filter for products.
          items:
            type: string
        SearchText:
          type: string
          description: A search filter, used for searching by term.
        CategoryIds:
          type: array
          description: A list of category IDs to filter by.
          items:
            type: integer
            format: int32
        SubCategoryIds:
          type: array
          description: A list of subcategory IDs to filter by.
          items:
            type: integer
            format: int32
        SellOnline:
          type: boolean
          description: "When `true`, only products that can be sold online are returned.<br\
            \ />\r\nWhen `false`, all products are returned.<br />\r\nDefault: **false**"
        LocationId:
          type: integer
          description: "The location ID to use to determine the tax for the products\
            \ that this request returns.<br />\r\nDefault: **online store**"
          format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetProductsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Products:
          type: array
          description: Contains information about the products.
          items:
            $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        Price:
          type: number
          description: The price of the product.
          format: double
        TaxIncluded:
          type: number
          description: If tax inclusive-pricing is enabled, this field shows how much
            tax was added to the price.
          format: double
        TaxRate:
          type: number
          description: The tax rate that was applied to this purchase.
          format: double
        Id:
          type: string
          description: The unique ID of the product variant, for example, a particular
            size and color combination.
        GroupId:
          type: integer
          description: The unique ID of the product group.
          format: int32
        Name:
          type: string
          description: The name of the product.
        OnlinePrice:
          type: number
          description: The online price of the product.
          format: double
        ShortDescription:
          type: string
          description: A short description of the product.
        LongDescription:
          type: string
          description: A longer description of the product.
        Color:
          $ref: '#/components/schemas/Color'
        Size:
          $ref: '#/components/schemas/Size'
    Color:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the product color.
          format: int32
        Name:
          type: string
          description: The name of the product color.
      description: A color used by products.
    Size:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the product size.
          format: int32
        Name:
          type: string
          description: The name of the product size.
    GetContractsRequest:
      required:
      - LocationId
      type: object
      properties:
        ContractIds:
          type: array
          description: When included, the response only contains details about the
            specified contract IDs.
          items:
            type: integer
            format: int32
        SoldOnline:
          type: boolean
          description: "When `true`, the response only contains details about contracts\
            \ and AutoPay options that can be sold online.<br />\r\nWhen `false`,\
            \ only contracts that are not intended to be sold online are returned.<br\
            \ />\r\nDefault: **all contracts**"
        LocationId:
          type: integer
          description: The ID of the location that has the requested contracts and
            AutoPay options.
          format: int32
        ConsumerId:
          type: integer
          description: The ID of the client.
          format: int64
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetContractsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Contracts:
          type: array
          description: Contains information about each contract.
          items:
            $ref: '#/components/schemas/Contract'
    Contract:
      type: object
      properties:
        Id:
          type: integer
          description: The contract’s ID at the subscriber’s business.
          format: int32
        Name:
          type: string
          description: The name of the contract.
        Description:
          type: string
          description: A description of the contract.
        AssignsMembershipId:
          type: integer
          description: The ID of the membership that was assigned to the client when
            the client signed up for a contract.
          format: int32
        AssignsMembershipName:
          type: string
          description: The name of the membership that was assigned to the client
            when the client signed up for this contract.
        SoldOnline:
          type: boolean
          description: "When `true`, indicates that this membership is intended to\
            \ be shown to clients in client experiences.<br />\r\nWhen `false`, this\
            \ contract should only be shown to staff members."
        ContractItems:
          type: array
          description: Contains information about the items in the contract.
          items:
            $ref: '#/components/schemas/ContractItem'
        IntroOffer:
          type: string
          description: "Defines whether this contract is treated as an introductory\
            \ offer. If this is an introductory offer, then clients are always charged\
            \ a set number of times rather than month to month, using their AutoPays.\
            \ Possible values are:\r\n* None\r\n* NewConsumer\r\n* NewAndReturningConsumer"
        AutopaySchedule:
          $ref: '#/components/schemas/AutopaySchedule'
        NumberOfAutopays:
          type: integer
          description: The number of times that the AutoPay is to be run. This value
            is null if `FrequencyType` is `MonthToMonth`.
          format: int32
        AutopayTriggerType:
          type: string
          description: "Defines whether the AutoPay, if applicable to this contract,\
            \ runs on a set schedule or when the pricing option runs out or expires.\
            \ Possible values are:\r\n* OnSetSchedule\r\n* PricingOptionRunsOutOrExpires"
        ActionUponCompletionOfAutopays:
          type: string
          description: "The renewal action to be taken when this AutoPay is completed.\
            \ Possible values are:\r\n* ContractExpires\r\n* ContractAutomaticallyRenews"
        ClientsChargedOn:
          type: string
          description: "The value that indicates when clients are charged. Possible\
            \ values are:\r\n* OnSaleDate\r\n* FirstOfTheMonth\r\n* FifteenthOfTheMonth\r\
            \n* LastDayOfTheMonth\r\n* FirstOrFifteenthOfTheMonth\r\n* FirstOrSixteenthOfTheMonth\r\
            \n* FifteenthOrEndOfTheMonth\r\n* SpecificDate"
        ClientsChargedOnSpecificDate:
          type: string
          description: If `ClientsChargedOn` is defined as a specific date, this property
            holds the value of that date. Otherwise, this property is null.
          format: date-time
        DiscountAmount:
          type: number
          description: The calculated discount applied to the items in this contract.
          format: double
        DepositAmount:
          type: number
          description: The amount of the deposit required for this contract.
          format: double
        FirstAutopayFree:
          type: boolean
          description: When `true`, indicates that the first payment for the AutoPay
            is free.
        LastAutopayFree:
          type: boolean
          description: When `true`, indicates that the last payment for the AutoPay
            is free.
        ClientTerminateOnline:
          type: boolean
          description: When `true`, indicates that the client can terminate this contract
            on the Internet.
        MembershipTypeRestrictions:
          type: array
          description: Contains information about the memberships that can purchase
            this contract. If null, then no membership restrictions exist, and anyone
            can purchase the contract.
          items:
            $ref: '#/components/schemas/MembershipTypeRestriction'
        LocationPurchaseRestrictionIds:
          type: array
          description: The IDs of the locations where this contract may be sold. If
            there are no restrictions, this value is null.
          items:
            type: integer
            format: int32
        LocationPurchaseRestrictionNames:
          type: array
          description: Location names where the contract may be purchased. If this
            value is null, there are no restrictions.
          items:
            type: string
        AgreementTerms:
          type: string
          description: Business-defined terms and conditions for the contract.
        RequiresElectronicConfirmation:
          type: boolean
          description: When `true`, clients who purchase the contract are prompted
            to agree to the terms of the contract the next time that they log in.
        AutopayEnabled:
          type: boolean
          description: When `true`, this contract establishes an AutoPay on the client’s
            account.
        FirstPaymentAmountSubtotal:
          type: number
          description: The subtotal of the amount that the client is to be charged
            when signing up for the contract.
          format: double
        FirstPaymentAmountTax:
          type: number
          description: The amount of tax that the client is to be charged when signing
            up for the contract.
          format: double
        FirstPaymentAmountTotal:
          type: number
          description: The total amount that the client is to be charged when signing
            up for the contract.
          format: double
        RecurringPaymentAmountSubtotal:
          type: number
          description: The subtotal amount that the client is to be charged on an
            ongoing basis.
          format: double
        RecurringPaymentAmountTax:
          type: number
          description: The amount of tax the client is to be charged on an ongoing
            basis.
          format: double
        RecurringPaymentAmountTotal:
          type: number
          description: The total amount that the client is to be charged on an ongoing
            basis.
          format: double
        TotalContractAmountSubtotal:
          type: number
          description: The subtotal amount that the client is to be charged over the
            lifespan of the contract.
          format: double
        TotalContractAmountTax:
          type: number
          description: The total amount of tax the client is to be charged over the
            lifespan of the contract.
          format: double
        TotalContractAmountTotal:
          type: number
          description: The total amount the client is to be charged over the lifespan
            of the contract.
          format: double
    ContractItem:
      type: object
      properties:
        Id:
          type: string
          description: The ID of the item.
        Name:
          type: string
          description: The name of the item.
        Description:
          type: string
          description: A description of the item.
        Type:
          type: string
          description: The type of the item.
        Price:
          type: number
          description: The price of the item.
          format: double
        Quantity:
          type: integer
          description: The quantity of the item.
          format: int32
        OneTimeItem:
          type: boolean
          description: "When `true`, indicates that the item is charged only once.<br\
            \ />\r\nWhen `false`, indicates that the item is charged multiple times."
    AutopaySchedule:
      type: object
      properties:
        FrequencyType:
          type: string
          description: "Defines how often clients are charged. Possible values are:\r\
            \n* SetNumberOfAutopays\r\n* MonthToMonth"
        FrequencyValue:
          type: integer
          description: The interval of AutoPay frequency, combined with `FrequencyTimeUnit`.
            This value is null if `FrequencyType` is `MonthToMonth`.
          format: int32
        FrequencyTimeUnit:
          type: string
          description: "Defines the time unit that sets how often to run the AutoPay,\
            \ combined with `FrequencyValue`. This value is null if `FrequencyType`\
            \ is `MonthToMonth`. Possible values are:\r\n* Weekly\r\n* Monthly\r\n\
            * Yearly"
    MembershipTypeRestriction:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the membership that is allowed to purchase the contract.
          format: int32
        Name:
          type: string
          description: The name of the membership type.
    GetCustomPaymentMethodsRequest:
      type: object
      properties:
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetCustomPaymentMethodsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        PaymentMethods:
          type: array
          description: Contains information about the custom payment methods.
          items:
            $ref: '#/components/schemas/CustomPaymentMethod'
    CustomPaymentMethod:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the custom payment method.
          format: int32
        Name:
          type: string
          description: The name of the custom payment method.
    PurchaseGiftCardRequest:
      required:
      - GiftCardId
      - LocationId
      - PurchaserClientId
      type: object
      properties:
        Test:
          type: boolean
          description: "When `true`, allows you to test the request without affecting\
            \ the database.<br />\r\nWhen `false`, the request is carried out and\
            \ the database is affected."
        LocationId:
          type: integer
          description: The ID of the location where the gift card is being sold.
          format: int32
        LayoutId:
          type: integer
          description: The ID of the layout used for the gift card’s image.
          format: int32
        PurchaserClientId:
          type: string
          description: The RSSID of the client who is purchasing the gift card.
        GiftCardId:
          type: integer
          description: The product ID of the gift card being purchased.
          format: int32
        SendEmailReceipt:
          type: boolean
          description: "When `true`, indicates that a purchase receipt email should\
            \ be sent to the purchasing client, if all settings are correctly configured.<br\
            \ />\r\nWhen `false`, no email is sent to the purchaser."
        RecipientEmail:
          type: string
          description: "The email address to send the gift card image to. This parameter\
            \ is required if the `LayoutId` is not 0.<br />\r\nMaximum length: **100**"
        RecipientName:
          type: string
          description: "The name of the person who is to receive the gift card. This\
            \ parameter is required if the `LayoutId` is not 0.<br />\r\nMaximum length:\
            \ **20**"
        Title:
          type: string
          description: "The text to use as the title of the gift card, for example:\
            \ Happy Birthday, Maria! This parameter is required if the `LayoutId`\
            \ is not 0.<br />\r\nMaximum length: **20**"
        GiftMessage:
          type: string
          description: "A personal message to include in the gift card.<br />\r\n\
            Maximum length: **300**"
        DeliveryDate:
          type: string
          description: "The date that the gift card’s image is to be delivered to\
            \ the recipient. This parameter cannot be set to a date in the past. This\
            \ parameter is required if the `LayoutId` is not 0.\r\nDefault: **today**\r\
            \nMinimum: **today**"
          format: date-time
        PaymentInfo:
          $ref: '#/components/schemas/CheckoutPaymentInfo'
        SalesRepId:
          type: integer
          description: The ID of the staff member who is to be marked as the sales
            rep for this gift card purchase.
          format: int64
    PurchaseGiftCardResponse:
      type: object
      properties:
        BarcodeId:
          type: string
          description: The barcode ID assigned to the purchased gift card.
        Value:
          type: number
          description: The monetary value of the gift card.
          format: double
        AmountPaid:
          type: number
          description: The amount paid for the gift card by the purchaser.
          format: double
        FromName:
          type: string
          description: The name of the purchaser.
        LayoutId:
          type: integer
          description: The ID of the layout used for this gift card.
          format: int32
        EmailReceipt:
          type: boolean
          description: Whether or not an email receipt was sent to the purchaser.
            If true, a receipt was sent.
        PurchaserClientId:
          type: string
          description: The client ID of the purchaser.
        PurchaserEmail:
          type: string
          description: The purchaser’s email address.
        RecipientEmail:
          type: string
          description: The recipient’s email address.
        SaleId:
          type: integer
          description: The sale ID of the gift card.
          format: int64
    GetPackagesRequest:
      type: object
      properties:
        PackageIds:
          type: array
          description: A list of the packages IDs to filter by.
          items:
            type: integer
            format: int32
        SellOnline:
          type: boolean
          description: "When `true`, only returns products that can be sold online.<br\
            \ />\r\nWhen `false`, all products are returned.<br />\r\nDefault: **false**"
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetPackagesResponse:
      type: object
      properties:
        Packages:
          type: array
          description: Contains information about the resulting packages.
          items:
            $ref: '#/components/schemas/Package'
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
    Package:
      type: object
      properties:
        Id:
          type: integer
          description: The ID of the package.
          format: int32
        Name:
          type: string
          description: The name of the package.
        DiscountPercentage:
          type: number
          description: The discount percentage applied to the package.
          format: double
        SellOnline:
          type: boolean
          description: "When `true`, only products that can be sold online are returned.<br\
            \ />\r\nWhen `false`, all products are returned."
        Services:
          type: array
          description: Information about the services in the packages.
          items:
            $ref: '#/components/schemas/Service'
        Products:
          type: array
          description: Information about the products in the packages.
          items:
            $ref: '#/components/schemas/Product'
    GetGiftCardBalanceResponse:
      type: object
      properties:
        BarcodeId:
          type: string
          description: The gift card's barcode ID.
        RemainingBalance:
          type: number
          description: The gift card's remaining balance.
          format: double
    GetSitesRequest:
      type: object
      properties:
        SiteIds:
          type: array
          description: List of the requested site IDs. When omitted, returns all sites
            that the source has access to.
          items:
            type: integer
            format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetSitesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Sites:
          type: array
          description: Contains information about the sites.
          items:
            $ref: '#/components/schemas/Site'
    Site:
      type: object
      properties:
        AcceptsAmericanExpress:
          type: boolean
          description: "When `true`, indicates that this site accepts American Express\
            \ cards.<br />\r\nWhen `false`, indicates that this site does not accept\
            \ American Express credit cards."
        AcceptsDiscover:
          type: boolean
          description: "When `true`, indicates that this site accepts Discover cards.<br\
            \ />\r\nWhen `false`, indicates that this site does not accept Discover\
            \ credit cards."
        AcceptsMasterCard:
          type: boolean
          description: "When `true`, indicates that this site accepts MasterCard cards.<br\
            \ />\r\nWhen `false`, indicates that this site does not accept MasterCard\
            \ credit cards."
        AcceptsVisa:
          type: boolean
          description: "When `true`, indicates that this site accepts Visa cards.<br\
            \ />\r\nWhen `false`, indicates that this site does not accept Visa credit\
            \ cards."
        AllowsDashboardAccess:
          type: boolean
          description: "When `true`, indicates that this site allows access to its\
            \ dashboard.<br />\r\nWhen `false`, indicates that this site does not\
            \ allow access to its dashboard."
        ContactEmail:
          type: string
          description: The site’s email address.
        Description:
          type: string
          description: A description of the site.
        Id:
          type: integer
          description: The site ID.
          format: int32
        LogoUrl:
          type: string
          description: The URL to the site’s logo.
        Name:
          type: string
          description: The name of the site.
        PageColor1:
          type: string
          description: A hex code for a color the business owner uses in marketing.
            This color can be used to set a theme for an integration so that it matches
            the configured color-scheme for the business.
        PageColor2:
          type: string
          description: The hex code for a second color, to be used in the same manner
            as `pageColor1`.
        PageColor3:
          type: string
          description: The hex code for a third color, to be used in the same manner
            as `pageColor1`.
        PageColor4:
          type: string
          description: The hex code for a fourth color, to be used in the same manner
            as `pageColor1`.
        PricingLevel:
          type: string
          description: "The MINDBODY pricing level for the business. Possible values\
            \ are:\r\nAccelerate - The business is on MINDBODY’s Accelerate pricing\
            \ tier.\r\nGrow - The business is on MINDBODY’s Essential pricing tier.\r\
            \nLegacy - The business is on an older MINDBODY pricing tier that is no\
            \ longer offered.\r\nListing - The business is on an older MINDBODY pricing\
            \ tier that is no longer offered.\r\nPro - The business is on an older\
            \ MINDBODY pricing tier that is no longer offered.\r\nSolo - The business\
            \ is on an older MINDBODY pricing tier that is no longer offered.\r\n\
            Ultimate - The business is on MINDBODY’s Ultimate pricing tier."
        SmsPackageEnabled:
          type: boolean
          description: "When `true`, indicates that the business uses SMS text messages\
            \ to communicate with its clients.<br />\r\nWhen `false`, indicates that\
            \ the business does not use SMS text messages to communicate with its\
            \ clients."
        TaxInclusivePrices:
          type: boolean
          description: "When `true`, indicates that the total includes tax.<br />\r\
            \nWhen `false`, indicates that the total does not include tax."
        CurrencyIsoCode:
          type: string
          description: The currency ISO code for the site.
        CountryCode:
          type: string
          description: The country code for the site.
        TimeZone:
          type: string
          description: The time zone the site is located in.
        AcceptsDirectDebit:
          type: boolean
          description: "When `true`, indicates that direct debit can be used by clients\
            \ at this site.<br />\r\nWhen `false`, indicates that direct debit can\
            \ not by used by clients at this site."
    GetSessionTypesRequest:
      type: object
      properties:
        ProgramIDs:
          type: array
          description: Filters results to session types that belong to one of the
            given program IDs. If omitted, all program IDs return.
          items:
            type: integer
            format: int32
        OnlineOnly:
          type: boolean
          description: "When `true`, indicates that only the session types that can\
            \ be booked online should be returned.<br />\r\nDefault: **false**"
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetSessionTypesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        SessionTypes:
          type: array
          description: Contains information about sessions.
          items:
            $ref: '#/components/schemas/SessionType'
    GetLocationsRequest:
      type: object
      properties:
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetLocationsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Locations:
          type: array
          description: Contains information about the locations.
          items:
            $ref: '#/components/schemas/Location'
    GetProgramsRequest:
      type: object
      properties:
        ScheduleType:
          type: string
          description: A schedule type used to filter the returned results.
          enum:
          - All
          - Class
          - Enrollment
          - Appointment
          - Resource
          - Media
          - Arrival
        OnlineOnly:
          type: boolean
          description: "If `true`, filters results to show only those programs that\
            \ are shown online.<br />\r\nIf `false`, all programs are returned.<br\
            \ />\r\nDefault: **false**"
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetProgramsResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Programs:
          type: array
          description: Contains information about the programs.
          items:
            $ref: '#/components/schemas/Program'
    GetResourcesRequest:
      type: object
      properties:
        SessionTypeIds:
          type: array
          description: "List of session type IDs.<br />\r\nDefault: **all**"
          items:
            type: integer
            format: int32
        LocationId:
          type: integer
          description: "The location of the resource. This parameter is ignored if\
            \ `EndDateTime` or `LocationID` is not set.<br />\r\nDefault: **all**"
          format: int32
        StartDateTime:
          type: string
          description: The time the resource starts. This parameter is ignored if
            `EndDateTime` or `LocationID` is not set.
          format: date-time
        EndDateTime:
          type: string
          description: The time the resource ends. This parameter is ignored if `EndDateTime`
            or `LocationID` is not set.
          format: date-time
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetResourcesResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        Resources:
          type: array
          description: Contains information about resources as the business.
          items:
            $ref: '#/components/schemas/Resource'
    GetActivationCodeResponse:
      type: object
      properties:
        ActivationCode:
          type: string
          description: An activation code used to provide access to a site’s business
            data through MINDBODY.
        ActivationLink:
          type: string
          description: A link to the Manage Credentials screen.
    GetMembershipsRequest:
      type: object
      properties:
        MembershipIds:
          type: array
          description: Filters results to memberships that belong to one of the given
            membership IDs. If omitted, all memberships are returned.
          items:
            type: integer
            format: int32
    GetMembershipsResponse:
      type: object
      properties:
        Memberships:
          type: array
          description: Details about the memberships.
          items:
            $ref: '#/components/schemas/Membership'
    Membership:
      type: object
      properties:
        MembershipId:
          type: integer
          description: The membership id.
          format: int32
        MembershipName:
          type: string
          description: The membership name.
        Priority:
          type: integer
          description: The priority/sort order.
          format: int32
        MemberRetailDiscount:
          type: number
          description: The membership discount for retail as a percentage.
          format: double
        MemberServiceDiscount:
          type: number
          description: The membership discount for services as a percentage.
          format: double
        AllowClientsToScheduleUnpaid:
          type: boolean
          description: Allow clients in this membership to schedule unpaid.
        OnlineBookingRestrictedToMembersOnly:
          type: array
          description: List of programs that are restricted to clients in this membership
            only.
          items:
            $ref: '#/components/schemas/ProgramMembership'
        DayOfMonthSchedulingOpensForNextMonth:
          type: integer
          description: Day of month scheduling opens for next month.  Unrestricted
            is a null value.
          format: int32
        RestrictSelfSignInToMembersOnly:
          type: boolean
          description: Restrict self sign in to members only.
        AllowMembersToBookAppointmentsWithoutPaying:
          type: boolean
          description: Allow members to book appointments without paying.
        AllowMembersToPurchaseNonMembersServices:
          type: boolean
          description: Allow members to purchase non-members services.
        AllowMembersToPurchaseNonMembersProducts:
          type: boolean
          description: Allow members to purchase non-members products.
        IsActive:
          type: boolean
          description: Indicates if the membership is active.
    ProgramMembership:
      type: object
      properties:
        Id:
          type: integer
          description: The service category’s ID.
          format: int32
        Name:
          type: string
          description: The name of this service category.
    GetStaffRequest:
      type: object
      properties:
        StaffIds:
          type: array
          description: A list of the requested staff IDs.
          items:
            type: integer
            format: int64
        Filters:
          type: array
          description: "Filters to apply to the search. Possible values are:\r\n*\
            \ StaffViewable\r\n* AppointmentInstructor\r\n* ClassInstructor\r\n* Male\r\
            \n* Female"
          items:
            type: string
        SessionTypeId:
          type: integer
          description: Return only staff members that are available for the specified
            session type. You must supply a valid `StartDateTime` and `LocationID`
            to use this parameter.
          format: int32
        StartDateTime:
          type: string
          description: Return only staff members that are available at the specified
            date and time. You must supply a valid `SessionTypeID` and `LocationID`
            to use this parameter.
          format: date-time
        LocationId:
          type: integer
          description: Return only staff members that are available at the specified
            location. You must supply a valid `SessionTypeID` and `StartDateTime`
            to use this parameter.
          format: int32
        Limit:
          type: integer
          description: Number of results to include, defaults to 100
          format: int32
        Offset:
          type: integer
          description: Page offset, defaults to 0.
          format: int32
    GetStaffResponse:
      type: object
      properties:
        PaginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
        StaffMembers:
          type: array
          description: A list of staff members.
          items:
            $ref: '#/components/schemas/Staff'
    GetStaffPermissionsRequest:
      required:
      - StaffId
      type: object
      properties:
        StaffId:
          type: integer
          description: The ID of the staff member whose permissions you want to return.
          format: int64
    GetStaffPermissionsResponse:
      type: object
      properties:
        UserGroup:
          $ref: '#/components/schemas/StaffPermissionGroup'
    StaffPermissionGroup:
      type: object
      properties:
        PermissionGroupName:
          type: string
          description: The name of the permission group.
        IpRestricted:
          type: boolean
          description: "When `true`, the staff member’s permissions are restricted\
            \ to specific IP addresses.<br />\r\nWhen `false`, the staff member’s\
            \ permissions are not restricted to specific IP addresses."
        AllowedPermissions:
          type: array
          description: A list of the permissions allowed to the staff member. See
            [Permission Values](https://developers.mindbodyonline.com/PublicDocumentation/V6#epermission-values)
            for descriptions of the possible permissions.
          items:
            type: string
            enum:
            - ManageClassAndEventDescriptions
            - ManageClassSchedules
            - ScheduleFreeClassesAndEvents
            - ScheduleResourcesForClassesAndEvents
            - SubstituteClassAndEventTeachers
            - BulkEditClassSchedules
            - AddStaffMembers
            - ManagePersonalInfoForStaff
            - ManageStaffSettings
            - ManageStaffLogins
            - ManageStaffSchedules
            - ManageStaffPayRates
            - AccessBusinessInformationScreen
            - AccessGeneralSetupOptionsScreen
            - AccessNewsEventsScreen
            - ManageHolidays
            - ClassAndEventOptionsScreen
            - AppointmentOptionsScreen
            - AccessMediaManagementScreen
            - AccessMembershipSetupScreen
            - ManagePaymentMethods
            - ManageRoomNumbers
            - AccessResourceManagementScreen
            - AccessResourcesSchedulingTab
            - AccessLinksScreen
            - BulkCancelClientReservations
            - FindDuplicateClients
            - MergeDuplicateClients
            - ManageAutoEmails
            - ManageRevenueCategoriesForServices
            - ManageRevenueCategoriesForProducts
            - AccessActiveSessionTimesScreen
            - AccessClassSessionTypeScreens
            - AccessServiceCategoriesScreen
            - ManageSubscriberPricing
            - AddIntroOffersOnAcquisitionDashboard
            - ManageMindbodyNetworkSettings
            - ManageProducts
            - ViewProductCost
            - ManageMembershipSettingsForPricing
            - ManagePromotionCodes
            - EditSales
            - PrintProductBarcodes
            - MakeSales
            - AddProductsOnRetailScreen
            - EditSaleDateOnRetailScreen
            - EditSalePriceCountOnRetailScreen
            - EditActivationDateOnRetailScreen
            - ApplyCustomDiscountsOnRetailScreen
            - PayForAnotherClientOnRetailScreen
            - VoidEditPastSales
            - RefundSales
            - RefundSalesToCreditCards
            - LocationSwitching
            - PullReportsForAllLocations
            - LogInventory
            - AdjustInventory
            - TransferInventory
            - ManagePurchaseOrders
            - ManageLocationLocalization
            - ManagePermissionGroups
            - ManageConstantContactSettings
            - AccessServicesPricingScreen
            - ManageSemesters
            - ManageRetentionMarketing
            - ManageSubscriberSetupChecklist
            - ViewClassAndEventReservations
            - BookClassesAndEvents
            - BookClassesAndEventsInThePast
            - BookClassesAndEventsWithoutPayment
            - CancelClassesAndEvents
            - ManageClassNotes
            - ViewAppointmentSchedule
            - ViewPersonalAppointmentSchedule
            - EditPersonalAppointmentSchedule
            - ViewAppointmentDetails
            - ManageAppointmentRequests
            - BookAppointmentsForOtherStaffMembers
            - BookAppointmentsInThePast
            - ChangeAppointmentDetails
            - UseAnyAppointmentAsAnAddon
            - ChangeAppointmentDuration
            - CancelAppointments
            - ApplyPaymentToAppointments
            - CheckOutAppointments
            - OverrideAssignedPricing
            - ManageAppointmentColors
            - ViewAllLocationOnClientLookupScreen
            - AddClient
            - ViewClientProfileScreen
            - EditClientProfileScreen
            - AssignClientIndexes
            - ManageClientSuspensions
            - ViewClientPastVisits
            - ViewClientAccountAndPurchaseHistory
            - EditClientServiceDurationAndAssignedVisits
            - EditClientServiceSessionCount
            - IgnoreServiceCategoriesWhenReassigningPayment
            - ViewClientAutoPaySchedules
            - ManageClientAutoPaySchedules
            - ViewClientDocuments
            - AddClientDocuments
            - DeleteClientDocuments
            - ViewClientFutureVisits
            - ViewClientBillingInformation
            - EditClientBillingInformation
            - ManageClientLogins
            - UnassignClientGiftCards
            - IgnoreCancellationPolicy
            - LaunchSignInScreen
            - DeleteAndTerminateClientContracts
            - ReleaseContractDeposits
            - AutoRenewAndSuspendContracts
            - ManageClassTests
            - ScheduleClassTests
            - ManageClientRequiredFields
            - ManageClientAlerts
            - ManageClientTypesAndClientIndexes
            - ManageClientReferralTypes
            - ManageClientRelationshipTypes
            - ManageClientGenders
            - ClientAcquisitionAndAnalyticsDashboards
            - ViewRetentionMarketingDashboard
            - ExportReports
            - ManageTaggedClients
            - StaffPhoneBookReport
            - ScheduleAtAGlanceReportForAllStaff
            - PersonalScheduleAtAGlanceReport
            - AttendanceWithRevenueReport
            - CancellationsReport
            - PersonalCancellationsReport
            - AccountBalancesReport
            - BulkAutoPaySchedulingFromAccountBalancesReport
            - EventInvoicesReport
            - CashDrawerReportCurrentDate
            - CashDrawerReportAnyDate
            - DailyCloseoutReport
            - SalesReports
            - SalesBySupplierAndProductReports
            - PromoteFeesReport
            - GiftCardsReport
            - InventoryReports
            - MarketingReports
            - AnalysisReports
            - ClientIndexesReports
            - PayrollReportsForAllStaff
            - PersonalPayrollReports
            - StaffPerformanceReports
            - OnlineMetricsReport
            - RetentionManagementReport
            - EntryLogsReport
            - StaffActivityLogReport
            - MembershipReport
            - ManageOnlineOrdersReport
            - TasksReport
            - ClockSelfInAndOut
            - ClockOthersInAndOut
            - AccessTimeclockReport
            - ManageTimeClocks
            - ManageTimeClockTasks
            - ManageContactLogTypes
            - ViewContactLogs
            - AddContactLogs
            - EditOtherStaffMemberContactLogs
            - DeleteContactLogs
            - ContactLogAnalysisReport
            - SalesForecastReport
            - ViewAllClients
            - ManageClientSalesReps
            - CreateRetailTickets
            - EditRetailTickets
            - ManageTaskAssignments
            - MerchantAccountReports
            - VoidCreditCardTransactions
            - SettleCreditCardTransactions
            - UseStoredCreditCards
            - ManageAutoPays
            - ViewPersonalReviews
            - ViewOthersReviews
            - ViewClientNamesOnReviewReport
            - EmailClientsFromReviewReport
            - FlagReviewForRemoval
            - RespondPubliclyToReviews
        DeniedPermissions:
          type: array
          description: A list of the permissions that the staff member is not allowed
            to exercise. See [Permission Values](https://developers.mindbodyonline.com/PublicDocumentation/V6#epermission-values)
            for descriptions of the possible permissions.
          items:
            type: string
            enum:
            - ManageClassAndEventDescriptions
            - ManageClassSchedules
            - ScheduleFreeClassesAndEvents
            - ScheduleResourcesForClassesAndEvents
            - SubstituteClassAndEventTeachers
            - BulkEditClassSchedules
            - AddStaffMembers
            - ManagePersonalInfoForStaff
            - ManageStaffSettings
            - ManageStaffLogins
            - ManageStaffSchedules
            - ManageStaffPayRates
            - AccessBusinessInformationScreen
            - AccessGeneralSetupOptionsScreen
            - AccessNewsEventsScreen
            - ManageHolidays
            - ClassAndEventOptionsScreen
            - AppointmentOptionsScreen
            - AccessMediaManagementScreen
            - AccessMembershipSetupScreen
            - ManagePaymentMethods
            - ManageRoomNumbers
            - AccessResourceManagementScreen
            - AccessResourcesSchedulingTab
            - AccessLinksScreen
            - BulkCancelClientReservations
            - FindDuplicateClients
            - MergeDuplicateClients
            - ManageAutoEmails
            - ManageRevenueCategoriesForServices
            - ManageRevenueCategoriesForProducts
            - AccessActiveSessionTimesScreen
            - AccessClassSessionTypeScreens
            - AccessServiceCategoriesScreen
            - ManageSubscriberPricing
            - AddIntroOffersOnAcquisitionDashboard
            - ManageMindbodyNetworkSettings
            - ManageProducts
            - ViewProductCost
            - ManageMembershipSettingsForPricing
            - ManagePromotionCodes
            - EditSales
            - PrintProductBarcodes
            - MakeSales
            - AddProductsOnRetailScreen
            - EditSaleDateOnRetailScreen
            - EditSalePriceCountOnRetailScreen
            - EditActivationDateOnRetailScreen
            - ApplyCustomDiscountsOnRetailScreen
            - PayForAnotherClientOnRetailScreen
            - VoidEditPastSales
            - RefundSales
            - RefundSalesToCreditCards
            - LocationSwitching
            - PullReportsForAllLocations
            - LogInventory
            - AdjustInventory
            - TransferInventory
            - ManagePurchaseOrders
            - ManageLocationLocalization
            - ManagePermissionGroups
            - ManageConstantContactSettings
            - AccessServicesPricingScreen
            - ManageSemesters
            - ManageRetentionMarketing
            - ManageSubscriberSetupChecklist
            - ViewClassAndEventReservations
            - BookClassesAndEvents
            - BookClassesAndEventsInThePast
            - BookClassesAndEventsWithoutPayment
            - CancelClassesAndEvents
            - ManageClassNotes
            - ViewAppointmentSchedule
            - ViewPersonalAppointmentSchedule
            - EditPersonalAppointmentSchedule
            - ViewAppointmentDetails
            - ManageAppointmentRequests
            - BookAppointmentsForOtherStaffMembers
            - BookAppointmentsInThePast
            - ChangeAppointmentDetails
            - UseAnyAppointmentAsAnAddon
            - ChangeAppointmentDuration
            - CancelAppointments
            - ApplyPaymentToAppointments
            - CheckOutAppointments
            - OverrideAssignedPricing
            - ManageAppointmentColors
            - ViewAllLocationOnClientLookupScreen
            - AddClient
            - ViewClientProfileScreen
            - EditClientProfileScreen
            - AssignClientIndexes
            - ManageClientSuspensions
            - ViewClientPastVisits
            - ViewClientAccountAndPurchaseHistory
            - EditClientServiceDurationAndAssignedVisits
            - EditClientServiceSessionCount
            - IgnoreServiceCategoriesWhenReassigningPayment
            - ViewClientAutoPaySchedules
            - ManageClientAutoPaySchedules
            - ViewClientDocuments
            - AddClientDocuments
            - DeleteClientDocuments
            - ViewClientFutureVisits
            - ViewClientBillingInformation
            - EditClientBillingInformation
            - ManageClientLogins
            - UnassignClientGiftCards
            - IgnoreCancellationPolicy
            - LaunchSignInScreen
            - DeleteAndTerminateClientContracts
            - ReleaseContractDeposits
            - AutoRenewAndSuspendContracts
            - ManageClassTests
            - ScheduleClassTests
            - ManageClientRequiredFields
            - ManageClientAlerts
            - ManageClientTypesAndClientIndexes
            - ManageClientReferralTypes
            - ManageClientRelationshipTypes
            - ManageClientGenders
            - ClientAcquisitionAndAnalyticsDashboards
            - ViewRetentionMarketingDashboard
            - ExportReports
            - ManageTaggedClients
            - StaffPhoneBookReport
            - ScheduleAtAGlanceReportForAllStaff
            - PersonalScheduleAtAGlanceReport
            - AttendanceWithRevenueReport
            - CancellationsReport
            - PersonalCancellationsReport
            - AccountBalancesReport
            - BulkAutoPaySchedulingFromAccountBalancesReport
            - EventInvoicesReport
            - CashDrawerReportCurrentDate
            - CashDrawerReportAnyDate
            - DailyCloseoutReport
            - SalesReports
            - SalesBySupplierAndProductReports
            - PromoteFeesReport
            - GiftCardsReport
            - InventoryReports
            - MarketingReports
            - AnalysisReports
            - ClientIndexesReports
            - PayrollReportsForAllStaff
            - PersonalPayrollReports
            - StaffPerformanceReports
            - OnlineMetricsReport
            - RetentionManagementReport
            - EntryLogsReport
            - StaffActivityLogReport
            - MembershipReport
            - ManageOnlineOrdersReport
            - TasksReport
            - ClockSelfInAndOut
            - ClockOthersInAndOut
            - AccessTimeclockReport
            - ManageTimeClocks
            - ManageTimeClockTasks
            - ManageContactLogTypes
            - ViewContactLogs
            - AddContactLogs
            - EditOtherStaffMemberContactLogs
            - DeleteContactLogs
            - ContactLogAnalysisReport
            - SalesForecastReport
            - ViewAllClients
            - ManageClientSalesReps
            - CreateRetailTickets
            - EditRetailTickets
            - ManageTaskAssignments
            - MerchantAccountReports
            - VoidCreditCardTransactions
            - SettleCreditCardTransactions
            - UseStoredCreditCards
            - ManageAutoPays
            - ViewPersonalReviews
            - ViewOthersReviews
            - ViewClientNamesOnReviewReport
            - EmailClientsFromReviewReport
            - FlagReviewForRemoval
            - RespondPubliclyToReviews
    IssueRequest:
      type: object
      properties:
        Username:
          type: string
          description: The staff member’s username.
        Password:
          type: string
          description: The staff member’s password.
      description: POST UserToken/Issue request
    IssueResponse:
      type: object
      properties:
        TokenType:
          type: string
        AccessToken:
          type: string
          description: The authentication token value.
        User:
          $ref: '#/components/schemas/User'
      description: POST UserToken/Issue successful response
    User:
      type: object
      properties:
        Id:
          type: integer
          description: The user’s ID at the business. This is always 0 for Admin and
            Owner type users.
          format: int64
        FirstName:
          type: string
          description: The user’s first name.
        LastName:
          type: string
          description: The user’s last name.
        Type:
          type: string
          description: "The user’s type. Possible values are:\r\n* Staff\r\n* Owner\r\
            \n* Admin"
  securitySchemes:
    API-Key:
      type: apiKey
      description: API Key Authentication
      name: API-Key
      in: header
