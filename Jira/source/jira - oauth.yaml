openapi: 3.0.1
info:
  title: The Jira Cloud platform REST API
  description: Jira Cloud platform REST API documentation
  termsOfService: 'http://atlassian.com/terms/'
  contact:
    email: ecosystem@atlassian.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1001.0.0-SNAPSHOT
externalDocs:
  description: Find out more about Atlassian products and services.
  url: 'http://www.atlassian.com'
servers:
  - url: ''
tags:
  - name: Issues
    description: |-
      This resource represents Jira issues. Use it to:

       *  create or edit issues, individually or in bulk.
       *  retrieve metadata about the options for creating or editing issues.
       *  delete an issue.
       *  assign a user to an issue.
       *  get issue changelogs.
       *  send notifications about an issue.
       *  get details of the transitions available for an issue.
       *  transition an issue.
  - name: Issue comments
    description: |-
      This resource represents issue comments. Used it to:

       *  get, create, update, and delete a comment from an issue.
       *  get all comments from issue.
       *  get a list of comments by comment ID.
  - name: Issue fields
    description: >-
      This resource represents issue fields, both system and custom fields,
      including options on custom fields. Use it to get fields, create and
      update fields (custom fields only), and get an option from a custom field.
  - name: Issue custom field options
    description: >-
      This resource represents the options for a built-in custom select list
      field. See [Issue custom field options
      (apps)](#api-group-Issue-custom-field-options--apps-) to set custom select
      list values for an issue field added by a Connect app.


      A select list issue field is a type of [issue
      field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/)
      that enables a user to select an option from a list. Use this resource to
      add, remove, and update the options of a select list issue field.


  - name: Issue search
    description: >-
      This resource represents various ways to search for issues. Use it to
      search for issues with a JQL query and find issues to populate an issue
      picker.

  - name: Projects
    description: >-
      This resource represents projects. Use this resource to get, create,
      update, and delete projects. Also get statuses available to a project, a
      project's notification schemes, and update a project's type.

  - name: Users
    description: |-
      This resource represent users. Use this resource to:

       *  get, get a list of, create, and delete users.
       *  get, set, and reset a user's default issue table columns.
       *  get a list of the groups the user belongs to.
       *  get a list of user account IDs for a list of usernames or user keys.
  - name: User search
    description: >-
      This resource represents various ways to search for and find users. Use it
      to obtain list of users including users assignable to projects and issues,
      users with permissions, user lists for pickup fields, and user lists
      generated using structured queries. If you want to get a list of all users
      please use the https:///rest/api/3/users/search endpoint instead.
  - name: Webhooks
    description: >-
      This resource represents webhooks. Webhooks are calls sent to a URL when
      an event occurs in Jira for issues specified by a JQL query. Only Connect
      apps can register webhooks. For more information, see
      [Webhooks](https://developer.atlassian.com/cloud/jira/platform/webhooks/#registering-a-webhook-via-the-jira-rest-api-for-connect-apps).

paths:
  /rest/api/3/webhook:
    post:
      tags:
        - Webhooks
      summary: Register dynamic webhooks
      description: |-
        Registers webhooks.

        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation.
      operationId: com.atlassian.jira.rest.v2.webhook.DynamicWebhookResource.registerDynamicWebhooks_post
      parameters: []
      callbacks:
          jira:issue_created:
            x-description: When issue is created
            x-tags: Issues
            'rest/api/3/webhook':
              post:
                requestBody:
                  required: true
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/WebhookRegistrationDetails'
                        url: 'https://your-app.example.com/webhook-received'
                responses:
                  '200':
                    description: Returned if the request is successful.
                  '400':
                    description: Returned if the request is invalid.
                  '403':
                    description: Returned if the caller is not a Connect app.
          jira:issue_updated:
            x-description: When issue is updated
            x-tags: Issues
            'rest/api/3/webhook':
              post:
                requestBody:
                  required: true
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/WebhookRegistrationDetails'
                        url: 'https://your-app.example.com/webhook-received'
                responses:
                  '200':
                    description: Returned if the request is successful.
                  '400':
                    description: Returned if the request is invalid.
                  '403':
                    description: Returned if the caller is not a Connect app.
          jira:issue_deleted:
            x-description: When issue is deleted
            x-tags: Issues
            'rest/api/3/webhook':
              post:
                requestBody:
                  required: true
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/WebhookRegistrationDetails'
                        url: 'https://your-app.example.com/webhook-received'
                responses:
                  '200':
                    description: Returned if the request is successful.
                  '400':
                    description: Returned if the request is invalid.
                  '403':
                    description: Returned if the caller is not a Connect app.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRegistrationDetails'
            example:
              webhooks:
                - jqlFilter: project = PROJ
                  events:
                    - 'jira:issue_created'
                    - 'jira:issue_updated'
                - jqlFilter: 'project IN (PROJ, EXP) AND status = done'
                  events:
                    - 'jira:issue_deleted'
              url: 'https://your-app.example.com/webhook-received'
        required: true
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerForRegisteredWebhooks'
              example: '{"webhookRegistrationResult":[{"createdWebhookId":1000},{"errors":["The clause watchCount is unsupported"]},{"createdWebhookId":1001}]}'
        '400':
          description: Returned if the request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
        '403':
          description: Returned if the caller is not a Connect app.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
      x-atlassian-connect-scope: READ
    delete:
      tags:
        - Webhooks
      summary: Delete webhooks by ID
      description: |-
        Removes webhooks by ID. Only webhooks registered by the calling Connect app are removed. If webhooks created by other apps are specified, they are ignored.

        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation.
      operationId: com.atlassian.jira.rest.v2.webhook.DynamicWebhookResource.deleteWebhookById_delete
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerForWebhookIDs'
            example:
              webhookIds:
                - 10000
                - 10001
                - 10042
        required: true
      responses:
        '202':
          description: Returned if the request is successful.
        '400':
          description: Returned if the list of webhook IDs is missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
        '403':
          description: Returned if the caller is not a Connect app.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
      x-atlassian-connect-scope: READ
  /rest/api/3/issue:
    post:
      tags:
        - Issues
      summary: Create issue
      description: >-
        Creates an issue or, where the option to create subtasks is enabled in
        Jira, a subtask. A transition may be applied, to move the issue or
        subtask to a workflow step other than the default start step, and issue
        properties set.


        The content of the issue or subtask is defined using `update` and
        `fields`. The fields that can be set in the issue or subtask are
        determined using the [ Get create issue
        metadata](#api-rest-api-3-issue-createmeta-get). These are the same
        fields that appear on the issue's create screen. Note that the
        `description`, `environment`, and any `textarea` type custom fields
        (multi-line text fields) take Atlassian Document Format content. Single
        line custom fields (`textfield`) accept a string and don't handle
        Atlassian Document Format content.


        Creating a subtask differs from creating an issue as follows:

         *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
         *  `parent` MUST contain the ID or key of the parent issue.

        A parent MAY be supplied for any issue provided both parent and child
        are members of the same next-gen project. In a classic project the
        parent field is only valid for subtasks.


        **[Permissions](#permissions) required:** *Browse projects* and *Create
        issues* [project permissions](https://confluence.atlassian.com/x/yodKLg)
        for the project in which the issue or subtask is created.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.createIssue_post
      parameters:
        - name: updateHistory
          in: query
          description: >-
            Indicates whether the project in which the issue is created is added
            to the user's **Recently viewed** project list, as shown under
            **Projects** in Jira.
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdateDetails'
            example:
              update: {}
              fields:
                summary: Main order flow broken
                parent:
                  key: PROJ-123
                issuetype:
                  id: '10000'
                components:
                  - id: '10000'
                customfield_20000: '06/Jul/19 3:25 PM'
                customfield_40000:
                  type: doc
                  version: 1
                  content:
                    - type: paragraph
                      content:
                        - text: Occurs on all orders
                          type: text
                customfield_70000:
                  - jira-administrators
                  - jira-software-users
                project:
                  id: '10000'
                description:
                  type: doc
                  version: 1
                  content:
                    - type: paragraph
                      content:
                        - text: Order entry fails when selecting supplier.
                          type: text
                reporter:
                  id: 5b10a2844c20165700ede21g
                fixVersions:
                  - id: '10001'
                customfield_10000: 09/Jun/19
                priority:
                  id: '20000'
                labels:
                  - bugfix
                  - blitz_test
                timetracking:
                  remainingEstimate: '5'
                  originalEstimate: '10'
                customfield_30000:
                  - '10000'
                  - '10002'
                customfield_80000:
                  value: red
                security:
                  id: '10000'
                environment:
                  type: doc
                  version: 1
                  content:
                    - type: paragraph
                      content:
                        - text: UAT
                          type: text
                versions:
                  - id: '10000'
                duedate: '2019-05-11T00:00:00.000Z'
                customfield_60000: jira-software-users
                customfield_50000:
                  type: doc
                  version: 1
                  content:
                    - type: paragraph
                      content:
                        - text: Could impact day-to-day work.
                          type: text
                assignee:
                  id: 5b109f2e9729b51b54dc274d
        required: true
      responses:
        '201':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedIssue'
              example: >-
                {"id":"10000","key":"ED-24","self":"http://your-domain.atlassian.net/rest/api/3/issue/10000","transition":{"status":200,"errorCollection":{"errorMessages":[],"errors":{}}}}
        '400':
          description: |-
            Returned if the request:

             *  is missing required fields.
             *  contains invalid field values.
             *  contains fields that cannot be set for the issue type.
             *  is by a user who does not have the necessary permissions.
             *  is to create a subtype in a project different that of the the parent issue.
             *  is for a subtask when the option to create subtasks is disabled.
             *  is invalid for any other reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
              example: '{"errorMessages":["Field ''priority'' is required"],"errors":{}}'
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
        '403':
          description: Returned if the user is not permitted to access the application.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/bulk:
    post:
      tags:
        - Issues
      summary: Bulk create issue
      description: >-
        Creates issues and, where the option to create subtasks is enabled in
        Jira, subtasks. Transitions may be applied, to move the issues or
        subtasks to a workflow step other than the default start step, and issue
        properties set.


        The content of each issue or subtask is defined using `update` and
        `fields`. The fields that can be set in the issue or subtask are
        determined using the [ Get create issue
        metadata](#api-rest-api-3-issue-createmeta-get). These are the same
        fields that appear on the issues' create screens. Note that the
        `description`, `environment`, and any `textarea` type custom fields
        (multi-line text fields) take Atlassian Document Format content. Single
        line custom fields (`textfield`) accept a string and don't handle
        Atlassian Document Format content.


        Creating a subtask differs from creating an issue as follows:

         *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
         *  `parent` the must contain the ID or key of the parent issue.

        **[Permissions](#permissions) required:** *Browse projects* and *Create
        issues* [project permissions](https://confluence.atlassian.com/x/yodKLg)
        for the project in which each issue or subtask is created.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.createIssues_post
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuesUpdateBean'
            example:
              issueUpdates:
                - update:
                    worklog:
                      - add:
                          timeSpent: 60m
                          started: '2019-07-05T11:05:00.000+0000'
                  fields:
                    summary: Main order flow broken
                    issuetype:
                      id: '10000'
                    components:
                      - id: '10000'
                    customfield_20000: '06/Jul/19 3:25 PM'
                    customfield_40000:
                      type: doc
                      version: 1
                      content:
                        - type: paragraph
                          content:
                            - text: Occurs on all orders
                              type: text
                    customfield_70000:
                      - jira-administrators
                      - jira-software-users
                    project:
                      id: '10000'
                    description:
                      type: doc
                      version: 1
                      content:
                        - type: paragraph
                          content:
                            - text: Order entry fails when selecting supplier.
                              type: text
                    reporter:
                      id: 5b10a2844c20165700ede21g
                    fixVersions:
                      - id: '10001'
                    customfield_10000: 09/Jun/19
                    priority:
                      id: '20000'
                    labels:
                      - bugfix
                      - blitz_test
                    timetracking:
                      remainingEstimate: '5'
                      originalEstimate: '10'
                    customfield_30000:
                      - '10000'
                      - '10002'
                    customfield_80000:
                      value: red
                    security:
                      id: '10000'
                    environment:
                      type: doc
                      version: 1
                      content:
                        - type: paragraph
                          content:
                            - text: UAT
                              type: text
                    versions:
                      - id: '10000'
                    duedate: '2011-03-11T00:00:00.000Z'
                    customfield_60000: jira-software-users
                    customfield_50000:
                      type: doc
                      version: 1
                      content:
                        - type: paragraph
                          content:
                            - text: Could impact day-to-day work.
                              type: text
                    assignee:
                      id: 5b109f2e9729b51b54dc274d
                - update: {}
                  fields:
                    summary: Order stuck in pending
                    issuetype:
                      id: '10000'
                    components:
                      - id: '10000'
                    customfield_20000: '06/Jul/19 3:25 PM'
                    customfield_40000:
                      type: doc
                      version: 1
                      content:
                        - type: paragraph
                          content:
                            - text: Occurs on all orders
                              type: text
                    customfield_70000:
                      - jira-administrators
                      - jira-software-users
                    project:
                      id: '1000'
                    description:
                      type: doc
                      version: 1
                      content:
                        - type: paragraph
                          content:
                            - text: Order remains pending after approved.
                              type: text
                    reporter:
                      id: 5b10a2844c20165700ede21g
                    fixVersions:
                      - id: '10001'
                    customfield_10000: 09/Jun/19
                    priority:
                      id: '20000'
                    labels:
                      - new_release
                    timetracking:
                      remainingEstimate: '5'
                      originalEstimate: '15'
                    customfield_30000:
                      - '10000'
                      - '10002'
                    customfield_80000:
                      value: red
                    security:
                      id: '10000'
                    environment:
                      type: doc
                      version: 1
                      content:
                        - type: paragraph
                          content:
                            - text: UAT
                              type: text
                    versions:
                      - id: '10000'
                    duedate: '2019-04-16T00:00:00.000Z'
                    customfield_60000: jira-software-users
                    customfield_50000:
                      type: doc
                      version: 1
                      content:
                        - type: paragraph
                          content:
                            - text: Could impact day-to-day work.
                              type: text
                    assignee:
                      id: 5b109f2e9729b51b54dc274d
        required: true
      responses:
        '201':
          description: >-
            Returned if any of the issue or subtask creation requests were
            successful. A request may be unsuccessful when it:

             *  is missing required fields.
             *  contains invalid field values.
             *  contains fields that cannot be set for the issue type.
             *  is by a user who does not have the necessary permissions.
             *  is to create a subtype in a project different that of the the parent issue.
             *  is for a subtask when the option to create subtasks is disabled.
             *  is invalid for any other reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedIssues'
              example: >-
                {"issues":[{"id":"10000","key":"ED-24","self":"http://your-domain.atlassian.net/rest/api/3/issue/10000","transition":{"status":200,"errorCollection":{"errorMessages":[],"errors":{}}}},{"id":"10001","key":"ED-25","self":"http://your-domain.atlassian.net/rest/api/3/issue/10001"}],"errors":[]}
        '400':
          description: >-
            Returned if all requests are invalid. Requests may be unsuccessful
            when they:

             *  are missing required fields.
             *  contain invalid field values.
             *  contain fields that cannot be set for the issue type.
             *  are by a user who does not have the necessary permissions.
             *  are to create a subtype in a project different that of the the parent issue.
             *  is for a subtask when the option to create subtasks is disabled.
             *  are invalid for any other reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedIssues'
              example: >-
                {"issues":[],"errors":[{"status":400,"elementErrors":{"errorMessages":[],"errors":{"issuetype":"The
                issue type selected is invalid.","project":"Sub-tasks must be
                created in the same project as the
                parent."}},"failedElementNumber":0},{"status":400,"elementErrors":{"errorMessages":[],"errors":{"issuetype":"The
                issue type selected is invalid.","project":"Sub-tasks must be
                created in the same project as the
                parent."}},"failedElementNumber":1}]}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/createmeta:
    get:
      tags:
        - Issues
      summary: Get create issue metadata
      description: >-
        Returns details of projects, issue types within projects, and, when
        requested, the create screen fields for each issue type for the user.
        Use the information to populate the requests in [ Create
        issue](#api-rest-api-3-issue-post) and [Create
        issues](#api-rest-api-3-issue-bulk-post).


        The request can be restricted to specific projects or issue types using
        the query parameters. The response will contain information for the
        valid projects, issue types, or project and issue type combinations
        requested. Note that invalid project, issue type, or project and issue
        type combinations do not generate errors.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Create issues* [project
        permission](https://confluence.atlassian.com/x/yodKLg) in the requested
        projects.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getCreateIssueMeta_get
      parameters:
        - name: projectIds
          in: query
          description: >-
            List of project IDs. This parameter accepts a comma-separated list.
            Multiple project IDs can also be provided using an
            ampersand-separated list. For example,
            `projectIds=10000,10001&projectIds=10020,10021`. This parameter may
            be provided with `projectKeys`.
          schema:
            type: array
            items:
              type: string
        - name: projectKeys
          in: query
          description: >-
            List of project keys. This parameter accepts a comma-separated list.
            Multiple project keys can also be provided using an
            ampersand-separated list. For example,
            `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be
            provided with `projectIds`.
          schema:
            type: array
            items:
              type: string
        - name: issuetypeIds
          in: query
          description: >-
            List of issue type IDs. This parameter accepts a comma-separated
            list. Multiple issue type IDs can also be provided using an
            ampersand-separated list. For example,
            `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter
            may be provided with `issuetypeNames`.
          schema:
            type: array
            items:
              type: string
        - name: issuetypeNames
          in: query
          description: >-
            List of issue type names. This parameter accepts a comma-separated
            list. Multiple issue type names can also be provided using an
            ampersand-separated list. For example,
            `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter
            may be provided with `issuetypeIds`.
          schema:
            type: array
            items:
              type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            issue metadata in the response. This parameter accepts
            `projects.issuetypes.fields`, which returns information about the
            fields in the issue creation screen for each issue type. Fields
            hidden from the screen are not returned. Use the information to
            populate the `fields` and `update` fields in [Create
            issue](#api-rest-api-3-issue-post) and [Create
            issues](#api-rest-api-3-issue-bulk-post).
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCreateMetadata'
              example: >-
                {"projects":[{"self":"http://your-domain.atlassian.net/rest/api/3/project/ED","id":"10000","key":"ED","name":"Edison
                Project","avatarUrls":{"16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000&avatarId=10011","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000&avatarId=10011","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000&avatarId=10011","48x48":"http://your-domain.atlassian.net/secure/projectavatar?pid=10000&avatarId=10011"},"issuetypes":[{"self":"http://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"An
                error in the
                code","iconUrl":"http://your-domain.atlassian.net/images/icons/issuetypes/bug.png","name":"Bug","subtask":false,"fields":{"issuetype":{"required":true,"name":"Issue
                Type","key":"issuetype","hasDefaultValue":false,"operations":["set"]}}}]}]}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
  /rest/api/3/issue/picker:
    get:
      tags:
        - Issue search
      summary: Get issue picker suggestions
      description: >-
        Returns lists of issues matching a query string. Use this resource to
        provide auto-completion suggestions when the user is looking for an
        issue using a word or string.


        This operation returns two lists:

         *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
         *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      operationId: >-
        com.atlassian.jira.rest.v2.issue.IssueResource.getIssuePickerResource_get
      parameters:
        - name: query
          in: query
          description: >-
            A string to match against text fields in the issue such as title,
            description, or comments.
          schema:
            type: string
            example: query
          x-showInExample: 'true'
        - name: currentJQL
          in: query
          description: >-
            A JQL query defining a list of issues to search for the query term.
            Note that `username` and `userkey` cannot be used as search terms
            for this parameter, due to privacy reasons. Use `accountId` instead.
          schema:
            type: string
        - name: currentIssueKey
          in: query
          description: >-
            The key of an issue to exclude from search results. For example, the
            issue the user is viewing when they perform this query.
          schema:
            type: string
        - name: currentProjectId
          in: query
          description: The ID of a project that suggested issues must belong to.
          schema:
            type: string
        - name: showSubTasks
          in: query
          description: Indicate whether to include subtasks in the suggestions list.
          schema:
            type: boolean
        - name: showSubTaskParent
          in: query
          description: >-
            When `currentIssueKey` is a subtask, indicates whether to include
            the parent issue in the suggestions if it matches the query.
          schema:
            type: boolean
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuePickerSuggestions'
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
  '/rest/api/3/issue/{issueIdOrKey}':
    get:
      tags:
        - Issues
      summary: Get issue
      description: >-
        Returns the details for an issue.


        The issue is identified by its ID or key, however, if the identifier
        doesn't match an issue, a case-insensitive search and check for moved
        issues is performed. If a matching issue is found its details are
        returned, a 302 or other redirect is **not** returned. The issue key
        returned in the response is the key of the issue found.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getIssue_get
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: >-
            A list of fields to return for the issue. This parameter accepts a
            comma-separated list. Use it to retrieve a subset of fields. Allowed
            values:

             *  `*all` Returns all fields.
             *  `*navigable` Returns navigable fields.
             *  Any issue field, prefixed with a minus to exclude.

            Examples:

             *  `summary,comment` Returns only the summary and comments fields.
             *  `-description` Returns all (default) fields except description.
             *  `*navigable,-comment` Returns all navigable fields except comment.

            This parameter may be specified multiple times. For example,
            `fields=field1,field2& fields=field3`.


            Note: All fields are returned by default. This differs from [Search
            for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search
            for issues using JQL (POST)](#api-rest-api-3-search-post) where the
            default is all navigable fields.
          schema:
            type: array
            items:
              type: string
              default: '*all'
        - name: fieldsByKeys
          in: query
          description: >-
            Indicates whether fields in `fields` are referenced by keys rather
            than IDs. This parameter is useful where fields have been added by a
            connect app and a field's key may differ from its ID.
          schema:
            type: boolean
            default: false
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about the
            issues in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `renderedFields` Returns field values rendered in HTML format.
             *  `names` Returns the display name of each field.
             *  `schema` Returns the schema describing a field type.
             *  `transitions` Returns all possible transitions for the issue.
             *  `editmeta` Returns information about how each field can be edited.
             *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.
          schema:
            type: string
        - name: properties
          in: query
          description: >-
            A list of issue properties to return for the issue. This parameter
            accepts a comma-separated list. Allowed values:

             *  `*all` Returns all issue properties.
             *  Any issue property key, prefixed with a minus to exclude.

            Examples:

             *  `*all` Returns all properties.
             *  `*all,-prop1` Returns all properties except `prop1`.
             *  `prop1,prop2` Returns `prop1` and `prop2` properties.

            This parameter may be specified multiple times. For example,
            `properties=prop1,prop2& properties=prop3`.
          schema:
            type: array
            items:
              type: string
        - name: updateHistory
          in: query
          description: >-
            Indicates whether the project in which the issue is created is added
            to the user's **Recently viewed** project list, as shown under
            **Projects** in Jira. This also populates the [JQL issues
            search](#api-rest-api-3-search-get) `lastViewed` field.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueBean'
              example: >-
                {"id":"10002","self":"http://your-domain.atlassian.net/rest/api/3/issue/10002","key":"ED-1","fields":{"watcher":{"self":"http://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","isWatching":false,"watchCount":1,"watchers":[{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false}]},"attachment":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","filename":"picture.jpg","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:43.742+0000","size":23123,"mimeType":"image/jpeg","content":"https://your-domain.atlassian.net/jira/attachments/10000","thumbnail":"https://your-domain.atlassian.net/jira/secure/thumbnail/10000"}],"sub-tasks":[{"id":"10000","type":{"id":"10000","name":"","inward":"Parent","outward":"Sub-task"},"outwardIssue":{"id":"10003","key":"ED-2","self":"http://your-domain.atlassian.net/rest/api/3/issue/ED-2","fields":{"status":{"iconUrl":"http://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main
                order flow
                broken"}]}]},"project":{"self":"http://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project
                Category"},"simplified":false,"style":"classic"},"comment":[{"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque
                eget venenatis elit. Duis eu justo eget augue iaculis fermentum.
                Sed semper quam laoreet nisi egestas at posuere augue
                semper."}]}]},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:42.388+0000","updated":"2019-10-23T04:39:42.388+0000","visibility":{"type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended
                by"},"outwardIssue":{"id":"10004L","key":"PR-2","self":"http://your-domain.atlassian.net/rest/api/3/issue/PR-2","fields":{"status":{"iconUrl":"http://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}},{"id":"10002","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended
                by"},"inwardIssue":{"id":"10004","key":"PR-3","self":"http://your-domain.atlassian.net/rest/api/3/issue/PR-3","fields":{"status":{"iconUrl":"http://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"worklog":[{"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work
                here."}]}]},"updated":"2019-10-23T04:39:42.755+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2019-10-23T04:39:42.755+0000","timeSpent":"3h
                20m","timeSpentSeconds": 12000,"id":"100028","issueId":"10002"}],"updated":1,"timetracking":{"originalEstimate":"10m","remainingEstimate":"3m","timeSpent":"6m","originalEstimateSeconds":600,"remainingEstimateSeconds":200,"timeSpentSeconds": 400}}}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
    put:
      tags:
        - Issues
      summary: Edit issue
      description: >-
        Edits an issue. A transition may be applied and issue properties updated
        as part of the edit.


        The edits to the issue's fields are defined using `update` and `fields`.
        The fields that can be edited are determined using [ Get edit issue
        metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get). Note that
        the `description`, `environment`, and any `textarea` type custom fields
        (multi-line text fields) take Atlassian Document Format content. Single
        line custom fields (`textfield`) accept a string and don't handle
        Atlassian Document Format content.


        Connect app users with admin permissions (from user permissions and app
        scopes) can override the screen security configuration using
        `overrideScreenSecurity` and `overrideEditableFlag`.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        The parent field may be set by key or ID (see the create issue example),
        for standard issue types the parent may also be removed as depicted
        below.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.editIssue_put
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: notifyUsers
          in: query
          description: >-
            Indicates whether a notification email about the issue update is
            sent to all watchers. To disable the notification, administer Jira
            or administer project permissions are required. If the user doesn't
            have the necessary permission the request is ignored.
          schema:
            type: boolean
            default: true
        - name: overrideScreenSecurity
          in: query
          description: >-
            Indicates whether screen security should be overridden to enable
            hidden fields to be edited. Available to Connect app users with
            admin permissions.
          schema:
            type: boolean
            default: false
        - name: overrideEditableFlag
          in: query
          description: >-
            Indicates whether screen security should be overridden to enable
            uneditable fields to be edited. Available to Connect app users with
            admin permissions.
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdateDetails'
            example:
              historyMetadata:
                actor:
                  avatarUrl: 'http://mysystem/avatar/tony.jpg'
                  displayName: Tony
                  id: tony
                  type: mysystem-user
                  url: 'http://mysystem/users/tony'
                extraData:
                  Iteration: 10a
                  Step: '4'
                description: From the order testing process
                generator:
                  id: mysystem-1
                  type: mysystem-application
                cause:
                  id: myevent
                  type: mysystem-event
                activityDescription: Complete order processing
                type: 'myplugin:type'
              update:
                summary:
                  - set: Bug in business logic
                parent:
                  - set:
                      none: true
                components:
                  - set: ''
                timetracking:
                  - edit:
                      remainingEstimate: 4d
                      originalEstimate: 1w 1d
                labels:
                  - add: triaged
                  - remove: blocker
              fields:
                summary: Completed orders still displaying in pending
                customfield_10010: 1
                customfield_10000:
                  type: doc
                  version: 1
                  content:
                    - type: paragraph
                      content:
                        - text: Investigation underway
                          type: text
              properties:
                - value: Order number 10784
                  key: key1
                - value: Order number 10923
                  key: key2
        required: true
      responses:
        '204':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: |-
            Returned if:

             *  the request body is missing.
             *  the user does not have the necessary permissions to edit one or more fields.
             *  the request includes one or more fields that are not found or are not associated with the issue's edit screen.
             *  the request includes an invalid transition.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the user uses `overrideScreenSecurity` or
            `overrideEditableFlag` but doesn't have the necessary permissions.
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE
    delete:
      tags:
        - Issues
      summary: Delete issue
      description: >-
        Deletes an issue.


        An issue cannot be deleted if it has one or more subtasks. To delete an
        issue with subtasks, set `deleteSubtasks`. This causes the issue's
        subtasks to be deleted with the issue.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.deleteIssue_delete
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: deleteSubtasks
          in: query
          description: >-
            Indicates whether the issue's subtasks are deleted when the issue is
            deleted.
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
            default: 'false'
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: >-
            Returned if the issue has subtasks and `deleteSubtasks` is not set
            to *true*.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '403':
          description: Returned if the user does not have permission to delete the issue.
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view the issue.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: DELETE
  '/rest/api/3/issue/{issueIdOrKey}/assignee':
    put:
      tags:
        - Issues
      summary: Assign issue
      description: >-
        Assigns an issue to a user. Use this operation when the calling user
        does not have the *Edit Issues* permission but has the *Assign issue*
        permission for the project that the issue is in.


        If `name` or `accountId` is set to:

         *  `"-1"`, the issue is assigned to the default assignee for the project.
         *  `null`, the issue is set to unassigned.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.assignIssue_put
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue to be assigned.
          required: true
          schema:
            type: string
      requestBody:
        description: The request object with the user that the issue is assigned to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              accountId: 5b10ac8d82e05b22cc7d4ef5
        required: true
      responses:
        '204':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: |-
            Returned if:

             *  the user is not found.
             *  `name`, `key`, or `accountId` is missing.
             *  more than one of `name`, `key`, and `accountId` are provided.
        '403':
          description: Returned if the user does not have the required permissions.
        '404':
          description: Returned if the issue is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE
  '/rest/api/3/issue/{issueIdOrKey}/changelog':
    get:
      tags:
        - Issues
      summary: Get change logs
      description: >-
        Returns all changelogs for an issue sorted by date, starting from the
        oldest.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: >-
        com.atlassian.jira.rest.v2.issue.IssueChangelogResource.getChangeLogs_get
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            format: int32
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `100`.
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBeanChangelog'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/issue/TT-1/changelog?startAt=2&maxResults=2","nextPage":"http://your-domain.atlassian.net/rest/api/3/issue/TT-1/changelog?&startAt=4&maxResults=2","maxResults":2,"startAt":2,"total":5,"isLast":false,"values":[{"id":"10001","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:50.429+0000","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"","to":null,"toString":"label-1"}]},{"id":"10002","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:51.429+0000","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"label-1","to":null,"toString":"label-1
                label-2"}]}]}
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
  '/rest/api/3/issue/{issueIdOrKey}/comment':
    get:
      tags:
        - Issue comments
      summary: Get comments
      description: >-
        Returns all comments for an issue.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Comments are included in the
        response where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentResource.getComments_get
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `100`.
          schema:
            type: integer
            format: int32
            default: 50
        - name: orderBy
          in: query
          description: >-
            The field to order returned comments by. Only accepts the value
            *created*, which orders comments by their created date.
          schema:
            type: string
            enum:
              - created
              - '-created'
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            comments in the response. This parameter accepts `renderedBody`,
            which returns the comment body rendered in HTML.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfComments'
              example: >-
                {"startAt":0,"maxResults":1,"total":1,"comments":[{"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque
                eget venenatis elit. Duis eu justo eget augue iaculis fermentum.
                Sed semper quam laoreet nisi egestas at posuere augue
                semper."}]}]},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:42.388+0000","updated":"2019-10-23T04:39:42.388+0000","visibility":{"type":"role","value":"Administrators"}}]}
        '400':
          description: Returned if `orderBy` is set to a value other than *created*.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
    post:
      tags:
        - Issue comments
      summary: Add comment
      description: |-
        Adds a comment to an issue.

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentResource.addComment_post
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            comments in the response. This parameter accepts `renderedBody`,
            which returns the comment body rendered in HTML.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
            example:
              visibility:
                type: role
                value: Administrators
              body:
                type: doc
                version: 1
                content:
                  - type: paragraph
                    content:
                      - text: >-
                          Lorem ipsum dolor sit amet, consectetur adipiscing
                          elit. Pellentesque eget venenatis elit. Duis eu justo
                          eget augue iaculis fermentum. Sed semper quam laoreet
                          nisi egestas at posuere augue semper.
                        type: text
        required: true
      responses:
        '201':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque
                eget venenatis elit. Duis eu justo eget augue iaculis fermentum.
                Sed semper quam laoreet nisi egestas at posuere augue
                semper."}]}]},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:42.388+0000","updated":"2019-10-23T04:39:42.388+0000","visibility":{"type":"role","value":"Administrators"}}
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE
  '/rest/api/3/issue/{issueIdOrKey}/comment/{id}':
    get:
      tags:
        - Issue comments
      summary: Get comment
      description: |-
        Returns a comment.

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentResource.getComment_get
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the comment.
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            comments in the response. This parameter accepts `renderedBody`,
            which returns the comment body rendered in HTML.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque
                eget venenatis elit. Duis eu justo eget augue iaculis fermentum.
                Sed semper quam laoreet nisi egestas at posuere augue
                semper."}]}]},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:42.388+0000","updated":"2019-10-23T04:39:42.388+0000","visibility":{"type":"role","value":"Administrators"}}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the issue or comment is not found or the user does not
            have permission to view the issue or comment.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
    put:
      tags:
        - Issue comments
      summary: Update comment
      description: |-
        Updates a comment.

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
         *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentResource.updateComment_put
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the comment.
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            comments in the response. This parameter accepts `renderedBody`,
            which returns the comment body rendered in HTML.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
            example:
              visibility:
                type: role
                value: Administrators
              body:
                type: doc
                version: 1
                content:
                  - type: paragraph
                    content:
                      - text: >-
                          Lorem ipsum dolor sit amet, consectetur adipiscing
                          elit. Pellentesque eget venenatis elit. Duis eu justo
                          eget augue iaculis fermentum. Sed semper quam laoreet
                          nisi egestas at posuere augue semper.
                        type: text
        required: true
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque
                eget venenatis elit. Duis eu justo eget augue iaculis fermentum.
                Sed semper quam laoreet nisi egestas at posuere augue
                semper."}]}]},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:42.388+0000","updated":"2019-10-23T04:39:42.388+0000","visibility":{"type":"role","value":"Administrators"}}
        '400':
          description: >-
            Returned if the user does not have permission to edit the comment or
            the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the issue or comment is not found or the user does not
            have permission to view the issue or comment.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE
    delete:
      tags:
        - Issue comments
      summary: Delete comment
      description: |-
        Deletes a comment.

        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
         *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
      operationId: >-
        com.atlassian.jira.rest.v2.issue.IssueCommentResource.deleteComment_delete
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the comment.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the user does not have permission to delete the comment.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the issue or comment is not found or the user does not
            have permission to view the issue or comment.
        '405':
          description: Returned if an anonymous call is made to the operation.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: DELETE
  '/rest/api/3/issue/{issueIdOrKey}/editmeta':
    get:
      tags:
        - Issues
      summary: Get edit issue metadata
      description: >-
        Returns the edit screen fields for an issue that are visible to and
        editable by the user. Use the information to populate the requests in
        [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).


        Connect app users with admin permissions (from user permissions and app
        scopes) can return additional details using:

         *  `overrideScreenSecurity` Returns hidden fields.
         *  `overrideEditableFlag` Returns uneditable fields. For example, where an issue has a workflow status of closed none of its fields are editable.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        Note: For any fields to be editable the user must have the *Edit issues*
        [project permission](https://confluence.atlassian.com/x/yodKLg) for the
        issue.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getEditIssueMeta_get
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: overrideScreenSecurity
          in: query
          description: >-
            Indicates whether hidden fields should be returned. Available to
            connect app users with admin permissions.
          schema:
            type: boolean
            default: false
        - name: overrideEditableFlag
          in: query
          description: >-
            Indicates whether non-editable fields should be returned. Available
            to connect app users with admin permissions.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueUpdateMetadata'
              example: >-
                {"fields":{"summary":{"required":false,"schema":{"type":"array","items":"option","custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001},"name":"My
                Multi
                Select","key":"field_key","hasDefaultValue":false,"operations":["set","add"],"allowedValues":["red","blue"],"defaultValue":"red"}}}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the user uses an override parameter but doesn't have
            permission to do so.
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
  '/rest/api/3/issue/{issueIdOrKey}/notify':
    post:
      tags:
        - Issues
      summary: Send notification for issue
      description: >-
        Creates an email notification for an issue and adds it to the mail
        queue.


        **[Permissions](#permissions) required:**

         *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.notify_post
      parameters:
        - name: issueIdOrKey
          in: path
          description: ID or key of the issue that the notification is sent for.
          required: true
          schema:
            type: string
      requestBody:
        description: The request object for the notification and recipients.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
            example:
              htmlBody: >-
                The <strong>latest</strong> test results for this ticket are now
                available.
              subject: Latest test results
              textBody: The latest test results for this ticket are now available.
              to:
                voters: true
                watchers: true
                groups:
                  - name: notification-group
                reporter: false
                assignee: false
                users:
                  - accountId: 5b10a2844c20165700ede21g
                    active: false
              restrict:
                permissions:
                  - key: BROWSE
                groups:
                  - name: notification-group
        required: true
      responses:
        '204':
          description: Returned if the email is queued for sending.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: |-
            Returned if:

             *  the recipient is the same as the calling user.
             *  the recipient is invalid. For example, the recipient is set to the assignee, but the issue is unassigned.
             *  the request is invalid. For example, required fields are missing or have invalid values.
        '403':
          description: |-
            Returned if:

             *  outgoing emails are disabled.
             *  no SMTP server is configured.
        '404':
          description: Returned if the issue is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE

  '/rest/api/3/issue/{issueIdOrKey}/transitions':
    get:
      tags:
        - Issues
      summary: Get transitions
      description: >-
        Returns either all transitions or a transition that can be performed by
        the user on an issue, based on the issue's status.


        Note, if a request is made for a transition that does not exist or
        cannot be performed on the issue, given its status, the response will
        return any empty transitions list.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required: A list or transition is returned
        only when the user has:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        However, if the user does not have the *Transition issues* [ project
        permission](https://confluence.atlassian.com/x/yodKLg) the response will
        not list any transitions.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getTransitions_get
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            transitions in the response. This parameter accepts
            `transitions.fields`, which returns information about the fields in
            the transition screen for each transition. Fields hidden from the
            screen are not returned. Use this information to populate the
            `fields` and `update` fields in [Transition
            issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post).
          schema:
            type: string
        - name: transitionId
          in: query
          description: The ID of the transition.
          schema:
            type: string
        - name: skipRemoteOnlyCondition
          in: query
          description: >-
            Indicates whether transitions with the condition *Hide From User
            Condition* are included in the response.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transitions'
              example: >-
                {"transitions":[{"id":"2","name":"Close
                Issue","to":{"self":"http://your-domain.atlassian.net/rest/api/3/status/10000","description":"The
                issue is currently being worked
                on.","iconUrl":"http://your-domain.atlassian.net/images/icons/progress.gif","name":"In
                Progress","id":"10000","statusCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/statuscategory/1","id":1,"key":"in-flight","colorName":"yellow","name":"In
                Progress"}},"hasScreen":false,"isGlobal":false,"isInitial":false,"isConditional":false,"fields":{"summary":{"required":false,"schema":{"type":"array","items":"option","custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001},"name":"My
                Multi
                Select","key":"field_key","hasDefaultValue":false,"operations":["set","add"],"allowedValues":["red","blue"],"defaultValue":"red"}}},{"id":"711","name":"QA
                Review","to":{"self":"http://your-domain.atlassian.net/rest/api/3/status/5","description":"The
                issue is
                closed.","iconUrl":"http://your-domain.atlassian.net/images/icons/closed.gif","name":"Closed","id":"5","statusCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/statuscategory/9","id":9,"key":"completed","colorName":"green"}},"hasScreen":true,"fields":{"summary":{"required":false,"schema":{"type":"array","items":"option","custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001},"name":"My
                Multi
                Select","key":"field_key","hasDefaultValue":false,"operations":["set","add"],"allowedValues":["red","blue"],"defaultValue":"red"},"colour":{"required":false,"schema":{"type":"array","items":"option","custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001},"name":"My
                Multi
                Select","key":"field_key","hasDefaultValue":false,"operations":["set","add"],"allowedValues":["red","blue"],"defaultValue":"red"}}}]}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
    post:
      tags:
        - Issues
      summary: Transition issue
      description: >-
        Performs an issue transition and, if the transition has a screen,
        updates the fields from the transition screen.


        To update the fields on the transition screen, specify the fields in the
        `fields` or `update` parameters in the request body. Get details about
        the fields using [ Get
        transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with
        the `transitions.fields` expand.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.doTransition_post
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdateDetails'
            example:
              historyMetadata:
                actor:
                  avatarUrl: 'http://mysystem/avatar/tony.jpg'
                  displayName: Tony
                  id: tony
                  type: mysystem-user
                  url: 'http://mysystem/users/tony'
                extraData:
                  Iteration: 10a
                  Step: '4'
                description: From the order testing process
                generator:
                  id: mysystem-1
                  type: mysystem-application
                cause:
                  id: myevent
                  type: mysystem-event
                activityDescription: Complete order processing
                type: 'myplugin:type'
              update:
                comment:
                  - add:
                      body:
                        type: doc
                        version: 1
                        content:
                          - type: paragraph
                            content:
                              - text: Bug has been fixed
                                type: text
              fields:
                assignee:
                  name: bob
                resolution:
                  name: Fixed
              transition:
                id: '5'
        required: true
      responses:
        '204':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: |-
            Returned if:

             *  no transition is specified.
             *  the user does not have permission to transition the issue.
             *  a field that isn't included on the transition screen is defined in `fields` or `update`.
             *  a field is specified in both `fields` and `update`.
             *  the request is invalid for any other reason.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view it.
        '409':
          description: >-
            Returned if there are conflicts with other modifications of the
            issue.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE

  '/rest/api/3/issue/{issueIdOrKey}/worklog':
    get:
      tags:
        - Issue worklogs
      summary: Get issue worklogs
      description: >-
        Returns all worklogs for an issue.


        Time tracking must be enabled in Jira, otherwise this operation returns
        an error. For more information, see [Configuring time
        tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Workloads are only returned
        where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      operationId: >-
        com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.getIssueWorklog_get
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `1048576`.
          schema:
            type: integer
            format: int32
            default: 1048576
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            worklogs in the response. This parameter accepts`properties`, which
            returns worklog properties.
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Returned if the request is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfWorklogs'
              example: >-
                {"startAt":0,"maxResults":1,"total":1,"worklogs":[{"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work
                here."}]}]},"updated":"2019-10-23T04:39:42.755+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2019-10-23T04:39:42.755+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}]}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: |-
            Returned if:

             *  the issue is not found or the user does not have permission to view the issue.
             *  `startAt` or `maxResults` has non-numeric values.
             *  time tracking is disabled.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
    post:
      tags:
        - Issue worklogs
      summary: Add worklog
      description: >-
        Adds a worklog to an issue.


        Time tracking must be enabled in Jira, otherwise this operation returns
        an error. For more information, see [Configuring time
        tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.addWorklog_post
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key the issue.
          required: true
          schema:
            type: string
        - name: notifyUsers
          in: query
          description: Indicates whether users watching the issue are notified by email.
          schema:
            type: boolean
            default: true
        - name: adjustEstimate
          in: query
          description: |-
            Defines how to update the issue's time estimate, the options are:

             *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
             *  `leave` Leaves the estimate unchanged.
             *  `manual` Reduces the estimate by amount specified in `reduceBy`.
             *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
          schema:
            type: string
            enum:
              - new
              - leave
              - manual
              - auto
            default: auto
        - name: newEstimate
          in: query
          description: >-
            The value to set as the issue's remaining time estimate, as days
            (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*.
            Required when `adjustEstimate` is `new`.
          schema:
            type: string
        - name: reduceBy
          in: query
          description: >-
            The amount to reduce the issue's remaining estimate by, as days
            (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required
            when `adjustEstimate` is `manual`.
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            work logs in the response. This parameter accepts `properties`,
            which returns worklog properties.
          schema:
            type: string
            default: ''
        - name: overrideEditableFlag
          in: query
          description: >-
            Indicates whether the worklog entry should be added to the issue
            even if the issue is not editable, because jira.issue.editable set
            to false or missing. For example, the issue is closed. Only connect
            app users with admin scope permission can use this flag.
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Worklog'
            example:
              timeSpentSeconds: 12000
              visibility:
                type: group
                value: jira-developers
              comment:
                type: doc
                version: 1
                content:
                  - type: paragraph
                    content:
                      - text: I did some work here.
                        type: text
              started: '2019-10-23T04:39:42.754+0000'
        required: true
      responses:
        '201':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklog'
        '400':
          description: |-
            Returned if:

             *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.
             *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.
             *  the user does not have permission to add the worklog.
             *  the request JSON is malformed.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: >-
            Returned if the issue is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE
  '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}':
    get:
      tags:
        - Issue worklogs
      summary: Get worklog
      description: >-
        Returns a worklog.


        Time tracking must be enabled in Jira, otherwise this operation returns
        an error. For more information, see [Configuring time
        tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      operationId: com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.getWorklog_get
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the worklog.
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            work logs in the response. This parameter accepts


            `properties`, which returns worklog properties.
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklog'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work
                here."}]}]},"updated":"2019-10-23T04:39:42.755+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2019-10-23T04:39:42.755+0000","timeSpent":"3h
                20m","timeSpentSeconds": 12000,"id":"100028","issueId":"10002"}
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: |-
            Returned if:

             *  the issue is not found or the user does not have permission to view it.
             *  the worklog is not found or the user does not have permission to view it.
             *  time tracking is disabled.

            .
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
    put:
      tags:
        - Issue worklogs
      summary: Update worklog
      description: >-
        Updates a worklog.


        Time tracking must be enabled in Jira, otherwise this operation returns
        an error. For more information, see [Configuring time
        tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      operationId: com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.updateWorklog_put
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key the issue.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the worklog.
          required: true
          schema:
            type: string
        - name: notifyUsers
          in: query
          description: Indicates whether users watching the issue are notified by email.
          schema:
            type: boolean
            default: true
        - name: adjustEstimate
          in: query
          description: |-
            Defines how to update the issue's time estimate, the options are:

             *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
             *  `leave` Leaves the estimate unchanged.
             *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.
          schema:
            type: string
            enum:
              - new
              - leave
              - manual
              - auto
            default: auto
        - name: newEstimate
          in: query
          description: >-
            The value to set as the issue's remaining time estimate, as days
            (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*.
            Required when `adjustEstimate` is `new`.
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            worklogs in the response. This parameter accepts `properties`, which
            returns worklog properties.
          schema:
            type: string
            default: ''
        - name: overrideEditableFlag
          in: query
          description: >-
            Indicates whether the worklog should be added to the issue even if
            the issue is not editable. For example, because the issue is closed.
            Only connect app users with admin permissions can use this flag.
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Worklog'
            example:
              timeSpentSeconds: 12000
              visibility:
                type: group
                value: jira-developers
              comment:
                type: doc
                version: 1
                content:
                  - type: paragraph
                    content:
                      - text: I did some work here.
                        type: text
              started: '2019-10-23T04:39:42.754+0000'
        required: true
      responses:
        '200':
          description: Returned if the request is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklog'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work
                here."}]}]},"updated":"2019-10-23T04:39:42.755+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2019-10-23T04:39:42.755+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}
        '400':
          description: |-
            Returned if:

             *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.
             *  the user does not have permission to update the worklog.
             *  the request JSON is malformed.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: |-
            Returned if:

             *  the issue is not found or user does not have permission to view the issue.
             *  the worklog is not found or the user does not have permission to view it.
             *  time tracking is disabled.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: WRITE
    delete:
      tags:
        - Issue worklogs
      summary: Delete worklog
      description: >-
        Deletes a worklog from an issue.


        Time tracking must be enabled in Jira, otherwise this operation returns
        an error. For more information, see [Configuring time
        tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      operationId: >-
        com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.deleteWorklog_delete
      parameters:
        - name: issueIdOrKey
          in: path
          description: The ID or key of the issue.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the worklog.
          required: true
          schema:
            type: string
        - name: notifyUsers
          in: query
          description: Indicates whether users watching the issue are notified by email.
          schema:
            type: boolean
            default: true
        - name: adjustEstimate
          in: query
          description: |-
            Defines how to update the issue's time estimate, the options are:

             *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
             *  `leave` Leaves the estimate unchanged.
             *  `manual` Increases the estimate by amount specified in `increaseBy`.
             *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
          schema:
            type: string
            enum:
              - new
              - leave
              - manual
              - auto
            default: auto
        - name: newEstimate
          in: query
          description: >-
            The value to set as the issue's remaining time estimate, as days
            (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*.
            Required when `adjustEstimate` is `new`.
          schema:
            type: string
        - name: increaseBy
          in: query
          description: >-
            The amount to increase the issue's remaining estimate by, as days
            (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*.
            Required when `adjustEstimate` is `manual`.
          schema:
            type: string
        - name: overrideEditableFlag
          in: query
          description: >-
            Indicates whether the work log entry should be added to the issue
            even if the issue is not editable, because jira.issue.editable set
            to false or missing. For example, the issue is closed. Only connect
            app users with admin permissions can use this flag.
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: |-
            Returned if:

             *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.
             *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.
             *  the user does not have permission to delete the worklog.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: |-
            Returned if:

             *  the issue is not found or user does not have permission to view the issue.
             *  the worklog is not found or the user does not have permission to view it.
             *  time tracking is disabled.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
        - {}
      x-atlassian-connect-scope: DELETE

  /rest/api/3/jql/match:
    post:
      tags:
        - Issue search
      summary: Check issues against JQL
      description: >-
        Checks whether one or more issues would be returned by one or more JQL
        queries.


        **[Permissions](#permissions) required:** None, however, issues are only
        matched against JQL queries where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: com.atlassian.jira.rest.v2.match.IssueMatchResource.matchIssues_post
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuesAndJQLQueries'
            example:
              issueIds:
                - 10001
                - 1000
                - 10042
              jqls:
                - project = FOO
                - issuetype = Bug
                - 'summary ~ "some text" AND project in (FOO, BAR)'
        required: true
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueMatches'
              example: >-
                {"matches":[{"matchedIssues":[10000,10004],"errors":[]},{"matchedIssues":[100134,10025,10236],"errors":[]},{"matchedIssues":[],"errors":[]},{"matchedIssues":[],"errors":["Invalid
                JQL: broken = value"]}]}
        '400':
          description: >-
            Returned if `jqls` exceeds the maximum number of JQL queries or
            `issueIds` exceeds the maximum number of issue IDs.
      deprecated: false
      security:
        - basicAuth: []
      x-atlassian-connect-scope: READ

  /rest/api/3/project:
    get:
      tags:
        - Projects
      summary: Get all projects
      description: >-
        Returns all projects visible to the user. Deprecated, use [ Get projects
        paginated](#api-rest-api-3-project-search-get) that supports search and
        pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Projects are returned only
        where the user has *Browse Projects* or *Administer projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getAllProjects_get
      parameters:
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expanded
            options include:

             *  `description` Returns the project description.
             *  `issueTypes` Returns all issue types associated with the project.
             *  `lead` Returns information about the the project lead.
             *  `projectKeys` Returns all project keys associated with the project.
          schema:
            type: string
        - name: recent
          in: query
          description: >-
            Returns the user's most recently accessed projects. You may specify
            the number of results to return up to a maximum of 20. If access is
            anonymous, then the recently accessed projects are based on the
            current HTTP session.
          schema:
            type: integer
            format: int32
        - name: properties
          in: query
          description: >-
            A list of project properties to return for the project. This
            parameter accepts a comma-separated list.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
              example: >-
                [{"self":"http://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project
                Category"},"simplified":false,"style":"classic"},{"self":"http://your-domain.atlassian.net/rest/api/3/project/ABC","id":"10001","key":"ABC","name":"Alphabetical","avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic"}]
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: true
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
    post:
      tags:
        - Projects
      summary: Create project
      description: >-
        Creates a project based on a project type template, as shown in the
        following table:


        <table> 
         <thead> 
          <tr> 
           <th>Project Type Key</th> 
           <th>Project Template Key</th> 
          </tr> 
         </thead> 
         <tbody> 
          <tr> 
           <td><code>business</code></td> 
           <td><code>com.atlassian.jira-core-project-templates:jira-core-simplified-content-management</code>, <code>com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval</code>, <code>com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking</code>, <code>com.atlassian.jira-core-project-templates:jira-core-simplified-process-control</code>, <code>com.atlassian.jira-core-project-templates:jira-core-simplified-procurement</code>, <code>com.atlassian.jira-core-project-templates:jira-core-simplified-project-management</code>, <code>com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment</code>, <code>com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking</code> </td> 
          </tr> 
          <tr> 
           <td><code>service_desk</code></td> 
           <td><code>com.atlassian.servicedesk:simplified-it-service-desk</code>, <code>com.atlassian.servicedesk:simplified-internal-service-desk</code>, <code>com.atlassian.servicedesk:simplified-external-service-desk</code> </td> 
          </tr> 
          <tr> 
           <td><code>software</code></td> 
           <td><code>com.pyxis.greenhopper.jira:gh-simplified-agility-kanban</code>, <code>com.pyxis.greenhopper.jira:gh-simplified-agility-scrum</code>, <code>com.pyxis.greenhopper.jira:gh-simplified-basic</code>, <code>com.pyxis.greenhopper.jira:gh-simplified-kanban-classic</code>, <code>com.pyxis.greenhopper.jira:gh-simplified-scrum-classic</code> </td> 
          </tr> 
         </tbody>
         <tbody> 
         </tbody>
        </table>


        The project types are available according to the installed Jira features
        as follows:

         *  Jira Core, the default, enables `business` projects.
         *  Jira Service Desk enables `service_desk` projects.
         *  Jira Software enables `software` projects.

        To determine which features are installed, go to **Jira settings** >
        **Apps** > **Manage apps** and review the System Apps list. To add JIRA
        Software or JIRA Service Desk into a JIRA instance, use **Jira
        settings** > **Apps** > **Finding new apps**. For more information, see
        [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.createProject_post
      parameters: []
      requestBody:
        description: The JSON representation of the project being created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInputBean'
            example:
              notificationScheme: 10021
              description: Example Project description
              lead: Charlie
              url: 'http://atlassian.com'
              projectTemplateKey: >-
                com.atlassian.jira-core-project-templates:jira-core-simplified-process-control
              avatarId: 10200
              issueSecurityScheme: 10001
              name: Example
              permissionScheme: 10011
              assigneeType: PROJECT_LEAD
              projectTypeKey: business
              key: EX
              categoryId: 10120
        required: true
      responses:
        '201':
          description: Returned if the project is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIdentifiers'
              example: >-
                {"self":"http://example/jira/rest/api/3/project/10042","id":10010,"key":"EX"}
        '400':
          description: >-
            Returned if the request is not valid and the project could not be
            created.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: Returned if the user does not have permission to create projects.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'manage:jira-configuration'
        - {}
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/project/search:
    get:
      tags:
        - Projects
      summary: Get projects paginated
      description: >-
        Returns projects visible to the user.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Projects are returned only
        where the user has *Browse Projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.searchProjects_get
      parameters:
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: The maximum number of items to return per page. The maximum is `50`.
          schema:
            type: integer
            format: int32
            default: 50
        - name: orderBy
          in: query
          description: >-
            [Order](#ordering) the results by a field. If the `orderBy` field is
            not set, then projects are listed in ascending order by project key:

             *  `category` Sorts projects in order by project category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
             *  `key` Sorts projects in order by project key.
             *  `name` Sorts projects in alphabetical order by project name.
             *  `owner` Sorts projects in order by the project lead.
          schema:
            type: string
            enum:
              - category
              - '-category'
              - +category
              - key
              - '-key'
              - +key
              - name
              - '-name'
              - +name
              - owner
              - '-owner'
              - +owner
            default: key
        - name: query
          in: query
          description: >-
            Filter the results using a literal string. Projects with a matching
            `key` or `name` are returned (case insensitive).
          schema:
            type: string
        - name: typeKey
          in: query
          description: >-
            Orders results by the [project
            type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes).
            This parameter accepts a comma-separated list. Valid values are
            `business`, `service_desk`, and `software`.
          schema:
            type: string
        - name: categoryId
          in: query
          description: >-
            The ID of the project's category. A complete list of category IDs is
            found using the [Get all project
            categories](#api-rest-api-3-projectCategory-get) operation.
          schema:
            type: integer
        - name: searchBy
          in: query
          schema:
            type: string
            default: 'key, name'
        - name: action
          in: query
          description: |-
            Filter results by projects for which the user can:

             *  `view` the project, meaning that they have one of the following permissions:

                 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
                 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
                 *  site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL")).
             *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             *  `edit` the project, meaning that they have one of the following permissions:

                 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
                 *  site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL")).
          schema:
            type: string
            enum:
              - view
              - browse
              - edit
            default: view
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expanded
            options include:

             *  `description` Returns the project description.
             *  `projectKeys` Returns all project keys associated with a project.
             *  `lead` Returns information about the the project lead.
             *  `issueTypes` Returns all issue types associated with the project.
             *  `url` Returns the URL associated with the project.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful. Returns a page of projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBeanProject'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/project/search?startAt=0&maxResults=2","nextPage":"http://your-domain.atlassian.net/rest/api/3/project/search?startAt=2&maxResults=2","maxResults":2,"startAt":0,"total":7,"isLast":false,"values":[{"self":"http://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project
                Category"},"simplified":false,"style":"classic"},{"self":"http://your-domain.atlassian.net/rest/api/3/project/ABC","id":"10001","key":"ABC","name":"Alphabetical","avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic"}]}
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: Returned if no projects matching the search criteria are found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ

  '/rest/api/3/project/{projectIdOrKey}':
    get:
      tags:
        - Projects
      summary: Get project
      description: >-
        Returns the [project details](https://confluence.atlassian.com/x/ahLpNw)
        for a project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getProject_get
      parameters:
        - name: projectIdOrKey
          in: path
          description: The project ID or project key (case sensitive).
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Note that
            the project description, issue types, and project lead are included
            in all responses by default. Expand options include:

             *  `description` The project description.
             *  `issueTypes` The issue types associated with the project.
             *  `lead` The project lead.
             *  `projectKeys` All project keys associated with the project.
             *  `issueTypeHierarchy` The project issue type hierarchy.
          schema:
            type: string
        - name: properties
          in: query
          description: >-
            A list of project properties to return for the project. This
            parameter accepts a comma-separated list.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Returned if successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","description":"This
                project was created as an example for
                REST.","lead":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"components":[{"self":"http://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira
                component","lead":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000}],"issueTypes":[{"self":"http://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be
                done.","iconUrl":"http://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1},{"self":"http://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"A
                problem with the
                software.","iconUrl":"http://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\",","name":"Bug","subtask":false,"avatarId":10002,"entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen
                Project"}}}],"url":"http://your-domain.atlassian.net/browse/EX","email":"from-jira@example.com","assigneeType":"PROJECT_LEAD","versions":[],"name":"Example","roles":{"Developers":"http://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project
                Category"},"simplified":false,"style":"classic","properties":{"propertyKey":"propertyValue"}}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the project is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
    put:
      tags:
        - Projects
      summary: Update project
      description: >-
        Updates the [project details](https://confluence.atlassian.com/x/ahLpNw)
        of a project.


        All parameters are optional in the body of the request.


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.updateProject_put
      parameters:
        - name: projectIdOrKey
          in: path
          description: The project ID or project key (case sensitive).
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Note that
            the project description, issue types, and project lead are included
            in all responses by default. Expand options include:

             *  `description` The project description.
             *  `issueTypes` The issue types associated with the project.
             *  `lead` The project lead.
             *  `projectKeys` All project keys associated with the project.
          schema:
            type: string
      requestBody:
        description: The project details to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInputBean'
            example:
              notificationScheme: 10021
              description: Example Project description
              lead: Charlie
              url: 'http://atlassian.com'
              projectTemplateKey: >-
                com.atlassian.jira-core-project-templates:jira-core-simplified-process-control
              avatarId: 10200
              issueSecurityScheme: 10001
              name: Example
              permissionScheme: 10011
              assigneeType: PROJECT_LEAD
              projectTypeKey: business
              key: EX
              categoryId: 10120
        required: true
      responses:
        '200':
          description: Returned if the project is updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","description":"This
                project was created as an example for
                REST.","lead":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"components":[{"self":"http://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira
                component","lead":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000}],"issueTypes":[{"self":"http://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be
                done.","iconUrl":"http://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1},{"self":"http://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"A
                problem with the
                software.","iconUrl":"http://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\",","name":"Bug","subtask":false,"avatarId":10002,"entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen
                Project"}}}],"url":"http://your-domain.atlassian.net/browse/EX","email":"from-jira@example.com","assigneeType":"PROJECT_LEAD","versions":[],"name":"Example","roles":{"Developers":"http://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project
                Category"},"simplified":false,"style":"classic","properties":{"propertyKey":"propertyValue"}}
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: |-
            Returned if:

             *  the user is not permitted to update project details.
             *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on Free plans.
        '404':
          description: Returned if the project is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'manage:jira-project'
        - {}
      x-atlassian-connect-scope: PROJECT_ADMIN
    delete:
      tags:
        - Projects
      summary: Delete project
      description: >-
        Deletes a project.


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.deleteProject_delete
      parameters:
        - name: projectIdOrKey
          in: path
          description: The project ID or project key (case sensitive).
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned if the project is deleted.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the project is not found or the user does not have
            permission to delete it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'manage:jira-configuration'
        - {}
      x-atlassian-connect-scope: PROJECT_ADMIN

  '/rest/api/3/project/{projectIdOrKey}/statuses':
    get:
      tags:
        - Projects
      summary: Get all statuses for project
      description: >-
        Returns the valid statuses for a project. The statuses are grouped by
        issue type, as each project has a set of valid issue types and each
        issue type has a set of valid statuses.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getAllStatuses_get
      parameters:
        - name: projectIdOrKey
          in: path
          description: The project ID or project key (case sensitive).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueTypeWithStatus'
              example: >-
                [{"self":"http://localhost:8090/jira/rest/api/3/issueType/3","id":"3","name":"Task","subtask":false,"statuses":[{"self":"http://localhost:8090/jira/rest/api/3/status/10000","description":"The
                issue is currently being worked
                on.","iconUrl":"http://localhost:8090/jira/images/icons/progress.gif","name":"In
                Progress","id":"10000"},{"self":"http://localhost:8090/jira/rest/api/3/status/5","description":"The
                issue is
                closed.","iconUrl":"http://localhost:8090/jira/images/icons/closed.gif","name":"Closed","id":"5"}]}]
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the project is not found or the user does not have
            permission to view it.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
  '/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}':
    put:
      tags:
        - Projects
      summary: Update project type
      description: >-
        Deprecated, this feature is no longer supported and no alternatives are
        available, see [Convert project to a different template or
        type](https://confluence.atlassian.com/x/yEKeOQ). Updates a [project
        type](https://confluence.atlassian.com/x/GwiiLQ). The project type can
        be updated for classic projects only, project type cannot be updated for
        next-gen projects.


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.updateProjectType_put
      parameters:
        - name: projectIdOrKey
          in: path
          description: The project ID or project key (case sensitive).
          required: true
          schema:
            type: string
        - name: newProjectTypeKey
          in: path
          description: The key of the new project type.
          required: true
          schema:
            type: string
            enum:
              - software
              - service_desk
              - business
      responses:
        '200':
          description: Returned if the project type is updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","description":"This
                project was created as an example for
                REST.","lead":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"components":[{"self":"http://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira
                component","lead":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000}],"issueTypes":[{"self":"http://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be
                done.","iconUrl":"http://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1},{"self":"http://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"A
                problem with the
                software.","iconUrl":"http://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\",","name":"Bug","subtask":false,"avatarId":10002,"entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen
                Project"}}}],"url":"http://your-domain.atlassian.net/browse/EX","email":"from-jira@example.com","assigneeType":"PROJECT_LEAD","versions":[],"name":"Example","roles":{"Developers":"http://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project
                Category"},"simplified":false,"style":"classic","properties":{"propertyKey":"propertyValue"}}
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the project is not found or the user does not have
            permission to view it.
      deprecated: true
      security:
        - basicAuth: []
        - OAuth2:
            - 'manage:jira-project'
        - {}
      x-atlassian-connect-scope: PROJECT_ADMIN

  '/rest/api/3/project/{projectKeyOrId}/notificationscheme':
    get:
      tags:
        - Projects
      summary: Get project notification scheme
      description: >-
        Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg)
        associated with the project. See the [Get notification
        scheme](#api-rest-api-3-notificationscheme-id-get) resource for more
        information about notification schemes.


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer
        Projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg).
      operationId: >-
        com.atlassian.jira.rest.v2.notification.ProjectNotificationSchemeResource.getNotificationScheme_get
      parameters:
        - name: projectKeyOrId
          in: path
          description: The project ID or project key (case sensitive).
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expand
            options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about any custom fields assigned to receive an event.
             *  `group` Returns information about any groups assigned to receive an event.
             *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information.
             *  `projectRole` Returns information about any project roles assigned to receive an event.
             *  `user` Returns information about any users assigned to receive an event.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationScheme'
              example: >-
                {"expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"self":"http://your-domain.atlassian.net/rest/api/3/notificationscheme","name":"notification
                scheme
                name","description":"description","notificationSchemeEvents":[{"event":{"id":1,"name":"Issue
                created","description":"Event published when an issue is
                created"},"notifications":[{"id":1,"notificationType":"Group","parameter":"jira-administrators","group":{"name":"jira-administrators","self":"http://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"},"expand":"group"},{"id":2,"notificationType":"CurrentAssignee"},{"id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"http://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a
                project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen
                Project"}}},"expand":"projectRole"},{"id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","emailAddress":"rest-developer@atlassian.com"},{"id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","user":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"expand":"user"},{"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","field":{"id":"customfield_10101","key":"customfield_10101","name":"New
                custom
                field","custom":true,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["cf[10101]","New
                custom
                field"],"schema":{"type":"project","custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101}},"expand":"field"}]},{"event":{"id":20,"name":"Custom
                event","description":"Custom event that is published together
                with an issue created
                event","templateEvent":{"id":1,"name":"Issue
                created","description":"Event published when an issue is
                created"}},"notifications":[{"id":1,"notificationType":"Group","parameter":"jira-administrators","group":{"name":"jira-administrators","self":"http://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"},"expand":"group"},{"id":2,"notificationType":"CurrentAssignee"},{"id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"http://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a
                project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen
                Project"}}},"expand":"projectRole"},{"id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","emailAddress":"rest-developer@atlassian.com"},{"id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","user":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"expand":"user"},{"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","field":{"id":"customfield_10101","key":"customfield_10101","name":"New
                custom
                field","custom":true,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["cf[10101]","New
                custom
                field"],"schema":{"type":"project","custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101}},"expand":"field"}]}]}
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the project is not found or the user is not an
            administrator.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
      x-atlassian-connect-scope: READ

  /rest/api/3/search:
    get:
      tags:
        - Issue search
      summary: Search for issues using JQL (GET)
      description: >-
        Searches for issues using
        [JQL](https://confluence.atlassian.com/x/egORLQ).


        If the JQL query expression is too large to be encoded as a query
        parameter, use the [POST](#api-rest-api-3-search-post) version of this
        resource.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Issues are included in the
        response where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: >-
        com.atlassian.jira.rest.v2.search.SearchResource.searchForIssuesUsingJql_get
      parameters:
        - name: jql
          in: query
          description: >-
            The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines
            the search. Note:

             *  If no JQL expression is provided, all issues are returned.
             *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.
             *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
          schema:
            type: string
            example: project = HSP
          x-showInExample: 'true'
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            format: int32
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. To manage page size,
            Jira may return fewer items per page where a large number of fields
            are requested. The greatest number of items returned per page is
            achieved when requesting `id` or `key` only.
          schema:
            type: integer
            format: int32
            default: 50
        - name: validateQuery
          in: query
          description: >-
            Determines how to validate the JQL query and treat the validation
            results. Supported values are:

             *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
             *  `warn` Returns all errors as warnings.
             *  `none` No validation is performed.
             *  `true` *Deprecated* A legacy synonym for `strict`.
             *  `false` *Deprecated* A legacy synonym for `warn`.

            Note: If the JQL is not correctly formed a 400 response code is
            returned, regardless of the `validateQuery` value.
          schema:
            type: string
            enum:
              - strict
              - warn
              - none
              - 'true'
              - 'false'
            default: strict
        - name: fields
          in: query
          description: >-
            A list of fields to return for each issue, use it to retrieve a
            subset of fields. This parameter accepts a comma-separated list.
            Allowed values:

             *  `*all` Returns all fields.
             *  `*navigable` Returns navigable fields.
             *  Any issue field, prefixed with a minus to exclude.

            Examples:

             *  `summary,comment` Returns only the summary and comments fields.
             *  `-description` Returns all navigable (default) fields except description.
             *  `*all,-comment` Returns all fields except comments.

            This parameter may be specified multiple times. For example,
            `fields=field1,field2&fields=field3`.


            Note: All navigable fields are returned by default. This differs
            from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the
            default is all fields.
          schema:
            type: array
            items:
              type: string
              default: '*navigable'
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            issues in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `renderedFields` Returns field values rendered in HTML format.
             *  `names` Returns the display name of each field.
             *  `schema` Returns the schema describing a field type.
             *  `transitions` Returns all possible transitions for the issue.
             *  `operations` Returns all possible operations for the issue.
             *  `editmeta` Returns information about how each field can be edited.
             *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
          schema:
            type: string
        - name: properties
          in: query
          description: >-
            A list of issue property keys for issue properties to include in the
            results. This parameter accepts a comma-separated list. Multiple
            properties can also be provided using an ampersand separated list.
            For example, `properties=prop1,prop2&properties=prop3`. A maximum of
            5 issue property keys can be specified.
          schema:
            type: array
            items:
              type: string
        - name: fieldsByKeys
          in: query
          description: Reference fields by their key (rather than ID).
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
              example: >-
                {"expand":"names,schema","startAt":0,"maxResults":50,"total":1,"issues":[{"expand":"","id":"10002","self":"http://your-domain.atlassian.net/rest/api/3/issue/10002","key":"ED-1","fields":{"watcher":{"self":"http://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","isWatching":false,"watchCount":1,"watchers":[{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false}]},"attachment":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","filename":"picture.jpg","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:43.742+0000","size":23123,"mimeType":"image/jpeg","content":"https://your-domain.atlassian.net/jira/attachments/10000","thumbnail":"https://your-domain.atlassian.net/jira/secure/thumbnail/10000"}],"sub-tasks":[{"id":"10000","type":{"id":"10000","name":"","inward":"Parent","outward":"Sub-task"},"outwardIssue":{"id":"10003","key":"ED-2","self":"http://your-domain.atlassian.net/rest/api/3/issue/ED-2","fields":{"status":{"iconUrl":"http://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main
                order flow
                broken"}]}]},"project":{"self":"http://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project
                Category"},"simplified":false,"style":"classic"},"comment":[{"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque
                eget venenatis elit. Duis eu justo eget augue iaculis fermentum.
                Sed semper quam laoreet nisi egestas at posuere augue
                semper."}]}]},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:42.388+0000","updated":"2019-10-23T04:39:42.388+0000","visibility":{"type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended
                by"},"outwardIssue":{"id":"10004L","key":"PR-2","self":"http://your-domain.atlassian.net/rest/api/3/issue/PR-2","fields":{"status":{"iconUrl":"http://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}},{"id":"10002","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended
                by"},"inwardIssue":{"id":"10004","key":"PR-3","self":"http://your-domain.atlassian.net/rest/api/3/issue/PR-3","fields":{"status":{"iconUrl":"http://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"worklog":[{"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work
                here."}]}]},"updated":"2019-10-23T04:39:42.755+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2019-10-23T04:39:42.755+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}],"updated":1,"timetracking":{"originalEstimate":"10m","remainingEstimate":"3m","timeSpent":"6m","originalEstimateSeconds":600,"remainingEstimateSeconds":200,"timeSpentSeconds":400}}}],"warningMessages":["The
                value 'bar' does not exist for the field 'foo'."]}
        '400':
          description: Returned if the JQL query is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ
    post:
      tags:
        - Issue search
      summary: Search for issues using JQL (POST)
      description: >-
        Searches for issues using
        [JQL](https://confluence.atlassian.com/x/egORLQ).


        There is a [GET](#api-rest-api-3-search-get) version of this resource
        that can be used for smaller JQL query expressions.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Issues are included in the
        response where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      operationId: >-
        com.atlassian.jira.rest.v2.search.SearchResource.searchForIssuesUsingJql_post
      parameters: []
      requestBody:
        description: A JSON object containing the search request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestBean'
            example:
              expand:
                - names
                - schema
                - operations
              jql: project = HSP
              maxResults: 15
              fieldsByKeys: false
              fields:
                - summary
                - status
                - assignee
              startAt: 0
        required: true
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
              example: >-
                {"expand":"names,schema","startAt":0,"maxResults":50,"total":1,"issues":[{"expand":"","id":"10002","self":"http://your-domain.atlassian.net/rest/api/3/issue/10002","key":"ED-1","fields":{"watcher":{"self":"http://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","isWatching":false,"watchCount":1,"watchers":[{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false}]},"attachment":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","filename":"picture.jpg","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:43.742+0000","size":23123,"mimeType":"image/jpeg","content":"https://your-domain.atlassian.net/jira/attachments/10000","thumbnail":"https://your-domain.atlassian.net/jira/secure/thumbnail/10000"}],"sub-tasks":[{"id":"10000","type":{"id":"10000","name":"","inward":"Parent","outward":"Sub-task"},"outwardIssue":{"id":"10003","key":"ED-2","self":"http://your-domain.atlassian.net/rest/api/3/issue/ED-2","fields":{"status":{"iconUrl":"http://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main
                order flow
                broken"}]}]},"project":{"self":"http://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"http://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"http://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"http://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"http://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"http://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project
                Category"},"simplified":false,"style":"classic"},"comment":[{"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque
                eget venenatis elit. Duis eu justo eget augue iaculis fermentum.
                Sed semper quam laoreet nisi egestas at posuere augue
                semper."}]}]},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2019-10-23T04:39:42.388+0000","updated":"2019-10-23T04:39:42.388+0000","visibility":{"type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended
                by"},"outwardIssue":{"id":"10004L","key":"PR-2","self":"http://your-domain.atlassian.net/rest/api/3/issue/PR-2","fields":{"status":{"iconUrl":"http://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}},{"id":"10002","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended
                by"},"inwardIssue":{"id":"10004","key":"PR-3","self":"http://your-domain.atlassian.net/rest/api/3/issue/PR-3","fields":{"status":{"iconUrl":"http://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"worklog":[{"self":"http://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work
                here."}]}]},"updated":"2019-10-23T04:39:42.755+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2019-10-23T04:39:42.755+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}],"updated":1,"timetracking":{"originalEstimate":"10m","remainingEstimate":"3m","timeSpent":"6m","originalEstimateSeconds":600,"remainingEstimateSeconds":200,"timeSpentSeconds":400}}}],"warningMessages":["The
                value 'bar' does not exist for the field 'foo'."]}
        '400':
          description: Returned if the JQL query is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-work'
        - {}
      x-atlassian-connect-scope: READ

  /rest/api/3/user:
    get:
      tags:
        - Users
      summary: Get user
      description: |-
        Returns a user.

        **[Permissions](#permissions) required:** Permission to access Jira.
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.getUser_get
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            Required.
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide)
            for details.
          schema:
            type: string
        - name: key
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide)
            for details.
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            Use [expand](#expansion) to include additional information about
            users in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `groups` includes all groups and nested groups to which the user belongs.
             *  `applicationRoles` includes details of all the applications to which the user has access.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have the *Browse users and
            groups* global permission.
        '404':
          description: |-
            Returned if:

             *  `accountId` is missing.
             *  the user is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: READ
    post:
      tags:
        - Users
      summary: Create user
      description: >-
        Creates a user. This resource is retained for legacy compatibility. As
        soon as a more suitable alternative is available this resource will be
        deprecated.


        The option is provided to set or generate a password for the user. When
        using the option to generate a password, by omitting `password` from the
        request, include `"notification": "true"` to ensure the user is sent an
        email advising them that their account is created. This email includes a
        link for the user to set their password. If the notification isn't sent
        for a generated password, the user will need to be sent a reset password
        request from Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.createUser_post
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWriteBean'
            example:
              password: abracadabra
              emailAddress: mia@atlassian.com
              displayName: Mia Krystof
              name: ''
        required: true
      responses:
        '201':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}
        '400':
          description: >-
            Returned if the request is invalid or the number of licensed users
            is exceeded.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: Returned if the user does not have the required permissions.
      deprecated: false
      security:
        - basicAuth: []
        - {}
      x-experimental: true
      x-atlassian-connect-scope: INACCESSIBLE
    delete:
      tags:
        - Users
      summary: Delete user
      description: >-
        Deletes a user.


        **[Permissions](#permissions) required:** Site administration (that is,
        membership of the *site-admin*
        [group](https://confluence.atlassian.com/x/24xjL)).
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.removeUser_delete
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            Required.
          required: true
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: key
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the user cannot be removed.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: Returned if the user does not have the required permissions.
        '404':
          description: |-
            Returned if:

             *  `accountId` is missing.
             *  the user is not found.
      deprecated: false
      security:
        - basicAuth: []
        - {}
      x-experimental: true
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/user/assignable/multiProjectSearch:
    get:
      tags:
        - User search
      summary: Find users assignable to projects
      description: >-
        Returns a list of users who can be assigned issues in one or more
        projects. The list may be restricted to users whose attributes match a
        string.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      operationId: >-
        com.atlassian.jira.rest.v2.issue.UserResource.findBulkAssignableUsers_get
      parameters:
        - name: query
          in: query
          description: >-
            A query string that is matched against user attributes, such as
            `displayName` and `emailAddress`, to find relevant users. The string
            can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `accountId` is specified.
          schema:
            type: string
            example: query
          x-showInExample: 'true'
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: accountId
          in: query
          description: >-
            A query string that is matched against user accountId. The string
            must match the accountId exactly. Required, unless `query` is
            specified.
          schema:
            type: string
        - name: projectKeys
          in: query
          description: >-
            A list of project keys (case sensitive). This parameter accepts a
            comma-separated list.
          required: true
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            format: int32
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `1000`.
          schema:
            type: integer
            format: int32
            default: 50
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example: >-
                [{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]
        '400':
          description: |-
            Returned if:

             *  `projectKeys` is missing.
             *  neither of `query` or `accountId` are provided.
             *  both `query` and `accountId` are provided.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: Returned if one or more of the projects is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: READ
  /rest/api/3/user/assignable/search:
    get:
      tags:
        - User search
      summary: Find users assignable to issues
      description: >-
        Returns a list of users that can be assigned to an issue. Use this
        operation to find the list of users who can be assigned to:

         *  a new issue, by providing the `projectKeyOrId`.
         *  an updated issue, by providing the `issueKey`.
         *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).

        In all these cases, you can pass an accountId to determine if a user can
        be assigned to an issue. The user is returned in the response if they
        can be assigned to the issue or issue transition.


        **[Permissions](#permissions) required:** Permission to access Jira.
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.findAssignableUsers_get
      parameters:
        - name: query
          in: query
          description: >-
            A query string that is matched against user attributes, such as
            `displayName`, and `emailAddress`, to find relevant users. The
            string can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `username` or `accountId` is specified.
          schema:
            type: string
            example: query
          x-showInExample: 'true'
        - name: sessionId
          in: query
          description: >-
            The sessionId of this request. SessionId is the same until the
            assignee is set.
          schema:
            type: string
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: accountId
          in: query
          description: >-
            A query string that is matched against user accountId. The string
            must match the accountId exactly. Required, unless `query` is
            specified.
          schema:
            type: string
        - name: project
          in: query
          description: >-
            The project ID or project key (case sensitive). Required, unless
            `issueKey` is specified.
          schema:
            type: string
        - name: issueKey
          in: query
          description: 'The key of the issue. Required, unless `project` is specified.'
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            format: int32
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return. This operation may return
            less than the maximum number of items even if more are available.
            The operation fetches users up to the maximum and then, from the
            fetched users, returns only the users that can be assigned to the
            issue.
          schema:
            type: integer
            format: int32
            default: 50
        - name: actionDescriptorId
          in: query
          description: The ID of the transition.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example: >-
                {"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}
        '400':
          description: |-
            Returned if:

             *  `issueKey` or `project` is missing.
             *  neither of `query` and `accountId` are provided.
             *  both `query` and `accountId` are provided.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: 'Returned if the project, issue, or transition is not found.'
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: READ
  /rest/api/3/user/bulk:
    get:
      tags:
        - Users
      summary: Bulk get users
      description: |-
        Returns details of the users specified by one or more account IDs.

        **[Permissions](#permissions) required:** Permission to access Jira.
      operationId: com.atlassian.jira.rest.v2.user.UserBulkResource.bulkGetUsers_get
      parameters:
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `200`.
          schema:
            type: integer
            format: int32
            default: 10
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: array
            items:
              type: string
        - name: key
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: array
            items:
              type: string
        - name: accountId
          in: query
          description: >-
            Account ID of a user. To specify multiple users, pass multiple
            `accountId` parameters. For example,
            `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.
            Required.
          required: true
          schema:
            type: array
            example: 5b10ac8d82e05b22cc7d4ef5
            items:
              type: string
              example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBeanUser'
              example: >-
                {"maxResults":100,"startAt":0,"total":1,"isLast":true,"values":[{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}]}
        '400':
          description: Returned if `accountID` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
      x-experimental: true
      x-atlassian-connect-scope: READ
  /rest/api/3/user/bulk/migration:
    get:
      tags:
        - Users
      summary: Get account IDs for users
      description: >-
        Returns the account IDs for the users specified in the `key` or
        `username` parameters. Note that multiple `key` or `username` parameters
        can be specified.


        **[Permissions](#permissions) required:** Permission to access Jira.
      operationId: >-
        com.atlassian.jira.rest.v2.user.UserBulkResource.bulkGetUsersMigration_get
      parameters:
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: The maximum number of items to return per page.
          schema:
            type: integer
            format: int32
            default: 10
        - name: username
          in: query
          description: >-
            Username of a user. To specify multiple users, pass multiple copies
            of this parameter. For example, `username=fred&username=barney`.
            Required if `key` isn't provided. Cannot be provided if `key` is
            present.
          schema:
            type: array
            items:
              type: string
        - name: key
          in: query
          description: >-
            Key of a user. To specify multiple users, pass multiple copies of
            this parameter. For example, `key=fred&key=barney`. Required if
            `username` isn't provided. Cannot be provided if `username` is
            present.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserMigrationBean'
              example: >-
                [{"username":"mia","accountId":"5b10a2844c20165700ede21g"},{"username":"emma","accountId":"5b10ac8d82e05b22cc7d4ef5"}]
        '400':
          description: Returned if `key` or `username`
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
      x-experimental: true
      x-atlassian-connect-scope: READ
  /rest/api/3/user/columns:
    get:
      tags:
        - Users
      summary: Get user default columns
      description: >-
        Returns the default [issue table
        columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an
        accountId is not passed in the request, the calling user's details are
        returned.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
         *  Permission to access Jira, to get the calling user's column details.
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.getUserDefaultColumns_get
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ColumnItem'
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have the *Administer Jira*
            global permission or is not accessing their user record.
        '404':
          description: Returned if the requested user is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: READ
    put:
      tags:
        - Users
      summary: Set user default columns
      description: >-
        Sets the default [ issue table
        columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an
        accountId is not passed, the calling user's default columns are set. If
        no column details are sent, then all default columns are removed.


        The parameters for this resource are expressed as HTML form data. For
        example, in curl:


        `curl -X PUT -d columns=summary -d columns=description
        https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
         *  Permission to access Jira, to set the calling user's columns.
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.setUserColumns_put
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
      requestBody:
        description: >-
          The ID of a column to set. To set multiple columns, send multiple
          `columns` parameters.
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have the *Administer Jira*
            global permission or is not accessing their user record.
        '404':
          description: Returned if the requested user is not found.
        '500':
          description: Returned if an invalid issue table column ID is sent.
      deprecated: false
      security:
        - basicAuth: []
        - {}
      x-atlassian-connect-scope: INACCESSIBLE
    delete:
      tags:
        - Users
      summary: Reset user default columns
      description: >-
        Resets the default [ issue table
        columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the
        system default. If an accountId is not passed, the calling user's
        default columns are reset.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
         *  Permission to access Jira, to set the calling user's columns.
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.resetUserColumns_delete
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have the *Administer Jira*
            global permission or is not accessing their user record.
      deprecated: false
      security:
        - basicAuth: []
        - {}
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/user/email:
    get:
      tags:
        - Users
      summary: Get user email
      description: >-
        Returns a user's email address. This API is only available to apps
        approved by Atlassian, according to these
        [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
      operationId: >-
        com.atlassian.jira.rest.v2.user.UnrestrictedUserEmailResource.getUserEmail_get
      parameters:
        - name: accountId
          in: query
          description: >-
            The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an
            opaque identifier (i.e. do not assume any structure in the value).
            Required.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnrestrictedUserEmail'
              example: name@example.com
        '400':
          description: Returned if the calling app is not approved to use this API.
        '401':
          description: >-
            Returned if the authentication credentials are incorrect or missing
            from the request (for example if a user is trying to access this
            API).
        '404':
          description: Returned if a user with the given `accountId` doesn't exist
        '503':
          description: Indicates the API is not currently enabled
      deprecated: false
      security:
        - basicAuth: []
      x-experimental: true
      x-atlassian-connect-scope: ACCESS_EMAIL_ADDRESSES
  /rest/api/3/user/email/bulk:
    get:
      tags:
        - Users
      summary: Get user email bulk
      description: >-
        Returns a user's email address. This API is only available to apps
        approved by Atlassian, according to these
        [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
      operationId: >-
        com.atlassian.jira.rest.v2.user.UnrestrictedUserEmailResource.getUserEmailBulk_get
      parameters:
        - name: accountId
          in: query
          description: >-
            the account IDs of the users for which emails are required. An
            `accountId` is an identifier that uniquely identifies the user
            across all Atlassian products. For example,
            `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an
            opaque identifier (i.e. do not assume any structure in the value).
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnrestrictedUserEmail'
        '400':
          description: Returned if the calling app is not approved to use this API.
        '401':
          description: >-
            Returned if the authentication credentials are incorrect, or missing
            from the request (for example if a user is trying to access this
            API).
        '503':
          description: Indicates the API is not currently enabled.
      deprecated: false
      security:
        - basicAuth: []
      x-experimental: true
      x-atlassian-connect-scope: ACCESS_EMAIL_ADDRESSES
  /rest/api/3/user/groups:
    get:
      tags:
        - Users
      summary: Get user groups
      description: >-
        Returns the groups to which a user belongs.


        **[Permissions](#permissions) required:** *Browse users and groups*
        [global permission](https://confluence.atlassian.com/x/x4dKLg).
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.getUserGroups_get
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            Required.
          required: true
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: key
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupName'
              example: >-
                {"name":"jira-administrators","self":"http://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"}
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have the *Browse users and
            groups* global permission.
        '404':
          description: |-
            Returned if:

             *  `accountId` is missing.
             *  the user is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: READ
  /rest/api/3/user/permission/search:
    get:
      tags:
        - User search
      summary: Find users with permissions
      description: >-
        Returns a list of users who fulfill these criteria:

         *  their user attributes match a search string.
         *  they have a set of permissions for a project or issue.

        If no search string is provided, a list of all users with the
        permissions is returned.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
         *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
      operationId: >-
        com.atlassian.jira.rest.v2.issue.UserResource.findUsersWithAllPermissions_get
      parameters:
        - name: query
          in: query
          description: >-
            A query string that is matched against user attributes, such as
            `displayName` and `emailAddress`, to find relevant users. The string
            can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `accountId` is specified.
          schema:
            type: string
            example: query
          x-showInExample: 'true'
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: accountId
          in: query
          description: >-
            A query string that is matched against user accountId. The string
            must match the accountId exactly. Required, unless `query` is
            specified.
          schema:
            type: string
        - name: permissions
          in: query
          description: >-
            A list of permissions. This parameter accepts a comma-separated
            list. The valid permissions are:

             *  ASSIGNABLE\_USER
             *  ASSIGN\_ISSUE
             *  ATTACHMENT\_DELETE\_ALL
             *  ATTACHMENT\_DELETE\_OWN
             *  BROWSE
             *  CLOSE\_ISSUE
             *  COMMENT\_DELETE\_ALL
             *  COMMENT\_DELETE\_OWN
             *  COMMENT\_EDIT\_ALL
             *  COMMENT\_EDIT\_OWN
             *  COMMENT\_ISSUE
             *  CREATE\_ATTACHMENT
             *  CREATE\_ISSUE
             *  DELETE\_ISSUE
             *  EDIT\_ISSUE
             *  LINK\_ISSUE
             *  MANAGE\_WATCHER\_LIST
             *  MODIFY\_REPORTER
             *  MOVE\_ISSUE
             *  PROJECT\_ADMIN
             *  RESOLVE\_ISSUE
             *  SCHEDULE\_ISSUE
             *  SET\_ISSUE\_SECURITY
             *  TRANSITION\_ISSUE
             *  VIEW\_VERSION\_CONTROL
             *  VIEW\_VOTERS\_AND\_WATCHERS
             *  VIEW\_WORKFLOW\_READONLY
             *  WORKLOG\_DELETE\_ALL
             *  WORKLOG\_DELETE\_OWN
             *  WORKLOG\_EDIT\_ALL
             *  WORKLOG\_EDIT\_OWN
             *  WORK\_ISSUE
          required: true
          schema:
            type: string
        - name: issueKey
          in: query
          description: The issue key for the issue.
          schema:
            type: string
        - name: projectKey
          in: query
          description: The project key for the project (case sensitive).
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            format: int32
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `1000`.
          schema:
            type: integer
            format: int32
            default: 50
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example: >-
                [{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]
        '400':
          description: |-
            Returned if:

             *  `issueKey` or `projectKey` is missing.
             *  neither of `query` or `accountId` are provided.
             *  both `query` and `accountId` are provided.
             *  `permissions` is empty or contains an invalid entry.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: Returned if the user does not have the required permissions.
        '404':
          description: Returned if the issue or project is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: READ
  /rest/api/3/user/picker:
    get:
      tags:
        - User search
      summary: Find users for picker
      description: >-
        Returns a list of users whose attributes match the query term. The
        returned object includes the `html` field where the matched query term
        is highlighted with the HTML strong tag. A list of account IDs can be
        provided to exclude users from the results.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse users and groups*
        [global permission](https://confluence.atlassian.com/x/x4dKLg).
        Anonymous calls and calls by users without the required permission
        return search results for an exact name match only.
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.findUsersForPicker_get
      parameters:
        - name: query
          in: query
          description: >-
            A query string that is matched against user attributes, such as
            `displayName`, and `emailAddress`, to find relevant users. The
            string can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*.
          required: true
          schema:
            type: string
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return. The maximum is `1000`. The
            total number of matched users is returned in `total`.
          schema:
            type: integer
            format: int32
            default: 50
        - name: showAvatar
          in: query
          description: Include the URI to the user's avatar.
          schema:
            type: boolean
            default: false
        - name: exclude
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: array
            items:
              type: string
        - name: excludeAccountIds
          in: query
          description: >-
            A list of account IDs to exclude from the search results. This
            parameter accepts a comma-separated list. Multiple account IDs can
            also be provided using an ampersand-separated list. For example,
            `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`.
            Cannot be provided with `exclude`.
          schema:
            type: array
            items:
              type: string
        - name: avatarSize
          in: query
          schema:
            type: string
        - name: excludeConnectUsers
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoundUsers'
              example: >-
                {"users":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","name":"mia","key":"mia","html":"<strong>Mi</strong>a
                Krystof - <strong>mi</strong>a@example.com
                (<strong>mi</strong>a)","displayName":"Mia
                Krystof","avatarUrl":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16"}],"total":25,"header":"Showing
                20 of 25 matching groups"}
        '400':
          description: Returned if `exclude` and `excludeAccountIds` are provided.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: READ

  /rest/api/3/user/properties:
    get:
      tags:
        - User properties
      summary: Get user property keys
      description: >-
        Returns the keys of all properties for a user.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
         *  Access to Jira, to access the calling user's property keys.

        Note: These user properties are unrelated to the [user
        properties](https://confluence.atlassian.com/x/8YxjL) that are set in
        Jira.
      operationId: >-
        com.atlassian.jira.rest.v2.userproperty.UserPropertyResource.getUserPropertyKeys_get
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            Required.
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
        - name: userKey
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyKeys'
              example: >-
                {"keys":[{"self":"http://your-domain.atlassian.net/jira/rest/api/3/issue/EX-2/properties/issue.support","key":"issue.support"}]}
        '400':
          description: Returned if `accountId` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have the *Administer Jira*
            permission or is not accessing their user record.
        '404':
          description: Returned if the user is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
      x-atlassian-connect-scope: READ
  '/rest/api/3/user/properties/{propertyKey}':
    get:
      tags:
        - User properties
      summary: Get user property
      description: >-
        Returns the value of a user's property. If no property key is provided
        [Get user property keys](#api-rest-api-3-user-properties-get) is called.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
         *  Access to Jira, to get a property from the calling user's record.

        Note: These user properties are unrelated to the [user
        properties](https://confluence.atlassian.com/x/74xjL) that are set in
        Jira.
      operationId: >-
        com.atlassian.jira.rest.v2.userproperty.UserPropertyResource.getUserProperty_get
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            Required.
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
        - name: userKey
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: propertyKey
          in: path
          description: The key of the user's property.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityProperty'
              example: >-
                {"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}
        '400':
          description: Returned if `accountId` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have the *Administer Jira*
            permission or is not accessing their user record.
        '404':
          description: Returned if the user is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
      x-atlassian-connect-scope: READ
    put:
      tags:
        - User properties
      summary: Set user property
      description: >-
        Sets the value of a user's property. Use this resource to store custom
        data against a user.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
         *  Access to Jira, to set a property on the calling user's record.

        Note: These user properties are unrelated to the [user
        properties](https://confluence.atlassian.com/x/8YxjL) that are set in
        Jira.
      operationId: >-
        com.atlassian.jira.rest.v2.userproperty.UserPropertyResource.setUserProperty_put
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            Required.
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
        - name: userKey
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: propertyKey
          in: path
          description: >-
            The key of the user's property. The maximum length is 255
            characters.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: {}
        required: true
      responses:
        '200':
          description: Returned if the user property is updated.
          content:
            application/json:
              schema:
                type: object
        '201':
          description: Returned if the user property is created.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Returned if `accountId` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have the *Administer Jira*
            permission or is not accessing their user record.
        '404':
          description: Returned if the user is not found.
        '405':
          description: Returned if the property key is not specified.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
      x-atlassian-connect-scope: WRITE
    delete:
      tags:
        - User properties
      summary: Delete user property
      description: >-
        Deletes a property from a user.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
         *  Access to Jira, to delete a property from the calling user's record.

        Note: These user properties are unrelated to the [user
        properties](https://confluence.atlassian.com/x/74xjL) that are set in
        Jira.
      operationId: >-
        com.atlassian.jira.rest.v2.userproperty.UserPropertyResource.deleteUserProperty_delete
      parameters:
        - name: accountId
          in: query
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            Required.
          schema:
            type: string
            example: 5b10ac8d82e05b22cc7d4ef5
          x-showInExample: 'true'
        - name: userKey
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: propertyKey
          in: path
          description: The key of the user's property.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned if the user property is deleted.
        '400':
          description: Returned if `accountId` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the user does not have the *Administer Jira* permission
            or is not accessing their user record.
        '404':
          description: Returned if the user or the property is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'write:jira-work'
      x-atlassian-connect-scope: DELETE
  /rest/api/3/user/search:
    get:
      tags:
        - User search
      summary: Find users
      description: >-
        Returns a list of users that match the search string and property.


        This operation takes the users in the range defined by `startAt` and
        `maxResults`, up to the thousandth user, and then returns only the users
        from that range that match the search string and property. This means
        the operation usually returns fewer users than specified in
        `maxResults`. To get a larger number of users, use [Get all
        users](#api-rest-api-3-users-search-get) and filter the records in your
        code.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse users and groups*
        [global permission](https://confluence.atlassian.com/x/x4dKLg).
        Anonymous calls or calls by users without the required permission return
        empty search results.
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.findUsers_get
      parameters:
        - name: query
          in: query
          description: >-
            A query string that is matched against user attributes (
            `displayName`, and `emailAddress`) to find relevant users. The
            string can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `accountId` or `property` is specified.
          schema:
            type: string
            example: query
          x-showInExample: 'true'
        - name: username
          in: query
          schema:
            type: string
        - name: accountId
          in: query
          description: >-
            A query string that is matched against a user accountId. The string
            must match the accountId exactly. Required, unless `query` or
            `property` is specified.
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            format: int32
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `1000`.
          schema:
            type: integer
            format: int32
            default: 50
        - name: property
          in: query
          description: >-
            A query string used to search properties. Property keys are
            specified by path, so property keys containing dot (.) or equals (=)
            characters cannot be used. The query string cannot be specified
            using a JSON object. Example: To search for the value of `nested`
            from `{"something":{"nested":1,"other":2}}` use
            `thepropertykey.something.nested=1`. Required, unless `accountId` or
            `query` are specified.
          schema:
            type: string
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example: >-
                [{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]
        '400':
          description: |-
            Returned if:

             *  `accountId`, `query` or `property` is missing.
             *  `query` and `accountId` are provided.
             *  `property` parameter is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: READ
  /rest/api/3/user/search/query:
    get:
      tags:
        - User search
      summary: Find users by query
      description: >-
        Finds users with a structured query and returns user details.


        **[Permissions](#permissions) required:** *Browse users and groups*
        [global permission](https://confluence.atlassian.com/x/x4dKLg).


        The query statements are:

         *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
         *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
         *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
         *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
         *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
         *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
         *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
         *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.

        The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2,
        ... PROJ-n)*. Statements can be combined using the `AND` and `OR`
        operators to form more complex queries. For example:


        `is assignee of PROJ AND [propertyKey].entity.property.path is "property
        value"`
      operationId: >-
        com.atlassian.jira.rest.v2.search.UserSearchResource.findUsersByQuery_get
      parameters:
        - name: query
          in: query
          description: The search query.
          required: true
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `1000`.
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBeanUser'
        '400':
          description: Returned if the query is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have *Browse users and groups*
            global permission.
        '408':
          description: Returned if the search is timed out.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
      x-atlassian-connect-scope: READ
  /rest/api/3/user/search/query/key:
    get:
      tags:
        - User search
      summary: Find user keys by query
      description: >-
        Finds users with a structured query and returns a list of user keys.


        **[Permissions](#permissions) required:** *Browse users and groups*
        [global permission](https://confluence.atlassian.com/x/x4dKLg).


        The query statements are:

         *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
         *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
         *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
         *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
         *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
         *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
         *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
         *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.

        The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2,
        ... PROJ-n)*. Statements can be combined using the `AND` and `OR`
        operators to form more complex queries. For example:


        `is assignee of PROJ AND [propertyKey].entity.property.path is "property
        value"`
      operationId: >-
        com.atlassian.jira.rest.v2.search.UserSearchResource.findUserKeysByQuery_get
      parameters:
        - name: query
          in: query
          description: The search query.
          required: true
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `1000`.
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBeanUserKey'
        '400':
          description: Returned if the query is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: >-
            Returned if the calling user does not have *Browse users and groups*
            global permission.
        '408':
          description: Returned if the search is timed out.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
      x-atlassian-connect-scope: READ
  /rest/api/3/user/viewissue/search:
    get:
      tags:
        - User search
      summary: Find users with browse permission
      description: >-
        Returns a list of users who fulfill these criteria:

         *  their user attributes match a search string.
         *  they have permission to browse issues.

        Use this resource to find users who can browse:

         *  an issue, by providing the `issueKey`.
         *  any issue in a project, by providing the `projectKey`.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse users and groups*
        [global permission](https://confluence.atlassian.com/x/x4dKLg).
        Anonymous calls and calls by users without the required permission
        return empty search results.
      operationId: >-
        com.atlassian.jira.rest.v2.issue.UserResource.findUsersWithBrowsePermission_get
      parameters:
        - name: query
          in: query
          description: >-
            A query string that is matched against user attributes, such as
            `displayName` and `emailAddress`, to find relevant users. The string
            can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `accountId` is specified.
          schema:
            type: string
            example: query
          x-showInExample: 'true'
        - name: username
          in: query
          description: >-
            This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          schema:
            type: string
        - name: accountId
          in: query
          description: >-
            A query string that is matched against user accountId. The string
            must match the accountId exactly. Required, unless `query` is
            specified.
          schema:
            type: string
        - name: issueKey
          in: query
          description: >-
            The issue key for the issue. Required, unless `projectKey` is
            specified.
          schema:
            type: string
        - name: projectKey
          in: query
          description: >-
            The project key for the project (case sensitive). Required, unless
            `issueKey` is specified.
          schema:
            type: string
        - name: startAt
          in: query
          description: >-
            The index of the first item to return in a page of results (page
            offset).
          schema:
            type: integer
            format: int32
            default: 0
        - name: maxResults
          in: query
          description: >-
            The maximum number of items to return per page. The maximum is
            `1000`.
          schema:
            type: integer
            format: int32
            default: 50
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example: >-
                [{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]
        '400':
          description: |-
            Returned if:

             *  neither of `issueKey` or `projectKey` are provided.
             *  neither of `query` or `accountId` are provided.
             *  both `query` and `accountId` are provided.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: Returned if the issue or project is not found.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: READ
  /rest/api/3/users/search:
    get:
      tags:
        - Users
      summary: Get all users
      description: >-
        Returns a list of all (active and inactive) users.


        **[Permissions](#permissions) required:** *Browse users and groups*
        [global permission](https://confluence.atlassian.com/x/x4dKLg).
      operationId: com.atlassian.jira.rest.v2.issue.UsersResource.getAllUsers_get
      parameters:
        - name: startAt
          in: query
          description: The index of the first item to return.
          schema:
            type: integer
            format: int32
            default: 0
        - name: maxResults
          in: query
          description: The maximum number of items to return.
          schema:
            type: integer
            format: int32
            default: 50
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example: >-
                [{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"http://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]
        '400':
          description: Returned if the request is invalid.
        '403':
          description: Returned if the user doesn't have the required permission.
        '409':
          description: >-
            Returned if the request takes longer than 10 seconds or is
            interrupted.
      deprecated: false
      security:
        - basicAuth: []
        - OAuth2:
            - 'read:jira-user'
        - {}
      x-atlassian-connect-scope: INACCESSIBLE
components:
  schemas:
    WorkflowStatusProperties:
      required:
        - issueEditable
      type: object
      properties:
        issueEditable:
          type: boolean
          description: Whether issues are editable in this status.
      additionalProperties: false
      description: Properties of a workflow status.
    EventNotification:
      type: object
      properties:
        expand:
          type: string
          description: >-
            Expand options that include additional event notification details in
            the response.
        id:
          type: integer
          description: The ID of the notification.
        notificationType:
          type: string
          description: Identifies the recipients of the notification.
          enum:
            - CurrentAssignee
            - Reporter
            - CurrentUser
            - ProjectLead
            - ComponentLead
            - User
            - Group
            - ProjectRole
            - EmailAddress
            - AllWatchers
            - UserCustomField
            - GroupCustomField
        parameter:
          type: string
          description: |-
            The value of the `notificationType`:

             *  `User` The `parameter` is the user's account ID.
             *  `Group` The `parameter` is the group name.
             *  `ProjectRole` The `parameter` is the project role ID.
             *  `UserCustomField` The `parameter` is the ID of the custom field.
             *  `GroupCustomField` The `parameter` is the ID of the custom field.
        group:
          description: The specified group.
          allOf:
            - $ref: '#/components/schemas/GroupName'
        field:
          description: The custom user or group field.
          allOf:
            - $ref: '#/components/schemas/FieldDetails'
        emailAddress:
          type: string
          description: The email address.
        projectRole:
          description: The specified project role.
          allOf:
            - $ref: '#/components/schemas/ProjectRole'
        user:
          description: The specified user.
          allOf:
            - $ref: '#/components/schemas/UserDetails'
      additionalProperties: false
      description: Details about a notification associated with an event.
    Configuration:
      type: object
      properties:
        votingEnabled:
          type: boolean
          description: >-
            Whether the ability for users to vote on issues is enabled. See
            [Configuring Jira application
            options](https://confluence.atlassian.com/x/uYXKM) for details.
          readOnly: true
        watchingEnabled:
          type: boolean
          description: >-
            Whether the ability for users to watch issues is enabled. See
            [Configuring Jira application
            options](https://confluence.atlassian.com/x/uYXKM) for details.
          readOnly: true
        unassignedIssuesAllowed:
          type: boolean
          description: >-
            Whether the ability to create unassigned issues is enabled. See
            [Configuring Jira application
            options](https://confluence.atlassian.com/x/uYXKM) for details.
          readOnly: true
        subTasksEnabled:
          type: boolean
          description: Whether the ability to create subtasks for issues is enabled.
          readOnly: true
        issueLinkingEnabled:
          type: boolean
          description: Whether the ability to link issues is enabled.
          readOnly: true
        timeTrackingEnabled:
          type: boolean
          description: >-
            Whether the ability to track time is enabled. This property is
            deprecated.
          readOnly: true
        attachmentsEnabled:
          type: boolean
          description: Whether the ability to add attachments to issues is enabled.
          readOnly: true
        timeTrackingConfiguration:
          description: The configuration of time tracking.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/TimeTrackingConfiguration'
      additionalProperties: false
      description: Details about the configuration of Jira.
    Transitions:
      type: object
      properties:
        expand:
          type: string
          description: >-
            Expand options that include additional transitions details in the
            response.
          readOnly: true
          xml:
            attribute: true
        transitions:
          type: array
          description: List of issue transitions.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTransition'
      additionalProperties: false
      description: List of issue transitions.
    UserKey:
      type: object
      properties:
        key:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
        accountId:
          type: string
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
      additionalProperties: false
      description: List of user accountIds.
    IssuePickerSuggestionsIssueType:
      type: object
      properties:
        label:
          type: string
          description: >-
            The label of the type of issues suggested for use in
            auto-completion.
          readOnly: true
        sub:
          type: string
          description: >-
            If issue suggestions are found, returns a message indicating the
            number of issues suggestions found and returned.
          readOnly: true
        id:
          type: string
          description: The ID of the type of issues suggested for use in auto-completion.
          readOnly: true
        msg:
          type: string
          description: >-
            If no issue suggestions are found, returns a message indicating no
            suggestions were found,
          readOnly: true
        issues:
          type: array
          description: A list of issues suggested for use in auto-completion.
          readOnly: true
          items:
            $ref: '#/components/schemas/SuggestedIssue'
      additionalProperties: false
      description: A type of issue suggested for use in auto-completion.
    WorkflowId:
      required:
        - draft
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow.
        draft:
          type: boolean
          description: Whether the workflow is in the draft state.
      additionalProperties: false
      description: Properties that identify a workflow.
    IssueFieldOptionCreateBean:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          description: 'The option''s name, which is displayed in Jira.'
        properties:
          type: object
          additionalProperties: {}
          description: >-
            The properties of the option as arbitrary key-value pairs. These
            properties can be searched using JQL, if the extractions (see
            https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)
            are defined in the descriptor for the issue field module.
        config:
          $ref: '#/components/schemas/IssueFieldOptionConfiguration'
      additionalProperties: true
    NotificationRecipientsRestrictions:
      type: object
      properties:
        groups:
          type: array
          description: List of group memberships required to receive the notification.
          items:
            $ref: '#/components/schemas/GroupName'
        permissions:
          type: array
          description: List of permissions required to receive the notification.
          items:
            $ref: '#/components/schemas/RestrictedPermission'
      additionalProperties: false
      description: >-
        Details of the group membership or permissions needed to receive the
        notification.
    Watchers:
      type: object
      properties:
        self:
          type: string
          description: The URL of these issue watcher details.
          readOnly: true
        isWatching:
          type: boolean
          description: Indicates whether the calling user is watching this issue.
          readOnly: true
        watchCount:
          type: integer
          description: The number of users watching this issue.
          format: int32
          readOnly: true
        watchers:
          type: array
          description: Details of the users watching this issue.
          readOnly: true
          items:
            $ref: '#/components/schemas/UserDetails'
      additionalProperties: false
      description: The details of watchers on an issue.
      xml:
        name: watchers
    RemoteObject:
      required:
        - title
        - url
      type: object
      properties:
        url:
          type: string
          description: The URL of the item.
        title:
          type: string
          description: The title of the item.
        summary:
          type: string
          description: The summary details of the item.
        icon:
          description: >-
            Details of the icon for the item. If no icon is defined, the default
            link icon is used in Jira.
          allOf:
            - $ref: '#/components/schemas/Icon'
        status:
          description: The status of the item.
          allOf:
            - $ref: '#/components/schemas/Status'
      additionalProperties: true
      description: The linked item.
    LinkedIssue:
      type: object
      properties:
        id:
          type: string
          description: The ID of an issue. Required if `key` isn't provided.
        key:
          type: string
          description: The key of an issue. Required if `id` isn't provided.
        self:
          type: string
          description: The URL of the issue.
          format: uri
          readOnly: true
        fields:
          description: The fields associated with the issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Fields'
      additionalProperties: false
      description: The ID or key of a linked issue.
    IssueFieldOption:
      required:
        - id
        - value
      type: object
      properties:
        id:
          type: integer
          description: >-
            The unique identifier for the option. This is only unique within the
            select field's set of options.
        value:
          type: string
          description: 'The option''s name, which is displayed in Jira.'
        properties:
          type: object
          additionalProperties: {}
          description: >-
            The properties of the object, as arbitrary key-value pairs. These
            properties can be searched using JQL, if the extractions (see [Issue
            Field Option Property
            Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/))
            are defined in the descriptor for the issue field module.
        config:
          $ref: '#/components/schemas/IssueFieldOptionConfiguration'
      additionalProperties: false
      description: Details of the options for a select list issue field.
    Status:
      type: object
      properties:
        resolved:
          type: boolean
          description: >-
            Indicates whether the item is resolved. If set to "true", the link
            to the issue is displayed in a strikethrough font, otherwise the
            link displays in normal font.
        icon:
          description: >-
            Details of the icon representing the status. If not provided, no
            status icon displays in Jira.
          allOf:
            - $ref: '#/components/schemas/Icon'
      additionalProperties: true
      description: The status of the item.
    IssueLink:
      type: object
      properties:
        id:
          type: string
          description: The ID of the issue link.
          readOnly: true
        self:
          type: string
          description: The URL of the issue link.
          format: uri
          readOnly: true
        type:
          description: The type of link between the issues.
          allOf:
            - $ref: '#/components/schemas/IssueLinkType'
        inwardIssue:
          description: The issue the link joins to.
          allOf:
            - $ref: '#/components/schemas/LinkedIssue'
        outwardIssue:
          description: The issue the link originates from.
          allOf:
            - $ref: '#/components/schemas/LinkedIssue'
      additionalProperties: false
      description: Details of a link between issues.
      xml:
        name: issueLinks
    ChangedWorklog:
      type: object
      properties:
        worklogId:
          type: integer
          description: The ID of the worklog.
          readOnly: true
        updatedTime:
          type: integer
          description: The datetime of the change.
          readOnly: true
        properties:
          type: array
          description: Details of properties associated with the change.
          readOnly: true
          items:
            $ref: '#/components/schemas/EntityProperty'
      additionalProperties: false
      description: Details of a changed worklog.
    avatarUrls:
      description: The avatars of the user.
      $ref: '#/components/schemas/AvatarUrlsBean'
    BulkOperationErrorResult:
      type: object
      properties:
        status:
          type: integer
          format: int32
        elementErrors:
          $ref: '#/components/schemas/ErrorCollection'
        failedElementNumber:
          type: integer
          format: int32
      additionalProperties: false
    SimpleErrorCollection:
      type: object
      properties:
        errors:
          type: object
          additionalProperties:
            type: string
          description: >-
            The list of errors by parameter returned by the operation. For
            example,"projectKey": "Project keys must start with an uppercase
            letter, followed by one or more uppercase alphanumeric characters."
        errorMessages:
          type: array
          description: >-
            The list of error messages produced by this operation. For example,
            "input parameter 'key' must be provided"
          items:
            type: string
        httpStatusCode:
          type: integer
          format: int32
      additionalProperties: false
    IssuesAndJQLQueries:
      required:
        - issueIds
        - jqls
      type: object
      properties:
        jqls:
          type: array
          description: A list of JQL queries.
          items:
            type: string
            description: A list of JQL queries.
        issueIds:
          uniqueItems: true
          type: array
          description: A list of issue IDs.
          items:
            type: integer
            description: A list of issue IDs.
      additionalProperties: false
      description: List of issues and JQL queries.
    Workflow:
      required:
        - description
      type: object
      properties:
        id:
          $ref: '#/components/schemas/PublishedWorkflowId'
        description:
          type: string
          description: The description of the workflow.
        transitions:
          type: array
          description: The transitions of the workflow.
          items:
            $ref: '#/components/schemas/Transition'
        statuses:
          type: array
          description: The statuses of the workflow.
          items:
            $ref: '#/components/schemas/WorkflowStatus'
      additionalProperties: false
      description: Details about a workflow.
    ConnectWorkflowTransitionRule:
      required:
        - id
        - key
      type: object
      properties:
        id:
          type: string
          description: The ID of the transition rule.
        key:
          type: string
          description: 'The key of the rule, as defined in the Connect app descriptor.'
          readOnly: true
        configuration:
          $ref: '#/components/schemas/RuleConfiguration'
        transition:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/WorkflowTransition'
      additionalProperties: false
      description: A workflow transition rule.
    FoundGroups:
      type: object
      properties:
        header:
          type: string
          description: >-
            Header text indicating the number of groups in the response and the
            total number of groups found in the search.
        total:
          type: integer
          description: The total number of groups found in the search.
          format: int32
        groups:
          type: array
          items:
            $ref: '#/components/schemas/FoundGroup'
      additionalProperties: false
      description: >-
        The list of groups found in a search, including header text (Showing X
        of Y matching groups) and total of matched groups.
      xml:
        name: groupsuggestions
    JqlQueriesToParse:
      required:
        - queries
      type: object
      properties:
        queries:
          minLength: 1
          type: array
          description: A list of queries to parse.
          items:
            minLength: 1
            type: string
      additionalProperties: false
      description: A list of JQL queries to parse.
      writeOnly: true
    SimpleListWrapperGroupName:
      type: object
      properties:
        size:
          type: integer
          format: int32
          xml:
            attribute: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/GroupName'
        pagingCallback:
          $ref: '#/components/schemas/ListWrapperCallbackGroupName'
        callback:
          $ref: '#/components/schemas/ListWrapperCallbackGroupName'
        max-results:
          type: integer
          format: int32
          xml:
            name: max-results
            attribute: true
      additionalProperties: false
      xml:
        name: list
    Project:
      type: object
      properties:
        expand:
          type: string
          description: >-
            Expand options that include additional project details in the
            response.
          readOnly: true
          xml:
            attribute: true
        self:
          type: string
          description: The URL of the project details.
          format: uri
          readOnly: true
        id:
          type: string
          description: The ID of the project.
        key:
          type: string
          description: The key of the project.
          readOnly: true
        description:
          type: string
          description: A brief description of the project.
          readOnly: true
        lead:
          description: The username of the project lead.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        components:
          type: array
          description: List of the components contained in the project.
          readOnly: true
          items:
            $ref: '#/components/schemas/Component'
        issueTypes:
          type: array
          description: List of the issue types available in the project.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeBean'
        url:
          type: string
          description: >-
            A link to information about this project, such as project
            documentation.
          readOnly: true
        email:
          type: string
          description: An email address associated with the project.
        assigneeType:
          type: string
          description: The default assignee when creating issues for this project.
          readOnly: true
          enum:
            - PROJECT_LEAD
            - UNASSIGNED
        versions:
          type: array
          description: >-
            The versions defined in the project. For more information, see
            [Create version](#api-rest-api-3-version-post).
          readOnly: true
          items:
            $ref: '#/components/schemas/Version'
        name:
          type: string
          description: The name of the project.
          readOnly: true
        roles:
          type: object
          additionalProperties:
            type: string
            format: uri
            readOnly: true
          description: >-
            The name and self URL for each role defined in the project. For more
            information, see [Create project role](#api-rest-api-3-role-post).
          readOnly: true
        avatarUrls:
          description: The URLs of the project's avatars.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        projectCategory:
          description: The category the project belongs to.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectCategory'
        projectTypeKey:
          type: string
          description: >-
            The [project
            type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes)
            of the project.
          readOnly: true
          enum:
            - software
            - service_desk
            - business
        simplified:
          type: boolean
          description: Indicates whether the project is simplified.
          readOnly: true
        style:
          type: string
          description: The type of the project.
          readOnly: true
          enum:
            - CLASSIC
            - NEXTGEN
            - classic
            - next-gen
        favourite:
          type: boolean
          description: Indicates whether the project is selected as a favorite.
        isPrivate:
          type: boolean
          description: Indicates whether the project is private.
          readOnly: true
        issueTypeHierarchy:
          description: The issue type hierarchy for the project
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Hierarchy'
        permissions:
          description: User permissions on the project
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectPermissions'
        properties:
          type: object
          additionalProperties:
            readOnly: true
          description: Map of project properties
          readOnly: true
        uuid:
          type: string
          description: unique ID for next-gen projects
          format: uuid
          readOnly: true
      additionalProperties: false
      description: Details about a project.
      xml:
        name: project
    SimpleListWrapperApplicationRole:
      type: object
      properties:
        size:
          type: integer
          format: int32
          xml:
            attribute: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRole'
        pagingCallback:
          $ref: '#/components/schemas/ListWrapperCallbackApplicationRole'
        callback:
          $ref: '#/components/schemas/ListWrapperCallbackApplicationRole'
        max-results:
          type: integer
          format: int32
          xml:
            name: max-results
            attribute: true
      additionalProperties: false
      xml:
        name: list
    ProjectAvatars:
      type: object
      properties:
        system:
          type: array
          description: List of avatars included with Jira. These avatars cannot be deleted.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
        custom:
          type: array
          description: List of avatars added to Jira. These avatars may be deleted.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
      additionalProperties: false
      description: List of project avatars.
    LinkIssueRequestJsonBean:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/IssueLinkType'
        inwardIssue:
          $ref: '#/components/schemas/LinkedIssue'
        outwardIssue:
          $ref: '#/components/schemas/LinkedIssue'
        comment:
          $ref: '#/components/schemas/Comment'
      additionalProperties: false
    IssueFieldOptionConfiguration:
      type: object
      properties:
        scope:
          description: >-
            Defines the projects that the option is available in. If the scope
            is not defined, then the option is available in all projects.
          allOf:
            - $ref: '#/components/schemas/IssueFieldOptionScopeBean'
        attributes:
          uniqueItems: true
          type: array
          description: DEPRECATED
          items:
            type: string
            enum:
              - notSelectable
              - defaultValue
      additionalProperties: false
      description: Details of the projects the option is available in.
    ProjectIssueSecurityLevels:
      required:
        - levels
      type: object
      properties:
        levels:
          type: array
          description: Issue level security items list.
          readOnly: true
          items:
            $ref: '#/components/schemas/SecurityLevel'
      additionalProperties: false
      description: List of issue level security items in a project.
    PageBeanUser:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/User'
      additionalProperties: false
      description: A page of items.
    PermittedProjects:
      type: object
      properties:
        projects:
          type: array
          description: A list of projects.
          readOnly: true
          items:
            $ref: '#/components/schemas/ProjectIdentifierBean'
      additionalProperties: false
      description: A list of projects in which a user is granted permissions.
    IconBean:
      type: object
      properties:
        url16x16:
          type: string
          description: The URL of a 16x16 pixel icon.
        title:
          type: string
          description: 'The title of the icon, for use as a tooltip on the icon.'
        link:
          type: string
          description: 'The URL of the tooltip, used only for a status icon.'
      additionalProperties: false
      description: An icon.
      xml:
        name: icon
    IssueTypeIssueCreateMetadata:
      type: object
      properties:
        self:
          type: string
          description: The URL of these issue type details.
          readOnly: true
        id:
          type: string
          description: The ID of the issue type.
          readOnly: true
        description:
          type: string
          description: The description of the issue type.
          readOnly: true
        iconUrl:
          type: string
          description: The URL of the issue type's avatar.
          readOnly: true
        name:
          type: string
          description: The name of the issue type.
          readOnly: true
        subtask:
          type: boolean
          description: Indicates whether this issue type is used to create subtasks.
          readOnly: true
        avatarId:
          type: integer
          description: The ID of the issue type's avatar.
          readOnly: true
        entityId:
          type: string
          description: project unique ID for next-gen entities
          format: uuid
          readOnly: true
        scope:
          description: Details of the next-gen projects the issue type is available in.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Scope'
        expand:
          type: string
          description: >-
            Expand options that include additional issue type metadata details
            in the response.
          readOnly: true
          xml:
            attribute: true
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldMetadata'
          description: >-
            List of the fields available when creating an issue for the issue
            type.
          readOnly: true
      additionalProperties: false
      description: Details of the issue creation metadata for an issue type.
    Group:
      type: object
      properties:
        name:
          type: string
          description: The name of group.
        self:
          type: string
          description: The URL for these group details.
          format: uri
          readOnly: true
        users:
          description: >-
            A paginated list of the users that are members of the group. A
            maximum of 50 users is returned in the list, to access additional
            users append `[start-index:end-index]` to the expand request. For
            example, to access the next 50 users, use`?expand=users[51:100]`.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PagedListUserDetailsApplicationUser'
        expand:
          type: string
          description: >-
            Expand options that include additional group details in the
            response.
          readOnly: true
          xml:
            attribute: true
      additionalProperties: false
    WebhookDetails:
      required:
        - jqlFilter
      type: object
      properties:
        jqlFilter:
          type: string
          description: >-
            The JQL filter that specifies which issues the webhook is sent for.
            Only a subset of JQL can be used. The supported elements are:

             *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]` (for custom fields—only the epic label custom field is supported).
             *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
        events:
          type: array
          description: The Jira events that trigger the webhook.
          items:
            type: string
            enum:
              - 'jira:issue_created'
              - 'jira:issue_updated'
              - 'jira:issue_deleted'
              - comment_created
              - comment_updated
              - comment_deleted
      additionalProperties: false
      description: A list of webhooks.
    PermissionScheme:
      required:
        - name
      type: object
      properties:
        expand:
          type: string
          description: The expand options available for the permission scheme.
          readOnly: true
        id:
          type: integer
          description: The ID of the permission scheme.
          readOnly: true
        self:
          type: string
          description: The URL of the permission scheme.
          format: uri
          readOnly: true
        name:
          type: string
          description: >-
            The name of the permission scheme. Must be unique. Required when
            creating or updating a permission scheme.
        description:
          type: string
          description: A description for the permission scheme.
        scope:
          description: The scope of the permission scheme.
          allOf:
            - $ref: '#/components/schemas/Scope'
        permissions:
          type: array
          description: >-
            The permission scheme to create or update. See [About permission
            schemes and grants](#about-permission-schemes-and-grants) for more
            information.
          items:
            $ref: '#/components/schemas/PermissionGrant'
      additionalProperties: true
      description: Details of a permission scheme.
    CustomFieldOptionDetails:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the custom field option.
          readOnly: true
        value:
          type: string
          description: The value of the custom field option.
          readOnly: true
      additionalProperties: false
      description: Details of a custom field option.
    FieldDetails:
      type: object
      properties:
        id:
          type: string
          description: The ID of the field.
        key:
          type: string
          description: The key of the field.
        name:
          type: string
          description: The name of the field.
        custom:
          type: boolean
          description: Indicates whether the field is a custom field.
        orderable:
          type: boolean
          description: >-
            Indicates whether the content of the field can be used to order
            lists.
        navigable:
          type: boolean
          description: >-
            Indicates whether the field can be used as a column on the issue
            navigator.
        searchable:
          type: boolean
          description: Indicates whether the content of the field can be searched.
        clauseNames:
          uniqueItems: true
          type: array
          description: >-
            The names that can be used to reference the field in an advanced
            search. For more information, see [Advanced searching - fields
            reference](https://confluence.atlassian.com/x/gwORLQ).
          items:
            type: string
        scope:
          description: The scope of the field.
          allOf:
            - $ref: '#/components/schemas/Scope'
        schema:
          description: The data schema for the field.
          allOf:
            - $ref: '#/components/schemas/JsonTypeBean'
      additionalProperties: false
      description: Details about a field.
      xml:
        name: field
    CreateUpdateRoleRequestBean:
      type: object
      properties:
        name:
          type: string
          description: >-
            The name of the project role. Must be unique. Cannot begin or end
            with whitespace. The maximum length is 255 characters. Required when
            creating a project role. Optional when partially updating a project
            role.
        description:
          type: string
          description: >-
            A description of the project role. Required when fully updating a
            project role. Optional when creating or partially updating a project
            role.
      additionalProperties: false
    JqlQuery:
      type: object
      properties:
        where:
          $ref: '#/components/schemas/JqlQueryClause'
        orderBy:
          $ref: '#/components/schemas/JqlQueryOrderByClause'
      additionalProperties: false
      description: A parsed JQL query.
    PageBeanWebhook:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Webhook'
      additionalProperties: false
      description: A page of items.
    DeleteAndReplaceVersionBean:
      type: object
      properties:
        moveFixIssuesTo:
          type: integer
          description: >-
            The ID of the version to update `fixVersion` to when the field
            contains the deleted version.
        moveAffectedIssuesTo:
          type: integer
          description: >-
            The ID of the version to update `affectedVersion` to when the field
            contains the deleted version.
        customFieldReplacementList:
          type: array
          description: >-
            An array of custom field IDs (`customFieldId`) and version IDs
            (`moveTo`) to update when the fields contain the deleted version.
          items:
            $ref: '#/components/schemas/CustomFieldReplacement'
      additionalProperties: false
    Notification:
      type: object
      properties:
        subject:
          type: string
          description: >-
            The subject of the email notification for the issue. If this is not
            specified, then the subject is set to the issue key and summary.
        textBody:
          type: string
          description: The plain text body of the email notification for the issue.
        htmlBody:
          type: string
          description: The HTML body of the email notification for the issue.
        to:
          description: The recipients of the email notification for the issue.
          allOf:
            - $ref: '#/components/schemas/NotificationRecipients'
        restrict:
          description: Restricts the notifications to users with the specified permissions.
          allOf:
            - $ref: '#/components/schemas/NotificationRecipientsRestrictions'
      additionalProperties: true
      description: Details about a notification.
    ChangeDetails:
      type: object
      properties:
        field:
          type: string
          description: The name of the field changed.
          readOnly: true
        fieldtype:
          type: string
          description: The type of the field changed.
          readOnly: true
        fieldId:
          type: string
          description: The ID of the field changed.
          readOnly: true
        from:
          type: string
          description: The details of the original value.
          readOnly: true
        fromString:
          type: string
          description: The details of the original value as a string.
          readOnly: true
        to:
          type: string
          description: The details of the new value.
          readOnly: true
        toString:
          type: string
          description: The details of the new value as a string.
          readOnly: true
      additionalProperties: false
      description: A change item.
    UserWriteBean:
      required:
        - displayName
        - emailAddress
      type: object
      properties:
        self:
          type: string
          description: The URL of the user.
          readOnly: true
        key:
          type: string
          description: >-
            The key for the user. When provided with `name`, overrides the value
            in `name` to set both `name` and `key`. This property is deprecated
            because of privacy changes. See the [migration
            guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
        name:
          type: string
          description: >-
            The username for the user. This property is deprecated because of
            privacy changes. See the [migration
            guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
        password:
          type: string
          description: >-
            A password for the user. If a password is not set, a random password
            is generated.
        emailAddress:
          type: string
          description: The email address for the user. Required.
        displayName:
          type: string
          description: The display name for the user. Required.
        notification:
          type: string
          description: >-
            Sends the user an email confirmation that they have been added to
            Jira. Default is `false`.
        applicationKeys:
          type: array
          description: 'Deprecated, do not use.'
          items:
            type: string
      additionalProperties: true
    IssueTypeWithStatus:
      required:
        - id
        - name
        - self
        - statuses
        - subtask
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue type's status details.
          readOnly: true
        id:
          type: string
          description: The ID of the issue type.
          readOnly: true
        name:
          type: string
          description: The name of the issue type.
          readOnly: true
        subtask:
          type: boolean
          description: Indicates whether this issue type represents subtasks.
          readOnly: true
        statuses:
          type: array
          description: List of status details for the issue type.
          readOnly: true
          items:
            $ref: '#/components/schemas/StatusDetails'
      additionalProperties: false
      description: Status details for an issue type.
    IssueLinkType:
      type: object
      properties:
        id:
          type: string
          description: |-
            The ID of the issue link type and is used as follows:

             *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
             *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only.
        name:
          type: string
          description: |-
            The name of the issue link type and is used as follows:

             *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
             *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        inward:
          type: string
          description: >-
            The description of the issue link type inward link and is used as
            follows:

             *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
             *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        outward:
          type: string
          description: >-
            The description of the issue link type outward link and is used as
            follows:

             *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
             *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        self:
          type: string
          description: The URL of the issue link type. Read only.
          format: uri
          readOnly: true
      additionalProperties: false
      description: |-
        This object is used as follows:

         *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).
         *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types.
    StatusCategory:
      type: object
      properties:
        self:
          type: string
          description: The URL of the status category.
          readOnly: true
        id:
          type: integer
          description: The ID of the status category.
          readOnly: true
        key:
          type: string
          description: The key of the status category.
          readOnly: true
        colorName:
          type: string
          description: The name of the color used to represent the status category.
          readOnly: true
        name:
          type: string
          description: The name of the status category.
          readOnly: true
      additionalProperties: true
      description: A status category.
    Worklog:
      type: object
      properties:
        self:
          type: string
          description: The URL of the worklog item.
          format: uri
          readOnly: true
        author:
          description: Details of the user who created the worklog.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        updateAuthor:
          description: Details of the user who last updated the worklog.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        comment:
          description: >-
            A comment about the worklog in [Atlassian Document
            Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).
            Optional when creating or updating a worklog.
        created:
          type: string
          description: The datetime on which the worklog was created.
          format: date-time
          readOnly: true
        updated:
          type: string
          description: The datetime on which the worklog was last updated.
          format: date-time
          readOnly: true
        visibility:
          description: >-
            Details about any restrictions in the visibility of the worklog.
            Optional when creating or updating a worklog.
          allOf:
            - $ref: '#/components/schemas/Visibility'
        started:
          type: string
          description: >-
            The datetime on which the worklog effort was started. Required when
            creating a worklog. Optional when updating a worklog.
          format: date-time
        timeSpent:
          type: string
          description: >-
            The time spent working on the issue as days (\#d), hours (\#h), or
            minutes (\#m or \#). Required when creating a worklog if
            `timeSpentSeconds` isn't provided. Optional when updating a worklog.
            Cannot be provided if `timeSpentSecond` is provided.
        timeSpentSeconds:
          type: integer
          description: >-
            The time in seconds spent working on the issue. Required when
            creating a worklog if `timeSpent` isn't provided. Optional when
            updating a worklog. Cannot be provided if `timeSpent` is provided.
        id:
          type: string
          description: The ID of the worklog record.
          readOnly: true
        issueId:
          type: string
          description: The ID of the issue this worklog is for.
          readOnly: true
        properties:
          type: array
          description: >-
            Details of properties for the worklog. Optional when creating or
            updating a worklog.
          items:
            $ref: '#/components/schemas/EntityProperty'
      additionalProperties: true
      description: Details of a worklog.
      xml:
        name: worklog
    JqlQueryOrderByClauseElement:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/JqlQueryField'
        direction:
          type: string
          description: The direction in which to order the results.
          enum:
            - asc
            - desc
      additionalProperties: false
      description: An element of the order-by JQL clause.
    SystemAvatars:
      type: object
      properties:
        system:
          type: array
          description: A list of avatar details.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
      additionalProperties: false
      description: List of system avatars.
    JqlQueryUnitaryOperand:
      type: object
      description: An operand that can be part of a list operand.
      anyOf:
        - $ref: '#/components/schemas/ValueOperand'
        - $ref: '#/components/schemas/FunctionOperand'
        - $ref: '#/components/schemas/KeywordOperand'
    Votes:
      type: object
      properties:
        self:
          type: string
          description: The URL of these issue vote details.
          format: uri
          readOnly: true
        votes:
          type: integer
          description: The number of votes on the issue.
          readOnly: true
        hasVoted:
          type: boolean
          description: >-
            Indicates whether the user making this request has voted on the
            issue.
          readOnly: true
        voters:
          type: array
          description: >-
            List of the users who have voted on this issue. An empty list is
            returned when the calling user doesn't have the *View voters and
            watchers* project permission.
          readOnly: true
          items:
            $ref: '#/components/schemas/User'
      additionalProperties: false
      description: The details of votes on an issue.
    ChangedValueBean:
      type: object
      properties:
        fieldName:
          type: string
          description: The name of the field changed.
          readOnly: true
        changedFrom:
          type: string
          description: The value of the field before the change.
          readOnly: true
        changedTo:
          type: string
          description: The value of the field after the change.
          readOnly: true
      additionalProperties: false
      description: Details of names changed in the record event.
    WorkflowTransitionRule:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of the transition rule.
        configuration:
          description: >-
            The configuration of the transition rule. This is currently returned
            only for some of the rule types. Availability of this property is
            subject to change.
      additionalProperties: false
      description: A workflow transition rule.
    BulkIssuePropertyUpdateRequest:
      type: object
      properties:
        value:
          description: >-
            The value of the property. The value must be a
            [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob.
            The maximum length is 32768 characters.
        filter:
          description: The bulk operation filter.
          allOf:
            - $ref: '#/components/schemas/IssueFilterForBulkPropertySet'
      additionalProperties: false
      description: Bulk issue property update request details.
    PermissionsKeysBean:
      required:
        - permissions
      type: object
      properties:
        permissions:
          type: array
          description: A list of permission keys.
          items:
            type: string
      additionalProperties: false
    IssueBean:
      type: object
      properties:
        expand:
          type: string
          description: >-
            Expand options that include additional issue details in the
            response.
          readOnly: true
          xml:
            attribute: true
        id:
          type: string
          description: The ID of the issue.
          readOnly: true
        self:
          type: string
          description: The URL of the issue details.
          format: uri
          readOnly: true
        key:
          type: string
          description: The key of the issue.
          readOnly: true
        renderedFields:
          type: object
          additionalProperties:
            readOnly: true
          description: The rendered value of each field present on the issue.
          readOnly: true
        properties:
          type: object
          additionalProperties:
            readOnly: true
          description: Details of the issue properties identified in the request.
          readOnly: true
        names:
          type: object
          additionalProperties:
            type: string
            readOnly: true
          description: The ID and name of each field present on the issue.
          readOnly: true
        schema:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonTypeBean'
          description: The schema describing each field present on the issue.
          readOnly: true
        transitions:
          type: array
          description: The transitions that can be performed on the issue.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTransition'
        operations:
          description: The operations that can be performed on the issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Operations'
        editmeta:
          description: The metadata for the fields on the issue that can be amended.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/IssueUpdateMetadata'
        changelog:
          description: Details of changelogs associated with the issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PageOfChangelogs'
        versionedRepresentations:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              readOnly: true
            readOnly: true
          description: The versions of each field on the issue.
          readOnly: true
        fieldsToInclude:
          $ref: '#/components/schemas/IncludedFields'
        fields:
          type: object
          additionalProperties: {}
      additionalProperties: false
      xml:
        name: issue
    ValueOperand:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          description: The operand value.
      description: An operand that is a user-provided value.
    PermissionSchemes:
      type: object
      properties:
        permissionSchemes:
          type: array
          description: Permission schemes list.
          readOnly: true
          items:
            $ref: '#/components/schemas/PermissionScheme'
      additionalProperties: false
      description: List of all permission schemes.
    AddGroupBean:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the group.
      additionalProperties: true
    PageBeanScreen:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Screen'
      additionalProperties: false
      description: A page of items.
    ProjectRole:
      type: object
      properties:
        self:
          type: string
          description: The URL the project role details.
          format: uri
          readOnly: true
        name:
          type: string
          description: The name of the project role.
        id:
          type: integer
          description: The ID of the project role.
          readOnly: true
        description:
          type: string
          description: The description of the project role.
          readOnly: true
        actors:
          type: array
          description: The list of users who act in this role.
          readOnly: true
          items:
            $ref: '#/components/schemas/RoleActor'
        scope:
          description: >-
            The scope of the role. Indicated for roles associated with [next-gen
            projects](https://confluence.atlassian.com/x/loMyO).
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Scope'
        admin:
          type: boolean
        default:
          type: boolean
      additionalProperties: false
      description: Details about the roles in a project.
    PermissionHolder:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The type of permission holder.
        parameter:
          type: string
          description: The identifier of permission holder.
        expand:
          type: string
          description: >-
            Expand options that include additional permission holder details in
            the response.
          readOnly: true
      additionalProperties: false
      description: >-
        Details of a user, group, field, or project role that holds a
        permission. See [Holder object](#holder-object) in *Get all permission
        schemes* for more information.
    JqlQueryClause:
      type: object
      additionalProperties: false
      description: A JQL query clause.
      anyOf:
        - $ref: '#/components/schemas/CompoundClause'
        - $ref: '#/components/schemas/FieldValueClause'
        - $ref: '#/components/schemas/FieldWasClause'
        - $ref: '#/components/schemas/FieldChangedClause'
    IssuePickerSuggestions:
      type: object
      properties:
        sections:
          type: array
          description: >-
            A list of issues for an issue type suggested for use in
            auto-completion.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssuePickerSuggestionsIssueType'
      additionalProperties: false
      description: A list of issues suggested for use in auto-completion.
    JexpJqlIssues:
      type: object
      properties:
        query:
          type: string
          description: The JQL query.
        startAt:
          type: integer
          description: The index of the first issue returned from the JQL query.
        maxResults:
          type: integer
          description: >-
            The maximum number of issues that will be included on the list. This
            value is currently capped at 1000 but the cap may change without
            notice.
          format: int32
        validation:
          type: string
          description: >-
            Determines how to validate the JQL query and treat the validation
            results.
          enum:
            - strict
            - warn
            - none
          default: strict
      additionalProperties: false
      description: >-
        The JQL specifying the issues available in the evaluated Jira expression
        under the `issues` context variable. Not all issues returned by the JQL
        query will be loaded, but only a portion of them, as described by the
        `startAt` and `maxResults` properties. Iterate over pages by inspecting
        the meta data included in the response.
    IssueTypeUpdateBean:
      type: object
      properties:
        name:
          type: string
          description: >-
            The unique name for the issue type. The maximum length is 60
            characters.
        description:
          type: string
          description: The description of the issue type.
        avatarId:
          type: integer
          description: The ID of an issue type avatar.
      additionalProperties: false
    WorkflowTransition:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          description: The transition ID.
          format: int32
        name:
          type: string
          description: The transition name.
      additionalProperties: false
      description: A workflow transition.
    Webhook:
      required:
        - expirationDate
        - id
        - jqlFilter
      type: object
      properties:
        id:
          type: integer
          description: The ID of the webhook.
        jqlFilter:
          type: string
          description: The JQL filter that specifies which issues the webhook is sent for.
        events:
          type: array
          description: The Jira events that trigger the webhook.
          items:
            type: string
            enum:
              - 'jira:issue_created'
              - 'jira:issue_updated'
              - 'jira:issue_deleted'
              - comment_created
              - comment_updated
              - comment_deleted
        expirationDate:
          type: integer
          readOnly: true
      additionalProperties: false
      description: A webhook.
    WorkflowTransitionRulesUpdateErrorDetails:
      required:
        - ruleUpdateErrors
      type: object
      properties:
        workflowId:
          $ref: '#/components/schemas/WorkflowId'
        ruleUpdateErrors:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            description: >-
              A list of transition rule update errors, indexed by the transition
              rule ID. Any transition rule that appears here wasn't updated.
            items:
              type: string
              description: >-
                A list of transition rule update errors, indexed by the
                transition rule ID. Any transition rule that appears here wasn't
                updated.
          description: >-
            A list of transition rule update errors, indexed by the transition
            rule ID. Any transition rule that appears here wasn't updated.
        updateErrors:
          uniqueItems: true
          type: array
          description: >-
            The list of errors that specify why the workflow update failed. The
            workflow was not updated if the list contains any entries.
          items:
            type: string
            description: An error specifying why the workflow update failed.
      additionalProperties: false
      description: >-
        Details of any errors encountered while updating workflow transition
        rules for a workflow.
    PropertyKey:
      type: object
      properties:
        self:
          type: string
          description: The URL of the property.
          readOnly: true
        key:
          type: string
          description: The key of the property.
          readOnly: true
      additionalProperties: false
      description: Property key details.
    IssueCreateMetadata:
      type: object
      properties:
        expand:
          type: string
          description: >-
            Expand options that include additional project details in the
            response.
          readOnly: true
          xml:
            attribute: true
        projects:
          type: array
          description: List of projects and their issue creation metadata.
          readOnly: true
          items:
            $ref: '#/components/schemas/ProjectIssueCreateMetadata'
      additionalProperties: false
      description: The wrapper for the issue creation metadata for a list of projects.
    MoveFieldBean:
      type: object
      properties:
        after:
          type: string
          description: >-
            The ID of the screen tab field after which to place the moved screen
            tab field. Required if `position` isn't provided.
          format: uri
        position:
          type: string
          description: >-
            The named position to which the screen tab field should be moved.
            Required if `after` isn't provided.
          enum:
            - Earlier
            - Later
            - First
            - Last
      additionalProperties: false
    UserPermission:
      type: object
      properties:
        id:
          type: string
          description: >-
            The ID of the permission. Either `id` or `key` must be specified.
            Use [Get all permissions](#api-rest-api-3-permissions-get) to get
            the list of permissions.
        key:
          type: string
          description: >-
            The key of the permission. Either `id` or `key` must be specified.
            Use [Get all permissions](#api-rest-api-3-permissions-get) to get
            the list of permissions.
        name:
          type: string
          description: The name of the permission.
        type:
          type: string
          description: The type of the permission.
          enum:
            - GLOBAL
            - PROJECT
        description:
          type: string
          description: The description of the permission.
        havePermission:
          type: boolean
          description: >-
            Indicates whether the permission is available to the user in the
            queried context.
        deprecatedKey:
          type: boolean
          description: >-
            Indicate whether the permission key is deprecated. Note that
            deprecated keys cannot be used in the `permissions parameter of Get
            my permissions. Deprecated keys are not returned by Get all
            permissions.`
      additionalProperties: true
      description: Details of a permission and its availability to a user.
    ErrorCollection:
      type: object
      properties:
        errorMessages:
          type: array
          description: >-
            The list of error messages produced by this operation. For example,
            "input parameter 'key' must be provided"
          items:
            type: string
        errors:
          type: object
          additionalProperties:
            type: string
          description: >-
            The list of errors by parameter returned by the operation. For
            example,"projectKey": "Project keys must start with an uppercase
            letter, followed by one or more uppercase alphanumeric characters."
        status:
          type: integer
          format: int32
      additionalProperties: false
      description: Error messages from an operation.
    GroupName:
      type: object
      properties:
        name:
          type: string
          description: The name of group.
        self:
          type: string
          description: The URL for these group details.
          format: uri
          readOnly: true
      additionalProperties: false
      description: Details about a group name.
    IncludedFields:
      type: object
      properties:
        excluded:
          uniqueItems: true
          type: array
          items:
            type: string
        included:
          uniqueItems: true
          type: array
          items:
            type: string
        actuallyIncluded:
          uniqueItems: true
          type: array
          items:
            type: string
      additionalProperties: false
    NestedResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        errorCollection:
          $ref: '#/components/schemas/ErrorCollection'
      additionalProperties: false
    FieldMetadata:
      required:
        - key
        - name
        - operations
        - required
      type: object
      properties:
        required:
          type: boolean
          description: Indicates whether the field is required.
          readOnly: true
        schema:
          description: The data type of the field.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/JsonTypeBean'
        name:
          type: string
          description: The name of the field.
          readOnly: true
        key:
          type: string
          description: The key of the field.
          readOnly: true
        autoCompleteUrl:
          type: string
          description: The URL that can be used to automatically complete the field.
          readOnly: true
        hasDefaultValue:
          type: boolean
          description: Indicates whether the field has a default value.
          readOnly: true
        operations:
          type: array
          description: The list of operations that can be performed on the field.
          readOnly: true
          items:
            type: string
            readOnly: true
        allowedValues:
          type: array
          description: The list of values allowed in the field.
          readOnly: true
          items:
            readOnly: true
        defaultValue:
          description: The default value of the field.
          readOnly: true
      additionalProperties: false
      description: The metadata describing an issue field.
      xml:
        name: availableField
    IssueUpdateDetails:
      type: object
      properties:
        transition:
          description: >-
            Details of a transition. Required when performing a transition,
            optional when creating or editing an issue.
          allOf:
            - $ref: '#/components/schemas/IssueTransition'
        fields:
          type: object
          additionalProperties: {}
          description: >-
            List of issue screen fields to update, specifying the sub-field to
            update and its value for each field. This field provides a
            straightforward option when setting a sub-field. When multiple
            sub-fields or other operations are required, use `update`. Fields
            included in here cannot be included in `update`.
        update:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/FieldUpdateOperation'
          description: >-
            List of operations to perform on issue screen fields. Note that
            fields included in here cannot be included in `fields`.
        historyMetadata:
          description: Additional issue history details.
          allOf:
            - $ref: '#/components/schemas/HistoryMetadata'
        properties:
          type: array
          description: Details of issue properties to be add or update.
          items:
            $ref: '#/components/schemas/EntityProperty'
      additionalProperties: true
      description: Details of an issue update request.
    PageOfChangelogs:
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of results on the page.
          format: int32
          readOnly: true
        histories:
          type: array
          description: The list of changelogs.
          readOnly: true
          items:
            $ref: '#/components/schemas/Changelog'
      additionalProperties: false
      description: A page of changelogs.
    AssociatedItemBean:
      type: object
      properties:
        id:
          type: string
          description: The ID of the associated record.
          readOnly: true
        name:
          type: string
          description: The name of the associated record.
          readOnly: true
        typeName:
          type: string
          description: The type of the associated record.
          readOnly: true
        parentId:
          type: string
          description: The ID of the associated parent record.
          readOnly: true
        parentName:
          type: string
          description: The name of the associated parent record.
          readOnly: true
      additionalProperties: false
      description: Details of an item associated with the changed record.
    IssueLinkTypes:
      type: object
      properties:
        issueLinkTypes:
          type: array
          description: The issue link type bean.
          readOnly: true
          xml:
            name: issueLinkTypes
          items:
            $ref: '#/components/schemas/IssueLinkType'
      additionalProperties: false
      description: A list of issue link type beans.
      xml:
        name: issueLinkTypes
    Dashboard:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
          description: The ID of the dashboard.
          readOnly: true
        isFavourite:
          type: boolean
          description: >-
            Indicates whether the dashboard is selected as a favorite by the
            user.
          readOnly: true
        name:
          type: string
          description: The name of the dashboard.
          readOnly: true
        owner:
          description: The owner of the dashboard.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserBean'
        popularity:
          type: integer
          description: The number of users who have this dashboard as a favorite.
          readOnly: true
        rank:
          type: integer
          description: The rank of this dashboard.
          format: int32
          readOnly: true
        self:
          type: string
          description: The URL of these dashboard details.
          format: uri
          readOnly: true
        sharePermissions:
          type: array
          description: The details of any share permissions for the dashboard.
          readOnly: true
          items:
            $ref: '#/components/schemas/SharePermission'
        view:
          type: string
          description: The URL of the dashboard.
          readOnly: true
      additionalProperties: false
      description: Details of a dashboard.
    Attachment:
      type: object
      properties:
        self:
          type: string
          description: The URL of the attachment details response.
          readOnly: true
        id:
          type: string
          description: The ID of the attachment.
          readOnly: true
        filename:
          type: string
          description: The file name of the attachment.
          readOnly: true
        author:
          description: Details of the user who added the attachment.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        created:
          type: string
          description: The datetime the attachment was created.
          format: date-time
          readOnly: true
        size:
          type: integer
          description: The size of the attachment.
          readOnly: true
        mimeType:
          type: string
          description: The MIME type of the attachment.
          readOnly: true
        content:
          type: string
          description: The content of the attachment.
          readOnly: true
        thumbnail:
          type: string
          description: The URL of a thumbnail representing the attachment.
          readOnly: true
      additionalProperties: true
      description: Details about an attachment.
    SecuritySchemes:
      type: object
      properties:
        issueSecuritySchemes:
          type: array
          description: List of security schemes.
          readOnly: true
          items:
            $ref: '#/components/schemas/SecurityScheme'
      additionalProperties: false
      description: List of security schemes.
    SearchResults:
      type: object
      properties:
        expand:
          type: string
          description: >-
            Expand options that include additional search result details in the
            response.
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of results on the page.
          format: int32
          readOnly: true
        issues:
          type: array
          description: The list of issues found by the search.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueBean'
        warningMessages:
          type: array
          description: Any warnings related to the JQL query.
          readOnly: true
          items:
            type: string
            readOnly: true
        names:
          type: object
          additionalProperties:
            type: string
            readOnly: true
          description: The ID and name of each field in the search results.
          readOnly: true
        schema:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonTypeBean'
          description: The schema describing the field types in the search results.
          readOnly: true
      additionalProperties: false
      description: The result of a JQL search.
    FieldReferenceData:
      type: object
      properties:
        value:
          type: string
          description: The field identifier.
        displayName:
          type: string
          description: The display name of the field.
        orderable:
          type: string
          description: >-
            Indicates whether the field can be used in a query's `ORDER BY`
            clause.
          enum:
            - 'true'
            - 'false'
        searchable:
          type: string
          description: Indicates whether the content of this field can be searched.
          enum:
            - 'true'
            - 'false'
        auto:
          type: string
          description: Indicates whether the field provide auto-complete suggestions.
          enum:
            - 'true'
            - 'false'
        cfid:
          type: string
          description: 'If the item is a custom field, the ID of the custom field.'
        operators:
          type: array
          description: The valid search operators for the field.
          items:
            type: string
        types:
          type: array
          description: The data types of items in the field.
          items:
            type: string
      additionalProperties: false
      description: Details of a field that can be used in advanced searches.
    ListOperand:
      type: object
      properties:
        values:
          minLength: 1
          type: array
          description: The list of operand values.
          items:
            $ref: '#/components/schemas/JqlQueryUnitaryOperand'
      description: An operand that is a list of values.
    DefaultShareScope:
      required:
        - scope
      type: object
      properties:
        scope:
          type: string
          description: |-
            The scope of the default sharing for new filters and dashboards:

             *  `AUTHENTICATED` Shared with all logged-in users.
             *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
             *  `PRIVATE` Not shared with any users.
          enum:
            - GLOBAL
            - AUTHENTICATED
            - PRIVATE
      additionalProperties: false
      description: >-
        Details of the scope of the default sharing for new filters and
        dashboards.
      xml:
        name: defaultShareScope
    ActorsMap:
      type: object
      properties:
        user:
          type: array
          description: The user account ID of the user to add.
          items:
            type: string
        group:
          type: array
          description: The name of the group to add.
          items:
            type: string
      additionalProperties: false
    WebhookRegistrationDetails:
      required:
        - url
        - webhooks
      type: object
      properties:
        webhooks:
          type: array
          description: A list of webhooks.
          items:
            $ref: '#/components/schemas/WebhookDetails'
        url:
          type: string
          description: The URL that specifies where to send the webhooks.
      additionalProperties: false
      description: Details of webhooks to register.
    AutoCompleteSuggestions:
      type: object
      properties:
        results:
          type: array
          description: The list of suggested item.
          items:
            $ref: '#/components/schemas/AutoCompleteSuggestion'
      additionalProperties: false
      description: The results from a JQL query.
    Version:
      type: object
      properties:
        expand:
          type: string
          description: >-
            Use [expand](em>#expansion) to include additional information about
            version in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `operations` Returns the list of operations available for this version.
             *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.

            Optional for create and update.
          xml:
            attribute: true
        self:
          type: string
          description: The URL of the version.
          format: uri
          readOnly: true
        id:
          type: string
          description: The ID of the version.
          readOnly: true
        description:
          type: string
          description: >-
            The description of the version. Optional when creating or updating a
            version.
        name:
          type: string
          description: >-
            The unique name of the version. Required when creating a version.
            Optional when updating a version. The maximum length is 255
            characters.
        archived:
          type: boolean
          description: >-
            Indicates that the version is archived. Optional when creating or
            updating a version.
        released:
          type: boolean
          description: >-
            Indicates that the version is released. If the version is released a
            request to release again is ignored. Not applicable when creating a
            version. Optional when updating a version.
        startDate:
          type: string
          description: >-
            The start date of the version. Expressed in ISO 8601 format
            (yyyy-mm-dd). Optional when creating or updating a version.
          format: date
        releaseDate:
          type: string
          description: >-
            The release date of the version. Expressed in ISO 8601 format
            (yyyy-mm-dd). Optional when creating or updating a version.
          format: date
        overdue:
          type: boolean
          description: Indicates that the version is overdue.
          readOnly: true
        userStartDate:
          type: string
          description: >-
            The date on which work on this version is expected to start,
            expressed in the instance's *Day/Month/Year Format* date format.
          readOnly: true
        userReleaseDate:
          type: string
          description: >-
            The date on which work on this version is expected to finish,
            expressed in the instance's *Day/Month/Year Format* date format.
          readOnly: true
        project:
          type: string
          description: Deprecated. Use `projectId`.
        projectId:
          type: integer
          description: >-
            The ID of the project to which this version is attached. Required
            when creating a version. Not applicable when updating a version.
        moveUnfixedIssuesTo:
          type: string
          description: >-
            The URL of the self link to the version to which all unfixed issues
            are moved when a version is released. Not applicable when creating a
            version. Optional when updating a version.
          format: uri
        operations:
          type: array
          description: >-
            If the expand option `operations` is used, returns the list of
            operations available for this version.
          readOnly: true
          items:
            $ref: '#/components/schemas/SimpleLink'
        issuesStatusForFixVersion:
          description: >-
            If the expand option `issuesstatus` is used, returns the count of
            issues in this version for each of the status categories *to do*,
            *in progress*, *done*, and *unmapped*. The *unmapped* property
            contains a count of issues with a status other than *to do*, *in
            progress*, and *done*.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/VersionIssuesStatus'
      additionalProperties: false
      description: Details about a project version.
      xml:
        name: version
    WorkflowScheme:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the workflow scheme.
          readOnly: true
        name:
          type: string
          description: >-
            The name of the workflow scheme. The name must be unique. The
            maximum length is 255 characters. Required when creating a workflow
            scheme.
        description:
          type: string
          description: The description of the workflow scheme.
        defaultWorkflow:
          type: string
          description: >-
            The name of the default workflow for the workflow scheme. The
            default workflow has *All Unassigned Issue Types* assigned to it in
            Jira. If `defaultWorkflow` is not specified when creating a workflow
            scheme, it is set to *Jira Workflow (jira)*.
        issueTypeMappings:
          type: object
          additionalProperties:
            type: string
          description: >-
            The issue type to workflow mappings, where each mapping is an issue
            type ID and workflow name pair. Note that an issue type can only be
            mapped to one workflow in a workflow scheme.
        originalDefaultWorkflow:
          type: string
          description: >-
            For draft workflow schemes, this property is the name of the default
            workflow for the original workflow scheme. The default workflow has
            *All Unassigned Issue Types* assigned to it in Jira.
          readOnly: true
        originalIssueTypeMappings:
          type: object
          additionalProperties:
            type: string
            readOnly: true
          description: >-
            For draft workflow schemes, this property is the issue type to
            workflow mappings for the original workflow scheme, where each
            mapping is an issue type ID and workflow name pair. Note that an
            issue type can only be mapped to one workflow in a workflow scheme.
          readOnly: true
        draft:
          type: boolean
          description: Indicates whether the workflow scheme is a draft or not.
          readOnly: true
        lastModifiedUser:
          description: >-
            The user that last modified the draft workflow scheme. A
            modification is a change to the issue type-project mappings only.
            This property does not apply to non-draft workflows.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        lastModified:
          type: string
          description: >-
            The date-time that the draft workflow scheme was last modified. A
            modification is a change to the issue type-project mappings only.
            This property does not apply to non-draft workflows.
          readOnly: true
        self:
          type: string
          format: uri
          readOnly: true
        updateDraftIfNeeded:
          type: boolean
          description: >-
            Indicates whether to create or update a draft workflow scheme when
            updating an active workflow scheme. An active workflow scheme is a
            workflow scheme that is used by at least one project. The following
            examples show how this property works:

             *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
             *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
             *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.

            Defaults to `false`.
        issueTypes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IssueTypeBean'
          description: The issue types available in Jira.
          readOnly: true
      additionalProperties: false
      description: Details about a workflow scheme.
    JqlQueryClauseTimePredicate:
      required:
        - operand
        - operator
      type: object
      properties:
        operator:
          type: string
          description: The operator between the field and the operand.
          enum:
            - before
            - after
            - from
            - to
            - 'on'
            - during
            - by
        operand:
          $ref: '#/components/schemas/JqlQueryClauseOperand'
      description: A time predicate for a temporal JQL clause.
    ScreenableTab:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          description: The ID of the screen tab.
          readOnly: true
        name:
          type: string
          description: >-
            The name of the screen tab. Required on create and update. The
            maximum length is 255 characters.
      additionalProperties: false
      description: A screen tab.
    SecurityLevel:
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue level security item.
          readOnly: true
        id:
          type: string
          description: The ID of the issue level security item.
          readOnly: true
        description:
          type: string
          description: The description of the issue level security item.
          readOnly: true
        name:
          type: string
          description: The name of the issue level security item.
          readOnly: true
      additionalProperties: false
      description: Details of an issue level security item.
    BulkPermissionsRequestBean:
      type: object
      properties:
        projectPermissions:
          uniqueItems: true
          type: array
          description: Project permissions with associated projects and issues to look up.
          items:
            $ref: '#/components/schemas/BulkProjectPermissions'
        globalPermissions:
          uniqueItems: true
          type: array
          description: Global permissions to look up.
          items:
            type: string
      additionalProperties: false
      description: >-
        Details of global permissions to look up and project permissions with
        associated projects and issues to look up.
    Permissions:
      type: object
      properties:
        permissions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserPermission'
          description: List of permissions.
          readOnly: true
      additionalProperties: false
      description: Details about permissions.
    SimpleApplicationPropertyBean:
      type: object
      properties:
        id:
          type: string
          description: The ID of the application property.
        value:
          type: string
          description: The new value.
      additionalProperties: false
      xml:
        name: applicationProperty
    SecurityScheme:
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue security scheme.
          readOnly: true
        id:
          type: integer
          description: The ID of the issue security scheme.
          readOnly: true
        name:
          type: string
          description: The name of the issue security scheme.
          readOnly: true
        description:
          type: string
          description: The description of the issue security scheme.
          readOnly: true
        defaultSecurityLevelId:
          type: integer
          description: The ID of the default security level.
          readOnly: true
        levels:
          type: array
          items:
            $ref: '#/components/schemas/SecurityLevel'
      additionalProperties: false
      description: Details about a security scheme.
    DeprecatedWorkflow:
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow.
          readOnly: true
        description:
          type: string
          description: The description of the workflow.
          readOnly: true
        lastModifiedDate:
          type: string
          description: The datetime the workflow was last modified.
          readOnly: true
        lastModifiedUser:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          readOnly: true
        lastModifiedUserAccountId:
          type: string
          description: The account ID of the user that last modified the workflow.
          readOnly: true
        steps:
          type: integer
          description: The number of steps included in the workflow.
          format: int32
          readOnly: true
        scope:
          description: The scope where this workflow applies
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Scope'
        default:
          type: boolean
      additionalProperties: false
      description: Details about a workflow.
    WorkflowRules:
      required:
        - conditions
        - postFunctions
        - validators
      type: object
      properties:
        conditions:
          type: array
          description: The workflow conditions.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRule'
        validators:
          type: array
          description: The workflow validators.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRule'
        postFunctions:
          type: array
          description: The workflow post functions.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRule'
      additionalProperties: false
      description: A collection of transition rules.
    CustomFieldOptionValue:
      type: object
      properties:
        value:
          type: string
          description: The value of the custom field option.
      additionalProperties: false
      description: Value of a custom field option.
      writeOnly: true
    ApplicationProperty:
      type: object
      properties:
        id:
          type: string
          description: The ID of the application property. The ID and key are the same.
        key:
          type: string
          description: The key of the application property. The ID and key are the same.
        value:
          type: string
          description: The new value.
        name:
          type: string
          description: The name of the application property.
        desc:
          type: string
          description: The description of the application property.
        type:
          type: string
          description: The data type of the application property.
        defaultValue:
          type: string
          description: The default value of the application property.
        example:
          type: string
        allowedValues:
          type: array
          description: 'The allowed values, if applicable.'
          items:
            type: string
      additionalProperties: false
      description: Details of an application property.
    PagedListUserDetailsApplicationUser:
      type: object
      properties:
        size:
          type: integer
          description: The number of items on the page.
          format: int32
          readOnly: true
          xml:
            attribute: true
        items:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/UserDetails'
        max-results:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
          xml:
            name: max-results
            attribute: true
        start-index:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: start-index
            attribute: true
        end-index:
          type: integer
          description: The index of the last item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: end-index
            attribute: true
      additionalProperties: false
      description: >-
        A paged list. To access additional details append
        `[start-index:end-index]` to the expand request. For example,
        `?expand=sharedUsers[10:40]` returns a list starting at item 10 and
        finishing at item 40.
    PublishedWorkflowId:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the workflow.
      additionalProperties: false
      description: Properties that identify a published workflow.
    HierarchyOutputFragment:
      type: object
      properties:
        projectId:
          type: integer
        hierarchy:
          type: array
          items:
            $ref: '#/components/schemas/HierarchyLevelOutput'
      additionalProperties: false
    ContainerForWebhookIDs:
      required:
        - webhookIds
      type: object
      properties:
        webhookIds:
          type: array
          description: A list of webhook IDs.
          items:
            type: integer
            description: A list of webhook IDs.
      additionalProperties: false
      description: Container for a list of webhook IDs.
    ProjectType:
      type: object
      properties:
        key:
          type: string
          description: The key of the project type.
          readOnly: true
        formattedKey:
          type: string
          description: The formatted key of the project type.
          readOnly: true
        descriptionI18nKey:
          type: string
          description: The key of the project type's description.
          readOnly: true
        icon:
          type: string
          description: The icon of the project type.
          readOnly: true
        color:
          type: string
          description: The color of the project type.
          readOnly: true
      additionalProperties: false
      description: Details about a project type.
    FieldUpdateOperation:
      type: object
      properties:
        add:
          description: A map containing the name of a field and the value to add to it.
          example:
            labels: Training
            issuelinks:
              id: 10001
        set:
          description: A map containing the name of a field and the value to set in it.
          example:
            summary: A new summary
            issuetype:
              id: 10010
        remove:
          description: >-
            A map containing the name of a field and the value to removed from
            it.
          example:
            labels: Training
            components:
              id: 10017
        edit:
          description: A map containing the name of a field and the value to edit in it.
          example:
            timetracking:
              key: JIRA
      additionalProperties: false
      description: Details of an operation to perform on a field.
    Icon:
      type: object
      properties:
        url16x16:
          type: string
          description: The URL of an icon that displays at 16x16 pixel in Jira.
        title:
          type: string
          description: |-
            The title of the icon. This is used as follows:

             *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
             *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link".
        link:
          type: string
          description: >-
            The URL of the tooltip, used only for a status icon. If not set, the
            status icon in Jira is not clickable.
      additionalProperties: true
      description: |-
        An icon. If no icon is defined:

         *  for a status icon, no status icon displays in Jira.
         *  for the remote object icon, the default link icon displays in Jira.
    SearchRequestBean:
      type: object
      properties:
        jql:
          type: string
          description: 'A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.'
        startAt:
          type: integer
          description: >-
            The index of the first item to return in the page of results (page
            offset). The base index is `0`.
          format: int32
        maxResults:
          type: integer
          description: >-
            The maximum number of items to return per page. The default is `50`
            and the maximum is `100`.
          format: int32
        fields:
          type: array
          description: >-
            A list of fields to return for each issue, use it to retrieve a
            subset of fields. This parameter accepts a comma-separated list.
            Allowed values

             *  `*all` Returns all fields.
             *  `*navigable` Returns navigable fields.
             *  Any issue field, prefixed with a minus to exclude.

            The default is `*navigable`.


            Examples:

             *  `summary,comment` Returns the summary and comments fields only.
             *  `-description` Returns all navigable (default) fields except description.
             *  `*all,-comment` Returns all fields except comments.

            Multiple `fields` parameters can be included in a request.


            Note: All navigable fields are returned by default. This differs
            from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the
            default is all fields.
          items:
            type: string
        validateQuery:
          type: string
          description: >-
            Determines how to validate the JQL query and treat the validation
            results. Supported values:

             *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
             *  `warn` Returns all errors as warnings.
             *  `none` No validation is performed.
             *  `true` *Deprecated* A legacy synonym for `strict`.
             *  `false` *Deprecated* A legacy synonym for `warn`.

            The default is `strict`.


            Note: If the JQL is not correctly formed a 400 response code is
            returned, regardless of the `validateQuery` value.
          enum:
            - strict
            - warn
            - none
            - 'true'
            - 'false'
        expand:
          type: array
          description: >-
            Use [expand](em>#expansion) to include additional information about
            issues in the response. Note that, unlike the majority of instances
            where `expand` is specified, `expand` is defined as a list of
            values. The expand options are:

             *  `renderedFields` Returns field values rendered in HTML format.
             *  `names` Returns the display name of each field.
             *  `schema` Returns the schema describing a field type.
             *  `transitions` Returns all possible transitions for the issue.
             *  `operations` Returns all possible operations for the issue.
             *  `editmeta` Returns information about how each field can be edited.
             *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
          items:
            type: string
        properties:
          type: array
          description: >-
            A list of up to 5 issue properties to include in the results. This
            parameter accepts a comma-separated list.
          items:
            type: string
        fieldsByKeys:
          type: boolean
          description: >-
            Reference fields by their key (rather than ID). The default is
            `false`.
      additionalProperties: false
    AddFieldBean:
      required:
        - fieldId
      type: object
      properties:
        fieldId:
          type: string
          description: The ID of the field to add.
      additionalProperties: false
    IssueFilterForBulkPropertySet:
      type: object
      properties:
        entityIds:
          uniqueItems: true
          type: array
          description: List of issues to perform the bulk operation on.
          items:
            type: integer
        currentValue:
          description: The value of properties to perform the bulk operation on.
        hasProperty:
          type: boolean
          description: >-
            Indicates whether the bulk operation occurs only when the property
            is present on or absent from an issue.
      additionalProperties: false
      description: Bulk operation filter details.
    FoundFilter:
      required:
        - name
      type: object
      properties:
        self:
          type: string
          description: The URL of the filter.
          format: uri
          readOnly: true
        id:
          type: string
          description: The unique identifier for the filter.
          readOnly: true
        name:
          type: string
          description: The name of the filter. Must be unique.
        description:
          type: string
          description: A description of the filter.
        owner:
          description: >-
            The user who owns the filter. This is defaulted to the creator of
            the filter, however Jira administrators can change the owner of a
            shared filter in the admin settings.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        jql:
          type: string
          description: >-
            The JQL query for the filter. For example, *project = SSP AND
            issuetype = Bug*.
          readOnly: true
        viewUrl:
          type: string
          description: >-
            A URL to view the filter results in Jira, using the ID of the
            filter. For example,
            *https://your-domain.atlassian.net/issues/?filter=10100*.
          format: uri
          readOnly: true
        searchUrl:
          type: string
          description: >-
            A URL to view the filter results in Jira, using the [Search for
            issues using JQL](#api-rest-api-3-filter-search-get) operation with
            the filter's JQL string to return the filter results. For example,
            *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
          format: uri
          readOnly: true
        favourite:
          type: boolean
          description: >-
            Indicates whether the filter is selected as a favorite by any users,
            not including the filter owner.
          readOnly: true
        favouritedCount:
          type: integer
          description: >-
            The count of how many users have selected this filter as a favorite,
            including the filter owner.
          readOnly: true
        sharePermissions:
          type: array
          description: >-
            The groups and projects that the filter is shared with. This can be
            specified when updating a filter, but not when creating a filter.
          items:
            $ref: '#/components/schemas/SharePermission'
        subscriptions:
          type: array
          description: The users that are subscribed to the filter.
          readOnly: true
          items:
            $ref: '#/components/schemas/FilterSubscription'
      additionalProperties: false
      description: Details of a filter identified as part of a search.
    JQLReferenceData:
      type: object
      properties:
        visibleFieldNames:
          type: array
          description: List of fields usable in JQL queries.
          items:
            $ref: '#/components/schemas/FieldReferenceData'
        visibleFunctionNames:
          type: array
          description: List of functions usable in JQL queries.
          items:
            $ref: '#/components/schemas/FunctionReferenceData'
        jqlReservedWords:
          type: array
          description: List of JQL query reserved words.
          items:
            type: string
      additionalProperties: false
      description: Lists of JQL reference data.
    ProjectRoleActorsUpdateBean:
      type: object
      properties:
        id:
          type: integer
          description: >-
            The ID of the project role. Use [Get all project
            roles](#api-rest-api-3-role-get) to get a list of project role IDs.
          readOnly: true
        categorisedActors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: >-
            The actors to add to the project role. Add groups using
            `atlassian-group-role-actor` and a list of group names. For example,
            `"atlassian-group-role-actor":["another","administrators"]}`. Add
            users using `atlassian-user-role-actor` and a list of account IDs.
            For example,
            `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12",
            "abcdef12-3456-789a-bcde-f123456789ab"]`.
      additionalProperties: false
      xml:
        name: actor
    ParsedJqlQueries:
      required:
        - queries
      type: object
      properties:
        queries:
          minLength: 1
          type: array
          description: A list of parsed JQL queries.
          items:
            $ref: '#/components/schemas/ParsedJqlQuery'
      additionalProperties: false
      description: A list of parsed JQL queries.
    DefaultWorkflow:
      required:
        - workflow
      type: object
      properties:
        workflow:
          type: string
          description: The name of the workflow to set as the default workflow.
        updateDraftIfNeeded:
          type: boolean
          description: >-
            Indicates whether a draft workflow scheme is created or updated when
            updating an active workflow scheme. The draft is updated with the
            new default workflow. Defaults to `false`.
      additionalProperties: false
      description: Details about the default workflow.
    ProjectIdentifiers:
      required:
        - id
        - key
        - self
      type: object
      properties:
        self:
          type: string
          description: The URL of the created project.
          format: uri
          readOnly: true
        id:
          type: integer
          description: The ID of the created project.
          readOnly: true
        key:
          type: string
          description: The key of the created project.
          readOnly: true
      additionalProperties: false
      description: Identifiers for a project.
    ChangedWorklogs:
      type: object
      properties:
        values:
          type: array
          description: Changed worklog list.
          readOnly: true
          items:
            $ref: '#/components/schemas/ChangedWorklog'
        since:
          type: integer
          description: The datetime of the first worklog item in the list.
          readOnly: true
        until:
          type: integer
          description: The datetime of the last worklog item in the list.
          readOnly: true
        self:
          type: string
          description: The URL of this changed worklogs list.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: The URL of the next list of changed worklogs.
          format: uri
          readOnly: true
        lastPage:
          type: boolean
      additionalProperties: false
      description: List of changed worklogs.
    RemoteIssueLinkRequest:
      type: object
      properties:
        globalId:
          type: string
          description: >-
            An identifier for the remote item in the remote system. For example,
            the global ID for a remote item in Confluence would consist of the
            app ID and page ID, like this: `appId=456&pageId=123`.


            Setting this field enables the remote issue link details to be
            updated or deleted using remote system and item details as the
            record identifier, rather than using the record's Jira ID.


            The maximum length is 255 characters.
        application:
          description: >-
            Details of the remote application the linked item is in. For
            example, trello.
          allOf:
            - $ref: '#/components/schemas/Application'
        relationship:
          type: string
          description: >-
            Description of the relationship between the issue and the linked
            item. If not set, the relationship description "links to" is used in
            Jira.
        object:
          description: Details of the item linked to.
          allOf:
            - $ref: '#/components/schemas/RemoteObject'
      additionalProperties: true
      description: Details of a remote issue link.
    WebhooksExpirationDate:
      required:
        - expirationDate
      type: object
      properties:
        expirationDate:
          type: integer
          readOnly: true
      additionalProperties: false
      description: The date the newly refreshed webhooks expire.
    PageOfWorklogs:
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of results on the page.
          format: int32
          readOnly: true
        worklogs:
          type: array
          description: List of worklogs.
          readOnly: true
          items:
            $ref: '#/components/schemas/Worklog'
      additionalProperties: true
      description: Paginated list of worklog details
    ContainerOfWorkflowSchemeAssociations:
      required:
        - values
      type: object
      properties:
        values:
          type: array
          description: >-
            A list of workflow schemes together with projects they are
            associated with.
          items:
            $ref: '#/components/schemas/WorkflowSchemeAssociations'
      additionalProperties: false
      description: >-
        A container for a list of workflow schemes together with the projects
        they are associated with.
    JiraExpressionsComplexityValueBean:
      required:
        - limit
        - value
      type: object
      properties:
        value:
          type: integer
          description: The complexity value of the current expression.
          format: int32
        limit:
          type: integer
          description: >-
            The maximum allowed complexity. The evaluation will fail if this
            value is exceeded.
          format: int32
      additionalProperties: false
    RuleConfiguration:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          description: >-
            Configuration of the rule, as it is stored by the Connect app on the
            rule configuration page.
      additionalProperties: false
      description: A rule configuration.
    Field:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: The id of the field.
        name:
          type: string
          description: The name of the field.
        schema:
          $ref: '#/components/schemas/JsonTypeBean'
        description:
          type: string
          description: The description of the field.
        key:
          type: string
          description: The key of the field.
        screens:
          type: array
          description: List of screens where the field is used.
          items:
            $ref: '#/components/schemas/ScreenID'
        contexts:
          type: array
          description: List of contexts where the field is used.
          items:
            $ref: '#/components/schemas/ContextID'
        lastUsed:
          type: string
          description: The date when the value of the field last changed.
          format: date-time
      additionalProperties: false
      description: Details of a field.
    ServerInformation:
      type: object
      properties:
        baseUrl:
          type: string
          description: The base URL of the Jira instance.
        version:
          type: string
          description: The version of Jira.
        versionNumbers:
          type: array
          description: 'The major, minor, and revision version numbers of the Jira version.'
          items:
            type: integer
            format: int32
        deploymentType:
          type: string
          description: The type of server deployment. This is always returned as *Cloud*.
        buildNumber:
          type: integer
          description: The build number of the Jira version.
          format: int32
        buildDate:
          type: string
          description: The timestamp when the Jira version was built.
          format: date-time
        serverTime:
          type: string
          description: The time in Jira when this request was responded to.
          format: date-time
        scmInfo:
          type: string
          description: The unique identifier of the Jira version.
        serverTitle:
          type: string
          description: The name of the Jira instance.
        healthChecks:
          type: array
          description: >-
            Jira instance health check results. Deprecated and no longer
            returned.
          items:
            $ref: '#/components/schemas/HealthCheckResult'
      additionalProperties: false
      description: Details about the Jira instance.
    RegisteredWebhook:
      type: object
      properties:
        createdWebhookId:
          type: integer
          description: The ID of the webhook. Returned if the webhook is created.
        errors:
          type: array
          description: Error messages specifying why the webhook creation failed.
          items:
            type: string
            description: Error messages specifying why the webhook creation failed.
      additionalProperties: false
      description: >-
        ID of a registered webhook or error messages explaining why a webhook
        wasn't registered.
    CustomFieldOption:
      type: object
      properties:
        self:
          type: string
          description: The URL of these custom field option details.
          format: uri
          readOnly: true
        value:
          type: string
          description: The value of the custom field option.
          readOnly: true
      additionalProperties: false
      description: Details of a custom option for a field.
      xml:
        name: customFieldOption
    FunctionReferenceData:
      type: object
      properties:
        value:
          type: string
          description: The function identifier.
        displayName:
          type: string
          description: The display name of the function.
        isList:
          type: string
          description: Indicates whether the function can take a list of arguments.
          enum:
            - 'true'
            - 'false'
        types:
          type: array
          description: The data types returned by the function.
          items:
            type: string
      additionalProperties: false
      description: Details of functions that can be used in advanced searches.
    Component:
      type: object
      properties:
        self:
          type: string
          description: The URL of the component.
          format: uri
          readOnly: true
        id:
          type: string
          description: The unique identifier for the component.
          readOnly: true
        name:
          type: string
          description: >-
            The unique name for the component in the project. Required when
            creating a component. Optional when updating a component. The
            maximum length is 255 characters.
        description:
          type: string
          description: >-
            The description for the component. Optional when creating or
            updating a component.
        lead:
          description: The user details for the component's lead user.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        leadUserName:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
        leadAccountId:
          type: string
          description: >-
            The accountId of the component's lead user. The accountId uniquely
            identifies the user across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*. Optional when creating or updating a
            component.
        assigneeType:
          type: string
          description: >-
            The nominal user type used to determine the assignee for issues
            created with this component. See `realAssigneeType` for details on
            how the type of the user, and hence the user, assigned to issues is
            determined. Can take the following values:

             *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
             *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
             *  `UNASSIGNED` an assignee is not set for issues created with this component.
             *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.

            Default value: `PROJECT_DEFAULT`.  

            Optional when creating or updating a component.
          enum:
            - PROJECT_DEFAULT
            - COMPONENT_LEAD
            - PROJECT_LEAD
            - UNASSIGNED
        assignee:
          description: >-
            The details of the user associated with `assigneeType`, if any. See
            `realAssignee` for details of the user assigned to issues created
            with this component.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        realAssigneeType:
          type: string
          description: >-
            The type of the assignee that is assigned to issues created with
            this component, when an assignee cannot be set from the
            `assigneeType`. For example, `assigneeType` is set to
            `COMPONENT_LEAD` but no component lead is set. This property is set
            to one of the following values:

             *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
             *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
             *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
             *  `PROJECT_DEFAULT` when none of the preceding cases are true.
          readOnly: true
          enum:
            - PROJECT_DEFAULT
            - COMPONENT_LEAD
            - PROJECT_LEAD
            - UNASSIGNED
        realAssignee:
          description: >-
            The user assigned to issues created with this component, when
            `assigneeType` does not identify a valid assignee.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        isAssigneeTypeValid:
          type: boolean
          description: >-
            Indicates whether a user is associated with `assigneeType`. For
            example, if the `assigneeType` is set to `COMPONENT_LEAD` but the
            component lead is not set, then `false` is returned.
          readOnly: true
        project:
          type: string
          description: >-
            The key of the project the component is assigned to. Required when
            creating a component. Can't be updated.
        projectId:
          type: integer
          description: The ID of the project the component is assigned to.
          readOnly: true
      additionalProperties: false
      description: Details about a project component.
      xml:
        name: component
    UserList:
      type: object
      properties:
        size:
          type: integer
          description: The number of items on the page.
          format: int32
          readOnly: true
          xml:
            attribute: true
        items:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/User'
        max-results:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
          xml:
            name: max-results
            attribute: true
        start-index:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: start-index
            attribute: true
        end-index:
          type: integer
          description: The index of the last item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: end-index
            attribute: true
      additionalProperties: false
      description: >-
        A paginated list of users sharing the filter. This includes users that
        are members of the groups or can browse the projects that the filter is
        shared with.
    PageOfDashboards:
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of results on the page.
          format: int32
          readOnly: true
        prev:
          type: string
          description: 'The URL of the previous page of results, if any.'
          readOnly: true
        next:
          type: string
          description: 'The URL of the next page of results, if any.'
          readOnly: true
        dashboards:
          type: array
          description: List of dashboards.
          readOnly: true
          items:
            $ref: '#/components/schemas/Dashboard'
      additionalProperties: false
      description: A page containing dashboard details.
    JiraExpressionEvalContextBean:
      type: object
      properties:
        issue:
          description: >-
            The issue that is available under the `issue` variable when
            evaluating the expression.
          allOf:
            - $ref: '#/components/schemas/IdOrKeyBean'
        issues:
          description: >-
            The collection of issues that is available under the `issues`
            variable when evaluating the expression.
          allOf:
            - $ref: '#/components/schemas/JexpIssues'
        project:
          description: >-
            The project that is available under the `project` variable when
            evaluating the expression.
          allOf:
            - $ref: '#/components/schemas/IdOrKeyBean'
        sprint:
          type: integer
          description: >-
            The ID of the sprint that is available under the `sprint` variable
            when evaluating the expression.
        board:
          type: integer
          description: >-
            The ID of the board that is available under the `board` variable
            when evaluating the expression.
        serviceDesk:
          type: integer
          description: >-
            The ID of the service desk that is available under the `serviceDesk`
            variable when evaluating the expression.
        customerRequest:
          type: integer
          description: >-
            The ID of the customer request that is available under the
            `customerRequest` variable when evaluating the expression. This is
            the same as the ID of the underlying Jira issue, but the customer
            request context variable will have a different type.
      additionalProperties: false
    JqlQueryOrderByClause:
      required:
        - fields
      type: object
      properties:
        fields:
          type: array
          description: The list of order-by clause fields and their ordering directives.
          items:
            $ref: '#/components/schemas/JqlQueryOrderByClauseElement'
      additionalProperties: false
      description: Details of the order-by JQL clause.
    PageBeanString:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            type: string
            readOnly: true
      additionalProperties: false
      description: A page of items.
    CustomFieldReplacement:
      type: object
      properties:
        customFieldId:
          type: integer
          description: The ID of the custom field in which to replace the version number.
        moveTo:
          type: integer
          description: The version number to use as a replacement for the deleted version.
      additionalProperties: false
      description: Details about the replacement for a deleted version.
    ColumnItem:
      type: object
      properties:
        label:
          type: string
          description: The issue navigator column label.
        value:
          type: string
          description: The issue navigator column value.
      additionalProperties: false
      description: Details of an issue navigator column item.
    RemoteIssueLinkIdentifies:
      type: object
      properties:
        id:
          type: integer
          description: >-
            The ID of the remote issue link, such as the ID of the item on the
            remote system.
          readOnly: true
          xml:
            attribute: true
        self:
          type: string
          description: The URL of the remote issue link.
          readOnly: true
          xml:
            attribute: true
      additionalProperties: false
      description: Details of the identifiers for a created or updated remote issue link.
    ConnectModule:
      type: object
      description: >-
        A [Connect
        module](https://developer.atlassian.com/cloud/jira/platform/about-jira-modules/)
        in the same format as in the

        [app
        descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
      example:
        description:
          value: field with team
        type: single_select
        extractions:
          - path: category
            type: text
            name: categoryName
        name:
          value: Team
        key: team-field
    PageBeanVersion:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Version'
      additionalProperties: false
      description: A page of items.
    Avatar:
      type: object
      properties:
        id:
          type: string
          description: The ID of the avatar. Required when setting the project avatar.
        owner:
          type: string
          description: >-
            The owner of the avatar. For a system avatar the owner is null (and
            nothing is returned). For non-system avatars this is the appropriate
            identifier, such as the ID for a project or the accountId for a
            user.
          readOnly: true
        isSystemAvatar:
          type: boolean
          description: Indicates whether the avatar is a system avatar.
          readOnly: true
        isSelected:
          type: boolean
          description: >-
            Indicates whether the avatar is used in Jira. For example, shown as
            a project's avatar.
          readOnly: true
        isDeletable:
          type: boolean
          description: Indicates whether the avatar can be deleted.
          readOnly: true
        fileName:
          type: string
          description: The file name of the avatar icon. Returned for system avatars.
          readOnly: true
        urls:
          type: object
          additionalProperties:
            type: string
            format: uri
            readOnly: true
          description: The list of avatar icon URLs.
          readOnly: true
      additionalProperties: false
      description: Details of an avatar.
    CustomFieldDefinitionJsonBean:
      required:
        - name
        - searcherKey
        - type
      type: object
      properties:
        name:
          type: string
          description: >-
            The name of the custom field, which is displayed in Jira. This is
            not the unique identifier.
        description:
          type: string
          description: 'The description of the custom field, which is displayed in Jira.'
        type:
          type: string
          description: >-
            The type of the custom field. For example,
            *com.atlassian.jira.plugin.system.customfieldtypes:grouppicker*.

             *  `cascadingselect`: Allows multiple values to be selected using two select lists
             *  `datepicker`: Stores a date using a picker control
             *  `datetime`: Stores a date with a time component
             *  `float`: Stores and validates a numeric (floating point) input
             *  `grouppicker`: Stores a user group using a picker control
             *  `importid`: A read-only field that stores the previous ID of the issue from the system that it was imported from
             *  `labels`: Stores labels
             *  `multicheckboxes`: Stores multiple values using checkboxes
             *  `multigrouppicker`: Stores multiple user groups using a picker control
             *  `multiselect`: Stores multiple values using a select list
             *  `multiuserpicker`: Stores multiple users using a picker control
             *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control
             *  `project`: Stores a project from a list of projects that the user is permitted to view
             *  `radiobuttons`: Stores a value using radio buttons
             *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API
             *  `select`: Stores a value from a configurable list of options
             *  `textarea`: Stores a long text string using a multiline text area
             *  `textfield`: Stores a text string using a single-line text box
             *  `url`: Stores a URL
             *  `userpicker`: Stores a user using a picker control
             *  `version`: Stores a version using a picker control
          enum:
            - 'com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:datepicker'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:datetime'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:float'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:grouppicker'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:importid'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:labels'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:multiselect'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:multiversion'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:project'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:select'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:textarea'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:textfield'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:url'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:userpicker'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:version'
        searcherKey:
          type: string
          description: >-
            The searcher defines the way the field is searched in Jira. For
            example,
            *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.  

            The search UI (basic search and JQL search) will display different
            operations and values for the field, based on the field searcher.
            You must specify a searcher that is valid for the field type, as
            listed below (abbreviated values shown):

             *  `cascadingselect`: `cascadingselectsearcher`
             *  `datepicker`: `daterange`
             *  `datetime`: `datetimerange`
             *  `float`: `exactnumber` or `numberrange`
             *  `grouppicker`: `grouppickersearcher`
             *  `importid`: `exactnumber` or `numberrange`
             *  `labels`: `labelsearcher`
             *  `multicheckboxes`: `multiselectsearcher`
             *  `multigrouppicker`: `multiselectsearcher`
             *  `multiselect`: `multiselectsearcher`
             *  `multiuserpicker`: `userpickergroupsearcher`
             *  `multiversion`: `versionsearcher`
             *  `project`: `projectsearcher`
             *  `radiobuttons`: `multiselectsearcher`
             *  `readonlyfield`: `textsearcher`
             *  `select`: `multiselectsearcher`
             *  `textarea`: `textsearcher`
             *  `textfield`: `textsearcher`
             *  `url`: `exacttextsearcher`
             *  `userpicker`: `userpickergroupsearcher`
             *  `version`: `versionsearcher`
          enum:
            - >-
              com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher
            - 'com.atlassian.jira.plugin.system.customfieldtypes:daterange'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:datetimerange'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:exactnumber'
            - >-
              com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher
            - >-
              com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher
            - 'com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher'
            - >-
              com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher
            - 'com.atlassian.jira.plugin.system.customfieldtypes:numberrange'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher'
            - 'com.atlassian.jira.plugin.system.customfieldtypes:textsearcher'
            - >-
              com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher
            - 'com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher'
      additionalProperties: false
    PageBeanUserKey:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/UserKey'
      additionalProperties: false
      description: A page of items.
    MinimalIssueTypeOutput:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        avatarId:
          type: integer
      additionalProperties: false
    Scope:
      type: object
      properties:
        type:
          type: string
          description: The type of scope.
          readOnly: true
          enum:
            - PROJECT
            - TEMPLATE
        project:
          description: The project the entity has scope in.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ProjectForScope'
      additionalProperties: true
      description: >-
        The scope of an entity. Indicated for entities associated with [next-gen
        projects](https://confluence.atlassian.com/x/loMyO).
    PermissionGrant:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the permission granted details.
          readOnly: true
        self:
          type: string
          description: The URL of the permission granted details.
          format: uri
          readOnly: true
        holder:
          description: >-
            The user or group being granted the permission. It consists of a
            `type` and a type-dependent `parameter`. See [Holder
            object](#holder-object) in *Get all permission schemes* for more
            information.
          allOf:
            - $ref: '#/components/schemas/PermissionHolder'
        permission:
          type: string
          description: >-
            The permission to grant. This permission can be one of the built-in
            permissions or a custom permission added by an app. See [Built-in
            permissions](#built-in-permissions) in *Get all permission schemes*
            for more information about the built-in permissions. See the
            [project
            permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/)
            and [global
            permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/)
            module documentation for more information about custom permissions.
      additionalProperties: false
      description: Details about a permission granted to a user or group.
    IssuesJqlMetaDataBean:
      required:
        - count
        - maxResults
        - startAt
        - totalCount
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first issue.
        maxResults:
          type: integer
          description: >-
            The maximum number of issues that could be loaded in this
            evaluation.
          format: int32
        count:
          type: integer
          description: The number of issues that were loaded in this evaluation.
          format: int32
        totalCount:
          type: integer
          description: The total number of issues the JQL returned.
        validationWarnings:
          type: array
          description: >-
            Any warnings related to the JQL query. Present only if the
            validation mode was set to `warn`.
          items:
            type: string
      additionalProperties: false
      description: The description of the page of issues loaded by the provided JQL query.
    VersionUsageInCustomField:
      type: object
      properties:
        fieldName:
          type: string
          description: The name of the custom field.
          readOnly: true
        customFieldId:
          type: integer
          description: The ID of the custom field.
          readOnly: true
        issueCountWithVersionInCustomField:
          type: integer
          description: Count of the issues where the custom field contains the version.
          readOnly: true
      additionalProperties: false
      description: List of custom fields using the version.
    Filter:
      required:
        - name
      type: object
      properties:
        self:
          type: string
          description: The URL of the filter.
          format: uri
          readOnly: true
        id:
          type: string
          description: The unique identifier for the filter.
          readOnly: true
        name:
          type: string
          description: The name of the filter. Must be unique.
        description:
          type: string
          description: A description of the filter.
        owner:
          description: >-
            The user who owns the filter. This is defaulted to the creator of
            the filter, however Jira administrators can change the owner of a
            shared filter in the admin settings.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        jql:
          type: string
          description: >-
            The JQL query for the filter. For example, *project = SSP AND
            issuetype = Bug*.
        viewUrl:
          type: string
          description: >-
            A URL to view the filter results in Jira, using the ID of the
            filter. For example,
            *https://your-domain.atlassian.net/issues/?filter=10100*.
          format: uri
          readOnly: true
        searchUrl:
          type: string
          description: >-
            A URL to view the filter results in Jira, using the [Search for
            issues using JQL](#api-rest-api-3-filter-search-get) operation with
            the filter's JQL string to return the filter results. For example,
            *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
          format: uri
          readOnly: true
        favourite:
          type: boolean
          description: Indicates whether the filter is selected as a favorite.
        favouritedCount:
          type: integer
          description: >-
            The count of how many users have selected this filter as a favorite,
            including the filter owner.
          readOnly: true
        sharePermissions:
          type: array
          description: The groups and projects that the filter is shared with.
          items:
            $ref: '#/components/schemas/SharePermission'
        sharedUsers:
          description: >-
            A paginated list of the users that the filter is shared with. This
            includes users that are members of the groups or can browse the
            projects that the filter is shared with.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserList'
        subscriptions:
          description: A paginated list of the users that are subscribed to the filter.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/FilterSubscriptionsList'
      additionalProperties: false
      description: Details about a filter.
      xml:
        name: filter
    BulkCreateCustomFieldOptionRequest:
      type: object
      properties:
        options:
          type: array
          description: Details of options to create.
          items:
            $ref: '#/components/schemas/CustomFieldOptionValue'
      additionalProperties: false
      description: Details of options to create for a custom field.
      writeOnly: true
    CreatedIssues:
      type: object
      properties:
        issues:
          type: array
          description: Details of the issues created.
          readOnly: true
          items:
            $ref: '#/components/schemas/CreatedIssue'
        errors:
          type: array
          description: Error details for failed issue creation requests.
          readOnly: true
          items:
            $ref: '#/components/schemas/BulkOperationErrorResult'
      additionalProperties: false
      description: >-
        Details about the issues created and the errors for requests that
        failed.
    PageBeanWorkflowTransitionRules:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/WorkflowTransitionRules'
      additionalProperties: false
      description: A page of items.
    VersionUnresolvedIssuesCount:
      type: object
      properties:
        self:
          type: string
          description: The URL of these count details.
          format: uri
          readOnly: true
        issuesUnresolvedCount:
          type: integer
          description: Count of unresolved issues.
          readOnly: true
        issuesCount:
          type: integer
          description: Count of issues.
          readOnly: true
      additionalProperties: false
      description: Count of a version's unresolved issues.
      xml:
        name: version
    PageBeanWorkflow:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Workflow'
      additionalProperties: false
      description: A page of items.
    WorklogIdsRequestBean:
      required:
        - ids
      type: object
      properties:
        ids:
          uniqueItems: true
          type: array
          description: A list of worklog IDs.
          items:
            type: integer
      additionalProperties: false
    RemoteIssueLink:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the link.
        self:
          type: string
          description: The URL of the link.
          format: uri
        globalId:
          type: string
          description: >-
            The global ID of the link, such as the ID of the item on the remote
            system.
        application:
          description: Details of the remote application the linked item is in.
          allOf:
            - $ref: '#/components/schemas/Application'
        relationship:
          type: string
          description: >-
            Description of the relationship between the issue and the linked
            item.
        object:
          description: Details of the item linked to.
          allOf:
            - $ref: '#/components/schemas/RemoteObject'
      additionalProperties: false
      description: Details of an issue remote link.
    ComponentIssuesCount:
      type: object
      properties:
        self:
          type: string
          description: The URL for this count of issues for a component.
          format: uri
          readOnly: true
        issueCount:
          type: integer
          description: The count of issues assigned to a component.
          readOnly: true
      additionalProperties: false
      description: Count of issues assigned to a component.
      xml:
        name: component
    IssueTypeCreateBean:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: >-
            The unique name for the issue type. The maximum length is 60
            characters. Required.
        description:
          type: string
          description: The description of the issue type.
        type:
          type: string
          description: >-
            Whether the issue type is `subtype` or `standard`. Defaults to
            `standard`.
          enum:
            - subtask
            - standard
      additionalProperties: false
    IssueFieldOptionScopeBean:
      type: object
      properties:
        projects:
          uniqueItems: true
          type: array
          description: DEPRECATED
          items:
            type: integer
        projects2:
          uniqueItems: true
          type: array
          description: >-
            Defines the projects in which the option is available and the
            behavior of the option within each project. Specify one object per
            project. The behavior of the option in a project context overrides
            the behavior in the global context.
          items:
            $ref: '#/components/schemas/ProjectScopeBean'
        global:
          description: >-
            Defines the behavior of the option within the global context. If
            this property is set, even if set to an empty object, then the
            option is available in all projects.
          allOf:
            - $ref: '#/components/schemas/GlobalScopeBean'
      additionalProperties: false
    JsonNode:
      maxProperties: 10
      minProperties: 1
      type: object
      properties:
        textValue:
          type: string
        valueAsText:
          type: string
        fieldNames:
          type: object
        elements:
          type: object
        number:
          type: boolean
        numberValue:
          type: number
        numberType:
          type: string
          enum:
            - INT
            - LONG
            - BIG_INTEGER
            - FLOAT
            - DOUBLE
            - BIG_DECIMAL
        intValue:
          type: integer
          format: int32
        longValue:
          type: integer
        bigIntegerValue:
          type: integer
        doubleValue:
          type: number
          format: double
        decimalValue:
          type: number
        booleanValue:
          type: boolean
        binaryValue:
          type: array
          items:
            type: string
            format: byte
        valueAsInt:
          type: integer
          format: int32
        valueAsLong:
          type: integer
        valueAsDouble:
          type: number
          format: double
        valueAsBoolean:
          type: boolean
        pojo:
          type: boolean
        integralNumber:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        double:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        binary:
          type: boolean
        valueNode:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        object:
          type: boolean
        floatingPointNumber:
          type: boolean
        array:
          type: boolean
        fields:
          type: object
        'null':
          type: boolean
      additionalProperties: false
    CreatedIssue:
      type: object
      properties:
        id:
          type: string
          description: The ID of the created issue or subtask.
          readOnly: true
        key:
          type: string
          description: The key of the created issue or subtask.
          readOnly: true
        self:
          type: string
          description: The URL of the created issue or subtask.
          readOnly: true
        transition:
          description: The response code and messages related to any requested transition.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/NestedResponse'
      additionalProperties: false
      description: Details about a created issue or subtask.
    ProjectInputBean:
      type: object
      properties:
        key:
          type: string
          description: >-
            Project keys must be unique and start with an uppercase letter
            followed by one or more uppercase alphanumeric characters. The
            maximum length is 10 characters. Required when creating a project.
            Optional when updating a project.
        name:
          type: string
          description: >-
            The name of the project. Required when creating a project. Optional
            when updating a project.
        projectTypeKey:
          type: string
          description: >-
            The [project
            type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes),
            which dictates the application-specific feature set. Required when
            creating a project. Not applicable for the Update project resource.
          enum:
            - software
            - service_desk
            - business
        projectTemplateKey:
          type: string
          description: >-
            A prebuilt configuration for a project. The type of the
            `projectTemplateKey` must match with the type of the
            `projectTypeKey`. Required when creating a project. Not applicable
            for the Update project resource.
          enum:
            - 'com.pyxis.greenhopper.jira:gh-simplified-agility-kanban'
            - 'com.pyxis.greenhopper.jira:gh-simplified-agility-scrum'
            - 'com.pyxis.greenhopper.jira:gh-simplified-basic'
            - 'com.pyxis.greenhopper.jira:gh-simplified-kanban-classic'
            - 'com.pyxis.greenhopper.jira:gh-simplified-scrum-classic'
            - 'com.atlassian.servicedesk:simplified-it-service-desk'
            - 'com.atlassian.servicedesk:simplified-internal-service-desk'
            - 'com.atlassian.servicedesk:simplified-external-service-desk'
            - >-
              com.atlassian.jira-core-project-templates:jira-core-simplified-content-management
            - >-
              com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval
            - >-
              com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking
            - >-
              com.atlassian.jira-core-project-templates:jira-core-simplified-process-control
            - >-
              com.atlassian.jira-core-project-templates:jira-core-simplified-procurement
            - >-
              com.atlassian.jira-core-project-templates:jira-core-simplified-project-management
            - >-
              com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment
            - >-
              com.atlassian.jira-core-project-templates:jira-core-simplified-task-
            - >-
              com.atlassian.jira.jira-incident-management-plugin:im-incident-management
        description:
          type: string
          description: A brief description of the project.
        lead:
          type: string
          description: >-
            This parameter is deprecated because of privacy changes. Use
            `leadAccountId` instead. See the [migration
            guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details. The user name of the project lead. Either `lead` or
            `leadAccountId` must be set when creating a project. Optional when
            updating a project. Cannot be provided with `leadAccountId`.
        leadAccountId:
          type: string
          description: >-
            The account id of the project lead. Either `lead` or `leadAccountId`
            must be set when creating a project. Optional when updating a
            project. Cannot be provided with `lead`.
        url:
          type: string
          description: >-
            A link to information about this project, such as project
            documentation
        assigneeType:
          type: string
          description: The default assignee when creating issues for this project.
          enum:
            - PROJECT_LEAD
            - UNASSIGNED
        avatarId:
          type: integer
          description: An integer value for the project's avatar.
        issueSecurityScheme:
          type: integer
          description: >-
            The ID of the issue security scheme for the project, which enables
            you to control who can and cannot view issues. Use the [Get issue
            security schemes](#api-rest-api-3-issuesecurityschemes-get) resource
            to get all issue security scheme IDs.
        permissionScheme:
          type: integer
          description: >-
            The ID of the permission scheme for the project. Use the [Get all
            permission schemes](#api-rest-api-3-permissionscheme-get) resource
            to see a list of all permission scheme IDs.
        notificationScheme:
          type: integer
          description: >-
            The ID of the notification scheme for the project. Use the [Get
            notification schemes](#api-rest-api-3-notificationscheme-get)
            resource to get a list of notification scheme IDs.
        categoryId:
          type: integer
          description: >-
            The ID of the project's category. A complete list of category IDs is
            found using the [Get all project
            categories](#api-rest-api-3-projectCategory-get) operation.
      additionalProperties: false
    ConnectModules:
      type: object
      additionalProperties:
        type: array
        description: A list of modules by type.
        items:
          $ref: '#/components/schemas/ConnectModule'
      description: >-
        A list of app modules in the same format as the `modules` property in
        the

        [app
        descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
      example:
        jiraEntityProperties:
          - keyConfigurations:
              - extractions:
                  - objectName: extension
                    type: text
                    alias: attachmentExtension
                propertyKey: attachment
            entityType: issue
            name:
              value: Attachment Index Document
            key: dynamic-attachment-entity-property
        jiraIssueFields:
          - description:
              value: A dynamically added single-select field
            type: single_select
            extractions:
              - path: category
                type: text
                name: categoryName
            name:
              value: Dynamic single select
            key: dynamic-select-field
    TaskProgressBeanRemoveOptionFromIssuesResult:
      required:
        - elapsedRuntime
        - id
        - lastUpdate
        - progress
        - self
        - status
        - submitted
        - submittedBy
      type: object
      properties:
        self:
          type: string
          description: The URL of the task.
          format: uri
        id:
          type: string
          description: The ID of the task.
        description:
          type: string
          description: The description of the task.
        status:
          type: string
          description: The status of the task.
          enum:
            - ENQUEUED
            - RUNNING
            - COMPLETE
            - FAILED
            - CANCEL_REQUESTED
            - CANCELLED
            - DEAD
        message:
          type: string
          description: Information about the progress of the task.
        result:
          description: The result of the task execution.
          allOf:
            - $ref: '#/components/schemas/RemoveOptionFromIssuesResult'
        submittedBy:
          type: integer
          description: The ID of the user who submitted the task.
        progress:
          type: integer
          description: 'The progress of the task, as a percentage complete.'
        elapsedRuntime:
          type: integer
          description: 'The execution time of the task, in milliseconds.'
        submitted:
          type: integer
          description: A timestamp recording when the task was submitted.
        started:
          type: integer
          description: A timestamp recording when the task was started.
        finished:
          type: integer
          description: A timestamp recording when the task was finished.
        lastUpdate:
          type: integer
          description: A timestamp recording when the task progress was last updated.
      additionalProperties: false
      description: Details about a task.
    JqlQueryFieldEntityProperty:
      required:
        - entity
        - key
        - path
      type: object
      properties:
        entity:
          type: string
          description: The object on which the property is set.
          example: issue
        key:
          type: string
          description: The key of the property.
          example: stats
        path:
          type: string
          description: The path in the property value to query.
          example: comments.count
        type:
          type: string
          description: >-
            The type of the property value extraction. Not available if the
            extraction for the property is not registered on the instance with
            the [Entity
            property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/)
            module.
          example: number
          enum:
            - number
            - string
            - text
            - date
            - user
      description: Details of an entity property.
    FilterSubscriptionsList:
      type: object
      properties:
        size:
          type: integer
          description: The number of items on the page.
          format: int32
          readOnly: true
          xml:
            attribute: true
        items:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/FilterSubscription'
        max-results:
          type: integer
          description: The maximum number of results that could be on the page.
          format: int32
          readOnly: true
          xml:
            name: max-results
            attribute: true
        start-index:
          type: integer
          description: The index of the first item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: start-index
            attribute: true
        end-index:
          type: integer
          description: The index of the last item returned on the page.
          format: int32
          readOnly: true
          xml:
            name: end-index
            attribute: true
      additionalProperties: false
      description: A paginated list of subscriptions to a filter.
    RichText:
      type: object
      properties:
        emptyAdf:
          type: boolean
        valueSet:
          type: boolean
    RemoveOptionFromIssuesResult:
      type: object
      properties:
        modifiedIssues:
          type: array
          description: The IDs of the modified issues.
          items:
            type: integer
        unmodifiedIssues:
          type: array
          description: >-
            The IDs of the unchanged issues, those issues where errors prevent
            modification.
          items:
            type: integer
        errors:
          description: >-
            A collection of errors related to unchanged issues. The collection
            size is limited, which means not all errors may be returned.
          allOf:
            - $ref: '#/components/schemas/SimpleErrorCollection'
      additionalProperties: false
    IssueTypeBean:
      type: object
      properties:
        self:
          type: string
          description: The URL of these issue type details.
          readOnly: true
        id:
          type: string
          description: The ID of the issue type.
          readOnly: true
        description:
          type: string
          description: The description of the issue type.
          readOnly: true
        iconUrl:
          type: string
          description: The URL of the issue type's avatar.
          readOnly: true
        name:
          type: string
          description: The name of the issue type.
          readOnly: true
        subtask:
          type: boolean
          description: Indicates whether this issue type is used to create subtasks.
          readOnly: true
        avatarId:
          type: integer
          description: The ID of the issue type's avatar.
          readOnly: true
        entityId:
          type: string
          description: project unique ID for next-gen entities
          format: uuid
          readOnly: true
        scope:
          description: Details of the next-gen projects the issue type is available in.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Scope'
      additionalProperties: false
      description: Details about an issue type.
    AttachmentArchiveMetadataReadable:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the attachment.
          readOnly: true
        name:
          type: string
          description: The name of the archive file.
          readOnly: true
        entries:
          type: array
          description: The list of the items included in the archive.
          readOnly: true
          items:
            $ref: '#/components/schemas/AttachmentArchiveItemReadable'
        totalEntryCount:
          type: integer
          description: The number of items included in the archive.
          readOnly: true
        mediaType:
          type: string
          description: The MIME type of the attachment.
          readOnly: true
      additionalProperties: false
      description: Metadata for an archive (for example a zip) and its contents.
    Operations:
      type: object
      properties:
        linkGroups:
          type: array
          description: Details of the link groups defining issue operations.
          readOnly: true
          items:
            $ref: '#/components/schemas/LinkGroup'
      additionalProperties: true
      description: Details of the operations that can be performed on the issue.
    ProjectForScope:
      type: object
      properties:
        self:
          type: string
          description: The URL of the project details.
          readOnly: true
        id:
          type: string
          description: The ID of the project.
        key:
          type: string
          description: The key of the project.
          readOnly: true
        name:
          type: string
          description: The name of the project.
          readOnly: true
        projectTypeKey:
          type: string
          description: >-
            The [project
            type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes)
            of the project.
          readOnly: true
          enum:
            - software
            - service_desk
            - business
        simplified:
          type: boolean
          description: Whether or not the project is simplified.
          readOnly: true
        avatarUrls:
          description: The URLs of the project's avatars.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        projectCategory:
          description: The category the project belongs to.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UpdatedProjectCategory'
      additionalProperties: false
      description: Details about a next-gen project.
    HistoryMetadataParticipant:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user or system associated with a history record.
        displayName:
          type: string
          description: >-
            The display name of the user or system associated with a history
            record.
        displayNameKey:
          type: string
          description: >-
            The key of the display name of the user or system associated with a
            history record.
        type:
          type: string
          description: The type of the user or system associated with a history record.
        avatarUrl:
          type: string
          description: >-
            The URL to an avatar for the user or system associated with a
            history record.
        url:
          type: string
          description: The URL of the user or system associated with a history record.
      additionalProperties: true
      description: Details of user or system associated with a issue history metadata item.
    ProjectCategory:
      type: object
      properties:
        self:
          type: string
          description: The URL of the project category.
          format: uri
          readOnly: true
        id:
          type: string
          description: The ID of the project category.
          readOnly: true
        name:
          type: string
          description: >-
            The name of the project category. Required on create, optional on
            update.
        description:
          type: string
          description: >-
            The description of the project category. Required on create,
            optional on update.
      additionalProperties: false
      description: A project category.
    ParsedJqlQuery:
      minLength: 1
      required:
        - query
      type: object
      properties:
        query:
          type: string
          description: The JQL query that was parsed and validated.
        structure:
          description: The syntax tree of the query. Empty if the query was invalid.
          allOf:
            - $ref: '#/components/schemas/JqlQuery'
        errors:
          uniqueItems: true
          type: array
          description: The list of syntax or validation errors.
          items:
            type: string
      additionalProperties: false
      description: Details of a parsed JQL query.
    AttachmentMetadata:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the attachment.
          readOnly: true
        self:
          type: string
          description: The URL of the attachment metadata details.
          format: uri
          readOnly: true
        filename:
          type: string
          description: The name of the attachment file.
          readOnly: true
        author:
          description: Details of the user who attached the file.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        created:
          type: string
          description: The datetime the attachment was created.
          format: date-time
          readOnly: true
        size:
          type: integer
          description: The size of the attachment.
          readOnly: true
        mimeType:
          type: string
          description: The MIME type of the attachment.
          readOnly: true
        properties:
          type: object
          additionalProperties:
            readOnly: true
          description: Additional properties of the attachment.
          readOnly: true
        content:
          type: string
          description: The URL of the attachment.
          readOnly: true
        thumbnail:
          type: string
          description: The URL of a thumbnail representing the attachment.
          readOnly: true
      additionalProperties: false
      description: Metadata for an issue attachment.
      xml:
        name: attachment
    PageBeanFoundFilter:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/FoundFilter'
      additionalProperties: false
      description: A page of items.
    SuggestedIssue:
      type: object
      properties:
        id:
          type: integer
          description: The id of the issue.
          readOnly: true
        key:
          type: string
          description: The key of the issue.
          readOnly: true
        keyHtml:
          type: string
          description: The key of the issue in HTML format.
          readOnly: true
        img:
          type: string
          description: The URL of the issue type's avatar.
          readOnly: true
        summary:
          type: string
          description: >-
            The phrase containing the query string in HTML format, with the
            string highlighted with HTML bold tags.
          readOnly: true
        summaryText:
          type: string
          description: 'The phrase containing the query string, as plain text.'
          readOnly: true
      additionalProperties: false
      description: An issue suggested for use in the issue picker auto-completion.
    AuditRecords:
      type: object
      properties:
        offset:
          type: integer
          description: >-
            The number of audit items skipped before the first item in this
            list.
          format: int32
          readOnly: true
        limit:
          type: integer
          description: >-
            The requested or default limit on the number of audit items to be
            returned.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of audit items returned.
          readOnly: true
        records:
          type: array
          description: The list of audit items.
          readOnly: true
          items:
            $ref: '#/components/schemas/AuditRecordBean'
      additionalProperties: false
      description: Container for a list of audit records.
    PermissionGrants:
      type: object
      properties:
        permissions:
          type: array
          description: Permission grants list.
          readOnly: true
          items:
            $ref: '#/components/schemas/PermissionGrant'
        expand:
          type: string
          description: >-
            Expand options that include additional permission grant details in
            the response.
          readOnly: true
      additionalProperties: false
      description: List of permission grants.
    ProjectIssueCreateMetadata:
      type: object
      properties:
        expand:
          type: string
          description: >-
            Expand options that include additional project issue create metadata
            details in the response.
          readOnly: true
          xml:
            attribute: true
        self:
          type: string
          description: The URL of the project.
          readOnly: true
        id:
          type: string
          description: The ID of the project.
          readOnly: true
        key:
          type: string
          description: The key of the project.
          readOnly: true
        name:
          type: string
          description: The name of the project.
          readOnly: true
        avatarUrls:
          description: >-
            List of the project's avatars, returning the avatar size and
            associated URL.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        issuetypes:
          type: array
          description: List of the issue types supported by the project.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueTypeIssueCreateMetadata'
      additionalProperties: false
      description: Details of the issue creation metadata for a project.
    HierarchyLevelOutput:
      type: object
      properties:
        entityId:
          type: string
          format: uuid
        level:
          type: integer
          format: int32
        name:
          type: string
        issueTypes:
          type: array
          items:
            $ref: '#/components/schemas/MinimalIssueTypeOutput'
      additionalProperties: false
    PageBeanChangelog:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Changelog'
      additionalProperties: false
      description: A page of items.
    RoleActor:
      type: object
      properties:
        id:
          type: integer
        displayName:
          type: string
          description: >-
            The display name of the user. Depending on the user’s privacy
            setting, this may return an alternative value.
          readOnly: true
        type:
          type: string
        name:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          readOnly: true
        avatarUrl:
          type: string
          format: uri
        actorUser:
          $ref: '#/components/schemas/ProjectRoleUserBean'
        actorGroup:
          $ref: '#/components/schemas/ProjectRoleGroupBean'
        user:
          type: string
      additionalProperties: false
      description: Details about a user assigned to a project role.
      xml:
        name: projectRoleActor
    UnrestrictedUserEmail:
      type: object
      properties:
        accountId:
          type: string
          description: The accountId of the user
        email:
          type: string
          description: The email of the user
      additionalProperties: false
    IssuesUpdateBean:
      type: object
      properties:
        issueUpdates:
          type: array
          items:
            $ref: '#/components/schemas/IssueUpdateDetails'
      additionalProperties: true
    FieldChangedClause:
      required:
        - field
        - operator
        - predicates
      type: object
      properties:
        field:
          $ref: '#/components/schemas/JqlQueryField'
        operator:
          type: string
          description: The operator applied to the field.
          enum:
            - changed
        predicates:
          type: array
          description: The list of time predicates.
          items:
            $ref: '#/components/schemas/JqlQueryClauseTimePredicate'
      description: >-
        A clause that asserts whether a field was changed. For example, `status
        CHANGED AFTER startOfMonth(-1M)`.See
        [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED)
        for more information about the CHANGED operator.
    ProjectPermissions:
      type: object
      properties:
        canEdit:
          type: boolean
          description: Indicates whether the logged user can edit the project.
          readOnly: true
      additionalProperties: false
      description: Permissions which a user has on a project.
    AttachmentArchiveItemReadable:
      type: object
      properties:
        path:
          type: string
          description: The path of the archive item.
          readOnly: true
        index:
          type: integer
          description: The position of the item within the archive.
          readOnly: true
        size:
          type: string
          description: The size of the archive item.
          readOnly: true
        mediaType:
          type: string
          description: The MIME type of the archive item.
          readOnly: true
        label:
          type: string
          description: The label for the archive item.
          readOnly: true
      additionalProperties: false
      description: Metadata for an item in an attachment archive.
    AttachmentArchiveImpl:
      type: object
      properties:
        entries:
          type: array
          description: The list of the items included in the archive.
          items:
            $ref: '#/components/schemas/AttachmentArchiveEntry'
        totalEntryCount:
          type: integer
          description: The number of items in the archive.
          format: int32
      additionalProperties: false
    ComponentWithIssueCount:
      type: object
      properties:
        issueCount:
          type: integer
          description: Count of issues for the component.
          readOnly: true
        description:
          type: string
          description: The description for the component.
          readOnly: true
        project:
          type: string
          description: The key of the project to which the component is assigned.
          readOnly: true
        projectId:
          type: integer
          description: Not used.
          readOnly: true
        assignee:
          description: >-
            The details of the user associated with `assigneeType`, if any. See
            `realAssignee` for details of the user assigned to issues created
            with this component.
          allOf:
            - $ref: '#/components/schemas/User'
        self:
          type: string
          description: The URL for this count of the issues contained in the component.
          format: uri
          readOnly: true
        lead:
          description: The user details for the component's lead user.
          allOf:
            - $ref: '#/components/schemas/User'
        assigneeType:
          type: string
          description: >-
            The nominal user type used to determine the assignee for issues
            created with this component. See `realAssigneeType` for details on
            how the type of the user, and hence the user, assigned to issues is
            determined. Takes the following values:

             *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
             *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
             *  `UNASSIGNED` an assignee is not set for issues created with this component.
             *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
          readOnly: true
          enum:
            - PROJECT_DEFAULT
            - COMPONENT_LEAD
            - PROJECT_LEAD
            - UNASSIGNED
        realAssignee:
          description: >-
            The user assigned to issues created with this component, when
            `assigneeType` does not identify a valid assignee.
          allOf:
            - $ref: '#/components/schemas/User'
        realAssigneeType:
          type: string
          description: >-
            The type of the assignee that is assigned to issues created with
            this component, when an assignee cannot be set from the
            `assigneeType`. For example, `assigneeType` is set to
            `COMPONENT_LEAD` but no component lead is set. This property is set
            to one of the following values:

             *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
             *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
             *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
             *  `PROJECT_DEFAULT` when none of the preceding cases are true.
          readOnly: true
          enum:
            - PROJECT_DEFAULT
            - COMPONENT_LEAD
            - PROJECT_LEAD
            - UNASSIGNED
        isAssigneeTypeValid:
          type: boolean
          description: >-
            Indicates whether a user is associated with `assigneeType`. For
            example, if the `assigneeType` is set to `COMPONENT_LEAD` but the
            component lead is not set, then `false` is returned.
          readOnly: true
        name:
          type: string
          description: The name for the component.
          readOnly: true
        id:
          type: string
          description: The unique identifier for the component.
          readOnly: true
      additionalProperties: false
      description: Details about a component with a count of the issues it contains.
    Application:
      type: object
      properties:
        type:
          type: string
          description: >-
            The name-spaced type of the application, used by registered
            rendering apps.
        name:
          type: string
          description: >-
            The name of the application. Used in conjunction with the (remote)
            object icon title to display a tooltip for the link's icon. The
            tooltip takes the format "\[application name\] icon title". Blank
            items are excluded from the tooltip title. If both items are blank,
            the icon tooltop displays as "Web Link". Grouping and sorting of
            links may place links without an application name last.
      additionalProperties: true
      description: The application the linked item is in.
    ProjectScopeBean:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project that the option's behavior applies to.
        attributes:
          uniqueItems: true
          type: array
          description: >-
            Defines the behavior of the option in the project.If notSelectable
            is set, the option cannot be set as the field's value. This is
            useful for archiving an option that has previously been selected but
            shouldn't be used anymore.If defaultValue is set, the option is
            selected by default.
          items:
            type: string
            enum:
              - notSelectable
              - defaultValue
      additionalProperties: false
    Avatars:
      type: object
      properties:
        system:
          type: array
          description: System avatars list.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
        custom:
          type: array
          description: Custom avatars list.
          readOnly: true
          items:
            $ref: '#/components/schemas/Avatar'
      additionalProperties: false
      description: Details about system and custom avatars.
    NotificationScheme:
      type: object
      properties:
        expand:
          type: string
          description: >-
            Expand options that include additional notification scheme details
            in the response.
        id:
          type: integer
          description: The ID of the notification scheme.
        self:
          type: string
        name:
          type: string
          description: The name of the notification scheme.
        description:
          type: string
          description: The description of the notification scheme.
        notificationSchemeEvents:
          type: array
          description: The notification events and associated recipients.
          items:
            $ref: '#/components/schemas/NotificationSchemeEvent'
        scope:
          description: The scope of the notification scheme.
          allOf:
            - $ref: '#/components/schemas/Scope'
      additionalProperties: false
      description: Details about a notification scheme.
    UserBeanAvatarUrls:
      type: object
      properties:
        16x16:
          type: string
          description: The URL of the user's 16x16 pixel avatar.
          format: uri
        24x24:
          type: string
          description: The URL of the user's 24x24 pixel avatar.
          format: uri
        32x32:
          type: string
          description: The URL of the user's 32x32 pixel avatar.
          format: uri
        48x48:
          type: string
          description: The URL of the user's 48x48 pixel avatar.
          format: uri
      additionalProperties: false
    UserPickerUser:
      type: object
      properties:
        accountId:
          type: string
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        name:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
        key:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
        html:
          type: string
          description: >-
            The display name, email address, and key of the user with the
            matched query string highlighted with the HTML bold tag.
        displayName:
          type: string
          description: >-
            The display name of the user. Depending on the user’s privacy
            setting, this may be returned as null.
        avatarUrl:
          type: string
          description: The avatar URL of the user.
          format: uri
      additionalProperties: false
      description: A user found in a search.
    UserMigrationBean:
      type: object
      properties:
        key:
          type: string
        username:
          type: string
        accountId:
          type: string
      additionalProperties: false
    ProjectRoleActorsCountBean:
      type: object
      properties:
        actorsCount:
          type: integer
      additionalProperties: false
    EntityProperty:
      type: object
      properties:
        key:
          type: string
          description: The key of the property. Required on create and update.
        value:
          description: The value of the property. Required on create and update.
      additionalProperties: false
      description: >-
        An entity property, for more information see [Entity
        properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
    TimeTrackingConfiguration:
      required:
        - defaultUnit
        - timeFormat
        - workingDaysPerWeek
        - workingHoursPerDay
      type: object
      properties:
        workingHoursPerDay:
          type: number
          description: The number of hours in a working day.
          format: double
        workingDaysPerWeek:
          type: number
          description: The number of days in a working week.
          format: double
        timeFormat:
          type: string
          description: The format that will appear on an issue's *Time Spent* field.
          enum:
            - pretty
            - days
            - hours
        defaultUnit:
          type: string
          description: The default unit of time applied to logged time.
          enum:
            - minute
            - hour
            - day
            - week
      additionalProperties: false
      description: Details of the time tracking configuration.
    IssuesMetaBean:
      type: object
      properties:
        jql:
          $ref: '#/components/schemas/IssuesJqlMetaDataBean'
      additionalProperties: false
      description: Meta data describing the `issues` context variable.
    JQLQueryWithUnknownUsers:
      type: object
      properties:
        originalQuery:
          type: string
          description: 'The original query, for reference'
        convertedQuery:
          type: string
          description: >-
            The converted query, with accountIDs instead of user identifiers, or
            'unknown' for users that could not be found
      additionalProperties: false
      description: JQL queries that contained users that could not be found
    AttachmentArchiveEntry:
      type: object
      properties:
        mediaType:
          type: string
        entryIndex:
          type: integer
        abbreviatedName:
          type: string
        name:
          type: string
        size:
          type: integer
      additionalProperties: false
    PageBeanNotificationScheme:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/NotificationScheme'
      additionalProperties: false
      description: A page of items.
    ProjectIdentifierBean:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the project.
          readOnly: true
        key:
          type: string
          description: The key of the project.
          readOnly: true
      additionalProperties: false
      description: The identifiers for a project.
    JqlQueryClauseOperand:
      type: object
      description: Details of an operand in a JQL clause.
      anyOf:
        - $ref: '#/components/schemas/ListOperand'
        - $ref: '#/components/schemas/ValueOperand'
        - $ref: '#/components/schemas/FunctionOperand'
        - $ref: '#/components/schemas/KeywordOperand'
    FilterSubscription:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the filter subscription.
          readOnly: true
        user:
          description: The user subscribing to filter.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/User'
        group:
          description: The group subscribing to filter.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/GroupName'
      additionalProperties: false
      description: Details of a user or group subscribing to a filter.
    JiraExpressionEvalRequestBean:
      required:
        - expression
      type: object
      properties:
        expression:
          type: string
          description: The Jira expression to evaluate.
          example: >-
            { key: issue.key, type: issue.issueType.name, links:
            issue.links.map(link => link.linkedIssue.id) }
        context:
          description: The context in which the Jira expression is evaluated.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionEvalContextBean'
      additionalProperties: false
    Changelog:
      type: object
      properties:
        id:
          type: string
          description: The ID of the changelog.
          readOnly: true
        author:
          description: The user who made the change.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        created:
          type: string
          description: The date on which the change took place.
          format: date-time
          readOnly: true
        items:
          type: array
          description: The list of items changed.
          readOnly: true
          items:
            $ref: '#/components/schemas/ChangeDetails'
        historyMetadata:
          description: The history metadata associated with the changed.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/HistoryMetadata'
      additionalProperties: false
      description: A changelog.
    SharePermissionInputBean:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: |-
            The type of the share permission.Specify the type as follows:

             *  `group` Share with a group. Specify `groupname` as well.
             *  `project` Share with a project. Specify `projectId` as well.
             *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
             *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
             *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
          enum:
            - project
            - group
            - projectRole
            - global
            - authenticated
        projectId:
          type: string
          description: >-
            The ID of the project to share the filter with. Set `type` to
            `project`.
        groupname:
          type: string
          description: >-
            The name of the group to share the filter with. Set `type` to
            `group`.
        projectRoleId:
          type: string
          description: >-
            The ID of the project role to share the filter with. Set `type` to
            `projectRole` and the `projectId` for the project that the role is
            in.
      additionalProperties: false
    TimeTrackingProvider:
      required:
        - key
      type: object
      properties:
        key:
          type: string
          description: 'The key for the time tracking provider. For example, *JIRA*.'
        name:
          type: string
          description: >-
            The name of the time tracking provider. For example, *JIRA provided
            time tracking*.
        url:
          type: string
          description: >-
            The URL of the configuration page for the time tracking provider
            app. For example, */example/config/url*. This property is only
            returned if the `adminPageKey` property is set in the module
            descriptor of the time tracking provider app.
          readOnly: true
      additionalProperties: false
      description: Details about the time tracking provider.
    PageBeanDashboard:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Dashboard'
      additionalProperties: false
      description: A page of items.
    GlobalScopeBean:
      type: object
      properties:
        attributes:
          uniqueItems: true
          type: array
          description: >-
            Defines the behavior of the option in the global context.If
            notSelectable is set, the option cannot be set as the field's value.
            This is useful for archiving an option that has previously been
            selected but shouldn't be used anymore.If defaultValue is set, the
            option is selected by default.
          items:
            type: string
            enum:
              - notSelectable
              - defaultValue
      additionalProperties: false
    FoundGroup:
      type: object
      properties:
        name:
          type: string
          description: The name of the group.
        html:
          type: string
          description: >-
            The group name with the matched query string highlighted with the
            HTML bold tag.
        labels:
          type: array
          items:
            $ref: '#/components/schemas/GroupLabel'
      additionalProperties: false
      description: A group found in a search.
      xml:
        name: group
    IssueTransition:
      type: object
      properties:
        id:
          type: string
          description: >-
            The ID of the issue transition. Required when specifying a
            transition to undertake.
        name:
          type: string
          description: The name of the issue transition.
          readOnly: true
        to:
          description: Details of the issue status after the transition.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/StatusDetails'
        hasScreen:
          type: boolean
          description: >-
            Indicates whether there is a screen associated with the issue
            transition.
          readOnly: true
        isGlobal:
          type: boolean
          description: >-
            Indicates whether the issue transition is global, that is, the
            transition is applied to issues regardless of their status.
          readOnly: true
        isInitial:
          type: boolean
          description: >-
            Indicates whether this is the initial issue transition for the
            workflow.
          readOnly: true
        isConditional:
          type: boolean
          description: >-
            Indicates whether the issue has to meet certain criteria before the
            issue transition is applied.
          readOnly: true
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldMetadata'
          description: >-
            Details of the fields associated with the issue transition screen.
            Use this information to populate `fields` and `update` in a
            transition request.
          readOnly: true
        expand:
          type: string
          description: >-
            Expand options that include additional transition details in the
            response.
          readOnly: true
      additionalProperties: true
      description: Details of an issue transition.
    HealthCheckResult:
      type: object
      properties:
        name:
          type: string
          description: The name of the Jira health check item.
        description:
          type: string
          description: The description of the Jira health check item.
        passed:
          type: boolean
          description: Indicates whether the Jira health check item passed or failed.
      additionalProperties: false
      description: Jira instance health check results. Deprecated and no longer returned.
    JiraExpressionResult:
      required:
        - value
      type: object
      properties:
        value:
          description: >-
            The value of the evaluated expression. It may be a primitive JSON
            value or a Jira REST API object. (Some expressions do not produce
            any meaningful results—for example, an expression that returns a
            lambda function—if that's the case a simple string representation is
            returned. These string representations should not be relied upon and
            may change without notice.)
        meta:
          description: >-
            Contains various characteristics of the performed expression
            evaluation.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionEvaluationMetaDataBean'
      additionalProperties: false
      description: The result of evaluating a Jira expression.
    WorkflowStatus:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: The ID of the issue status.
        name:
          type: string
          description: The name of the status in the workflow.
        properties:
          $ref: '#/components/schemas/WorkflowStatusProperties'
      additionalProperties: false
      description: Details of a workflow status.
    PageOfComments:
      type: object
      properties:
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        comments:
          type: array
          description: The list of comments.
          readOnly: true
          items:
            $ref: '#/components/schemas/Comment'
      additionalProperties: true
      description: A page of comments.
    BulkPermissionGrants:
      required:
        - globalPermissions
        - projectPermissions
      type: object
      properties:
        projectPermissions:
          uniqueItems: true
          type: array
          description: >-
            List of project permissions and the projects and issues those
            permissions provide access to.
          items:
            $ref: '#/components/schemas/BulkProjectPermissionGrants'
        globalPermissions:
          uniqueItems: true
          type: array
          description: List of permissions granted to the user.
          items:
            type: string
      additionalProperties: false
      description: Details of global and project permissions granted to the user.
    WorkflowTransitionRules:
      type: object
      properties:
        workflowId:
          $ref: '#/components/schemas/WorkflowId'
        postFunctions:
          type: array
          description: The list of post functions within the workflow.
          items:
            $ref: '#/components/schemas/ConnectWorkflowTransitionRule'
        conditions:
          type: array
          description: The list of conditions within the workflow.
          items:
            $ref: '#/components/schemas/ConnectWorkflowTransitionRule'
        validators:
          type: array
          description: The list of validators within the workflow.
          items:
            $ref: '#/components/schemas/ConnectWorkflowTransitionRule'
      additionalProperties: false
      description: A workflow with transition rules.
    Transition:
      required:
        - description
        - from
        - id
        - name
        - to
        - type
      type: object
      properties:
        id:
          type: string
          description: The ID of the transition.
        name:
          type: string
          description: The name of the transition.
        description:
          type: string
          description: The description of the transition.
        from:
          type: array
          description: The list of statuses from which the transition can be taken.
          items:
            type: string
            description: The list of statuses from which the transition can be taken.
        to:
          type: string
          description: The status to which the transition leads.
        type:
          type: string
          description: The type of the transition.
          enum:
            - global
            - initial
            - directed
        screen:
          $ref: '#/components/schemas/ScreenID'
        rules:
          $ref: '#/components/schemas/WorkflowRules'
      additionalProperties: false
      description: Details of a workflow transition.
    UpdatedProjectCategory:
      type: object
      properties:
        self:
          type: string
          description: The URL of the project category.
          readOnly: true
        id:
          type: string
          description: The ID of the project category.
          readOnly: true
        description:
          type: string
          description: The name of the project category.
          readOnly: true
        name:
          type: string
          description: The description of the project category.
          readOnly: true
      additionalProperties: false
      description: A project category.
    WorkflowTransitionRulesUpdateErrors:
      required:
        - updateResults
      type: object
      properties:
        updateResults:
          type: array
          description: A list of workflows.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRulesUpdateErrorDetails'
      additionalProperties: false
      description: >-
        Details of any errors encountered while updating workflow transition
        rules.
    ScreenableField:
      type: object
      properties:
        id:
          type: string
          description: The ID of the screen tab field.
          readOnly: true
        name:
          type: string
          description: >-
            The name of the screen tab field. Required on create and update. The
            maximum length is 255 characters.
      additionalProperties: false
      description: A screen tab field.
    ErrorMessage:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: The error message.
      additionalProperties: false
      example:
        message: The request is not from a Connect app.
    NotificationSchemeEvent:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/NotificationEvent'
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/EventNotification'
      additionalProperties: false
      description: Details about a notification scheme event.
    AutoCompleteSuggestion:
      type: object
      properties:
        value:
          type: string
          description: The value of a suggested item.
        displayName:
          type: string
          description: >-
            The display name of a suggested item. If `fieldValue` or
            `predicateValue` are provided, the matching text is highlighted with
            the HTML bold tag.
      additionalProperties: false
      description: A field auto-complete suggestion.
    Locale:
      type: object
      properties:
        locale:
          type: string
          description: >-
            The locale code. The Java the locale format is used: a two character
            language code (ISO 639), an underscore, and two letter country code
            (ISO 3166). For example, en\_US represents a locale of English
            (United States). Required on create.
      additionalProperties: false
      description: Details of a locale.
    PageBeanCustomFieldOptionDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/CustomFieldOptionDetails'
      additionalProperties: false
      description: A page of items.
    ContainerForRegisteredWebhooks:
      type: object
      properties:
        webhookRegistrationResult:
          type: array
          description: A list of registered webhooks.
          items:
            $ref: '#/components/schemas/RegisteredWebhook'
      additionalProperties: false
      description: >-
        Container for a list of registered webhooks. Webhook details are
        returned in the same order as the request.
    UpdateUserToGroupBean:
      type: object
      properties:
        name:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
        accountId:
          type: string
          description: >-
            The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
      additionalProperties: true
    WorkflowTransitionProperty:
      required:
        - value
      type: object
      properties:
        key:
          type: string
          description: >-
            The key of the transition property. Also known as the name of the
            transition property.
          readOnly: true
        value:
          type: string
          description: The value of the transition property.
        id:
          type: string
          description: The ID of the transition property.
          readOnly: true
      additionalProperties: true
      description: Details about the server Jira is running on.
    ConvertedJQLQueries:
      type: object
      properties:
        queryStrings:
          type: array
          description: >-
            The list of converted query strings with account IDs in place of
            user identifiers.
          items:
            type: string
        queriesWithUnknownUsers:
          type: array
          description: >-
            List of queries containing user information that could not be mapped
            to an existing user
          items:
            $ref: '#/components/schemas/JQLQueryWithUnknownUsers'
      additionalProperties: false
      description: The converted JQL queries.
    HistoryMetadata:
      type: object
      properties:
        type:
          type: string
          description: The type of the history record.
        description:
          type: string
          description: The description of the history record.
        descriptionKey:
          type: string
          description: The description key of the history record.
        activityDescription:
          type: string
          description: The activity described in the history record.
        activityDescriptionKey:
          type: string
          description: The key of the activity described in the history record.
        emailDescription:
          type: string
          description: The description of the email address associated the history record.
        emailDescriptionKey:
          type: string
          description: >-
            The description key of the email address associated the history
            record.
        actor:
          description: Details of the user whose action created the history record.
          allOf:
            - $ref: '#/components/schemas/HistoryMetadataParticipant'
        generator:
          description: Details of the system that generated the history record.
          allOf:
            - $ref: '#/components/schemas/HistoryMetadataParticipant'
        cause:
          description: Details of the cause that triggered the creation the history record.
          allOf:
            - $ref: '#/components/schemas/HistoryMetadataParticipant'
        extraData:
          type: object
          additionalProperties:
            type: string
          description: Additional arbitrary information about the history record.
      additionalProperties: true
      description: Details of issue history metadata.
    PageBeanComment:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Comment'
      additionalProperties: false
      description: A page of items.
    ListWrapperCallbackApplicationRole:
      type: object
      additionalProperties: false
    JQLPersonalDataMigrationRequest:
      type: object
      properties:
        queryStrings:
          type: array
          description: A list of queries with user identifiers. Maximum of 100 queries.
          items:
            type: string
      additionalProperties: false
      description: The JQL queries to be converted.
    IssueTypesWorkflowMapping:
      type: object
      properties:
        workflow:
          type: string
          description: >-
            The name of the workflow. Optional if updating the workflow-issue
            types mapping.
        issueTypes:
          type: array
          description: The list of issue type IDs.
          items:
            type: string
        defaultMapping:
          type: boolean
          description: >-
            Indicates whether the workflow is the default workflow for the
            workflow scheme.
        updateDraftIfNeeded:
          type: boolean
          description: >-
            Indicates whether a draft workflow scheme is created or updated when
            updating an active workflow scheme. The draft is updated with the
            new workflow-issue types mapping. Defaults to `false`.
      additionalProperties: false
      description: Details about the mapping between issue types and a workflow.
    PageBeanField:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Field'
      additionalProperties: false
      description: A page of items.
    AttachmentSettings:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether the ability to add attachments is enabled.
          readOnly: true
        uploadLimit:
          type: integer
          description: 'The maximum size of attachments permitted, in bytes.'
          readOnly: true
      additionalProperties: false
      description: Details of the instance's attachment settings.
    JiraExpressionsComplexityBean:
      type: object
      properties:
        steps:
          description: The number of steps it took to evaluate the expression.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityValueBean'
        expensiveOperations:
          description: >-
            The number of expensive operations executed while evaluating the
            expression. Expensive operations are those that load additional
            data, such as entity properties, comments, or custom fields.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityValueBean'
        beans:
          description: The number of Jira REST API beans returned in the response.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityValueBean'
        primitiveValues:
          description: The number of primitive values returned in the response.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityValueBean'
      additionalProperties: false
    Hierarchy:
      type: object
      properties:
        level:
          type: array
          items:
            $ref: '#/components/schemas/HierarchyLevel'
      additionalProperties: false
      description: Project Issue Type Hierarchy
      xml:
        name: hierarchy
    UserDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the user.
          readOnly: true
        name:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          readOnly: true
        key:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          readOnly: true
        accountId:
          type: string
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        emailAddress:
          type: string
          description: >-
            The email address of the user. Depending on the user’s privacy
            settings, this may be returned as null.
          readOnly: true
        avatarUrls:
          description: The avatars of the user.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        displayName:
          type: string
          description: >-
            The display name of the user. Depending on the user’s privacy
            settings, this may return an alternative value.
          readOnly: true
        active:
          type: boolean
          description: Whether the user is active.
          readOnly: true
        timeZone:
          type: string
          description: >-
            The time zone specified in the user's profile. Depending on the
            user’s privacy settings, this may be returned as null.
          readOnly: true
        accountType:
          type: string
          description: >-
            The type of account represented by this user. This will be one of
            'atlassian' (normal users), 'app' (application user) or 'customer'
            (Jira Service Desk customer user)
          readOnly: true
      additionalProperties: false
      description: User details.
    SimpleLink:
      type: object
      properties:
        id:
          type: string
        styleClass:
          type: string
        iconClass:
          type: string
        label:
          type: string
        title:
          type: string
        href:
          type: string
        weight:
          type: integer
          format: int32
      additionalProperties: false
      description: Details about the operations available in this version.
      xml:
        name: link
    IssueMatchesForJQL:
      required:
        - errors
        - matchedIssues
      type: object
      properties:
        matchedIssues:
          uniqueItems: true
          type: array
          description: A list of issue IDs.
          items:
            type: integer
            description: A list of issue IDs.
        errors:
          uniqueItems: true
          type: array
          description: A list of errors.
          items:
            type: string
            description: A list of errors.
      additionalProperties: false
      description: >-
        A list of the issues matched to a JQL query or details of errors
        encountered during matching.
    IssueCommentListRequestBean:
      type: object
      properties:
        ids:
          uniqueItems: true
          type: array
          description: >-
            The list of comment IDs. A maximum of 1000 IDs can be specified.
            Required.
          items:
            type: integer
      additionalProperties: false
    FoundUsersAndGroups:
      type: object
      properties:
        users:
          $ref: '#/components/schemas/FoundUsers'
        groups:
          $ref: '#/components/schemas/FoundGroups'
      additionalProperties: false
      description: List of users and groups found in a search.
    HierarchyLevel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        aboveLevelId:
          type: integer
        belowLevelId:
          type: integer
        projectConfigurationId:
          type: integer
        issueTypeIds:
          type: array
          items:
            type: integer
        externalUuid:
          type: string
          format: uuid
      additionalProperties: false
    RestrictedPermission:
      type: object
      properties:
        id:
          type: string
          description: >-
            The ID of the permission. Either `id` or `key` must be specified.
            Use [Get all permissions](#api-rest-api-3-permissions-get) to get
            the list of permissions.
        key:
          type: string
          description: >-
            The key of the permission. Either `id` or `key` must be specified.
            Use [Get all permissions](#api-rest-api-3-permissions-get) to get
            the list of permissions.
      additionalProperties: true
      description: Details of the permission.
    NotificationRecipients:
      type: object
      properties:
        reporter:
          type: boolean
          description: >-
            Indicates whether the notification should be sent to the issue's
            reporter.
        assignee:
          type: boolean
          description: >-
            Indicates whether the notification should be sent to the issue's
            assignees.
        watchers:
          type: boolean
          description: >-
            Indicates whether the notification should be sent to the issue's
            watchers.
        voters:
          type: boolean
          description: >-
            Indicates whether the notification should be sent to the issue's
            voters.
        users:
          type: array
          description: List of users to receive the notification.
          items:
            $ref: '#/components/schemas/UserDetails'
        groups:
          type: array
          description: List of groups to receive the notification.
          items:
            $ref: '#/components/schemas/GroupName'
      additionalProperties: true
      description: Details of the users and groups to receive the notification.
    WorkflowTransitionRulesUpdate:
      type: object
      properties:
        workflows:
          type: array
          description: The list of workflows with transition rules to update.
          items:
            $ref: '#/components/schemas/WorkflowTransitionRules'
      additionalProperties: false
      description: Details about a workflow configuration update request.
    VersionIssueCounts:
      type: object
      properties:
        self:
          type: string
          description: The URL of these count details.
          format: uri
          readOnly: true
        issuesFixedCount:
          type: integer
          description: Count of issues where the `fixVersion` is set to the version.
          readOnly: true
        issuesAffectedCount:
          type: integer
          description: Count of issues where the `affectedVersion` is set to the version.
          readOnly: true
        issueCountWithCustomFieldsShowingVersion:
          type: integer
          description: Count of issues where a version custom field is set to the version.
          readOnly: true
        customFieldUsage:
          type: array
          description: List of custom fields using the version.
          readOnly: true
          items:
            $ref: '#/components/schemas/VersionUsageInCustomField'
      additionalProperties: false
      description: Various counts of issues within a version.
      xml:
        name: version
    Priority:
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue priority.
        statusColor:
          type: string
          description: The color used to indicate the issue priority.
        description:
          type: string
          description: The description of the issue priority.
        iconUrl:
          type: string
          description: The URL of the icon for the issue priority.
        name:
          type: string
          description: The name of the issue priority.
        id:
          type: string
          description: The ID of the issue priority.
      additionalProperties: true
      description: An issue priority.
    BulkProjectPermissions:
      required:
        - permissions
      type: object
      properties:
        issues:
          uniqueItems: true
          type: array
          description: List of issue IDs.
          items:
            type: integer
        projects:
          uniqueItems: true
          type: array
          description: List of project IDs.
          items:
            type: integer
        permissions:
          uniqueItems: true
          type: array
          description: List of project permissions.
          items:
            type: string
      additionalProperties: false
      description: >-
        Details of project permissions and associated issues and projects to
        look up.
    VersionIssuesStatus:
      type: object
      properties:
        unmapped:
          type: integer
          description: >-
            Count of issues with a status other than *to do*, *in progress*, and
            *done*.
          readOnly: true
        toDo:
          type: integer
          description: Count of issues with status *to do*.
          readOnly: true
        inProgress:
          type: integer
          description: Count of issues with status *in progress*.
          readOnly: true
        done:
          type: integer
          description: Count of issues with status *done*.
          readOnly: true
      additionalProperties: true
      description: Counts of the number of issues in various statuses.
    JexpIssues:
      type: object
      properties:
        jql:
          description: >-
            The JQL query that specifies the set of issues available in the Jira
            expression.
          allOf:
            - $ref: '#/components/schemas/JexpJqlIssues'
      additionalProperties: false
      description: >-
        The JQL specifying the issues available in the evaluated Jira expression
        under the `issues` context variable.
    PageBeanComponentWithIssueCount:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/ComponentWithIssueCount'
      additionalProperties: false
      description: A page of items.
    IdOrKeyBean:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the referenced item.
        key:
          type: string
          description: The key of the referenced item.
      additionalProperties: false
    AvatarUrlsBean:
      type: object
      properties:
        16x16:
          type: string
          description: The URL of the item's 16x16 pixel avatar.
          format: uri
        24x24:
          type: string
          description: The URL of the item's 24x24 pixel avatar.
          format: uri
        32x32:
          type: string
          description: The URL of the item's 32x32 pixel avatar.
          format: uri
        48x48:
          type: string
          description: The URL of the item's 48x48 pixel avatar.
          format: uri
      additionalProperties: false
    Fields:
      type: object
      properties:
        summary:
          type: string
          description: The summary description of the linked issue.
          readOnly: true
        status:
          description: The status of the linked issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/StatusDetails'
        priority:
          description: The priority of the linked issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Priority'
        assignee:
          description: The assignee of the linked issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        issuetype:
          description: The type of the linked issue.
          $ref: '#/components/schemas/IssueTypeBean'
        issueType:
          description: The type of the linked issue.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/IssueTypeBean'
      additionalProperties: false
      description: Key fields from the linked issue.
    TaskProgressBeanObject:
      required:
        - elapsedRuntime
        - id
        - lastUpdate
        - progress
        - self
        - status
        - submitted
        - submittedBy
      type: object
      properties:
        self:
          type: string
          description: The URL of the task.
          format: uri
        id:
          type: string
          description: The ID of the task.
        description:
          type: string
          description: The description of the task.
        status:
          type: string
          description: The status of the task.
          enum:
            - ENQUEUED
            - RUNNING
            - COMPLETE
            - FAILED
            - CANCEL_REQUESTED
            - CANCELLED
            - DEAD
        message:
          type: string
          description: Information about the progress of the task.
        result:
          description: The result of the task execution.
        submittedBy:
          type: integer
          description: The ID of the user who submitted the task.
        progress:
          type: integer
          description: 'The progress of the task, as a percentage complete.'
        elapsedRuntime:
          type: integer
          description: 'The execution time of the task, in milliseconds.'
        submitted:
          type: integer
          description: A timestamp recording when the task was submitted.
        started:
          type: integer
          description: A timestamp recording when the task was started.
        finished:
          type: integer
          description: A timestamp recording when the task was finished.
        lastUpdate:
          type: integer
          description: A timestamp recording when the task progress was last updated.
      additionalProperties: false
      description: Details about a task.
    PropertyKeys:
      type: object
      properties:
        keys:
          type: array
          description: Property key details.
          readOnly: true
          items:
            $ref: '#/components/schemas/PropertyKey'
      additionalProperties: false
      description: List of property keys.
    StatusDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the status.
          readOnly: true
        description:
          type: string
          description: The description of the status.
          readOnly: true
        iconUrl:
          type: string
          description: The URL of the icon used to represent the status.
          readOnly: true
        name:
          type: string
          description: The name of the status.
          readOnly: true
        id:
          type: string
          description: The ID of the status.
          readOnly: true
        statusCategory:
          description: The category assigned to the status.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/StatusCategory'
      additionalProperties: true
      description: A status.
    PageBeanIssueFieldOption:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/IssueFieldOption'
      additionalProperties: false
      description: A page of items.
    ProjectRoleUserBean:
      type: object
      properties:
        accountId:
          type: string
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
          readOnly: true
      additionalProperties: false
    IdBean:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: >-
            The ID of the permission scheme to associate with the project. Use
            the [Get all permission
            schemes](#api-rest-api-3-permissionscheme-get) resource to get a
            list of permission scheme IDs.
      additionalProperties: false
    Visibility:
      type: object
      properties:
        type:
          type: string
          description: >-
            Indicates whether visibility of this item is restricted to a group
            or role.
          enum:
            - group
            - role
        value:
          type: string
          description: >-
            The name of the group or role to which visibility of this item is
            restricted.
      additionalProperties: true
      description: The group or role to which this item is visible.
    OperationMessage:
      required:
        - message
        - statusCode
      type: object
      properties:
        message:
          type: string
          description: The human-readable message that describes the result.
        statusCode:
          type: integer
          description: The status code of the response.
          format: int32
      additionalProperties: false
      example:
        message: An example message.
        statusCode: 200
    IssueFilterForBulkPropertyDelete:
      type: object
      properties:
        entityIds:
          uniqueItems: true
          type: array
          description: List of issues to perform the bulk delete operation on.
          items:
            type: integer
        currentValue:
          description: The value of properties to perform the bulk operation on.
      additionalProperties: false
      description: Bulk operation filter details.
    Resolution:
      type: object
      properties:
        self:
          type: string
          description: The URL of the issue resolution.
          format: uri
        id:
          type: string
          description: The ID of the issue resolution.
        description:
          type: string
          description: The description of the issue resolution.
        name:
          type: string
          description: The name of the issue resolution.
      additionalProperties: false
      description: Details of an issue resolution.
      xml:
        name: resolution
    FieldValueClause:
      required:
        - field
        - operand
        - operator
      type: object
      properties:
        field:
          $ref: '#/components/schemas/JqlQueryField'
        operator:
          type: string
          description: The operator between the field and operand.
          enum:
            - =
            - '!='
            - '>'
            - <
            - '>='
            - <=
            - in
            - not in
            - '~='
            - is
            - is not
        operand:
          $ref: '#/components/schemas/JqlQueryClauseOperand'
      description: >-
        A clause that asserts the current value of a field. For example,
        `summary ~ test`.
    User:
      type: object
      properties:
        self:
          type: string
          description: The URL of the user.
          format: uri
          readOnly: true
        key:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
        accountId:
          type: string
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
            Required in requests.
        accountType:
          type: string
          description: |-
            The user account type. Can take the following values:

             *  `atlassian` regular Atlassian user account
             *  `app` system account used for Connect applications and OAuth to represent external systems
             *  `customer` Jira Service Desk account representing an external service desk
          readOnly: true
          enum:
            - atlassian
            - app
            - customer
            - unknown
        name:
          type: string
          description: >-
            This property is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
        emailAddress:
          type: string
          description: >-
            The email address of the user. Depending on the user’s privacy
            setting, this may be returned as null.
          readOnly: true
        avatarUrls:
          description: The avatars of the user.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/AvatarUrlsBean'
        displayName:
          type: string
          description: >-
            The display name of the user. Depending on the user’s privacy
            setting, this may return an alternative value.
          readOnly: true
        active:
          type: boolean
          description: Indicates whether the user is active.
          readOnly: true
        timeZone:
          type: string
          description: >-
            The time zone specified in the user's profile. Depending on the
            user’s privacy setting, this may be returned as null.
          readOnly: true
        locale:
          type: string
          description: >-
            The locale of the user. Depending on the user’s privacy setting,
            this may be returned as null.
          readOnly: true
        groups:
          description: The groups that the user belongs to.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/SimpleListWrapperGroupName'
        applicationRoles:
          description: The application roles the user is assigned to.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/SimpleListWrapperApplicationRole'
        expand:
          type: string
          description: Expand options that include additional user details in the response.
          readOnly: true
          xml:
            attribute: true
      additionalProperties: false
      description: A user.
      xml:
        name: user
    PageBeanUserDetails:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/UserDetails'
      additionalProperties: false
      description: A page of items.
    ActorInputBean:
      type: object
      properties:
        user:
          type: array
          description: >-
            The account IDs of the users to add as default actors. This
            parameter accepts a comma-separated list. For example,
            `"user":["12345678-9abc-def1-2345-6789abcdef12",
            "abcdef12-3456-789a-bcde-f123456789ab"]`.
          items:
            type: string
        group:
          type: array
          description: >-
            The name of the group to add as a default actor. This parameter
            accepts a comma-separated list. For example,
            `"group":["project-admin", "jira-developers"]`.
          items:
            type: string
      additionalProperties: false
    Screen:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the screen.
          readOnly: true
        name:
          type: string
          description: The name of the screen.
          readOnly: true
        scope:
          description: The scope of the screen.
          allOf:
            - $ref: '#/components/schemas/Scope'
      additionalProperties: false
      description: A screen.
    FunctionOperand:
      required:
        - function
      type: object
      properties:
        function:
          type: string
          description: The name of the function.
        arguments:
          type: array
          description: The list of function arguments.
          items:
            type: string
      description: >-
        An operand that is a function. See [Advanced searching - functions
        reference](https://confluence.atlassian.com/x/dwiiLQ) for more
        information about JQL functions.
    PageBeanProject:
      type: object
      properties:
        self:
          type: string
          description: The URL of the page.
          format: uri
          readOnly: true
        nextPage:
          type: string
          description: 'If there is another page of results, the URL of the next page.'
          format: uri
          readOnly: true
        maxResults:
          type: integer
          description: The maximum number of items that could be returned.
          format: int32
          readOnly: true
        startAt:
          type: integer
          description: The index of the first item returned.
          readOnly: true
        total:
          type: integer
          description: The number of items returned.
          readOnly: true
        isLast:
          type: boolean
          description: Indicates whether this is the last page.
          readOnly: true
        values:
          type: array
          description: The list of items.
          readOnly: true
          items:
            $ref: '#/components/schemas/Project'
      additionalProperties: false
      description: A page of items.
    CompoundClause:
      required:
        - clauses
        - operator
      type: object
      properties:
        clauses:
          type: array
          description: The list of nested clauses.
          items:
            $ref: '#/components/schemas/JqlQueryClause'
        operator:
          type: string
          description: The operator between the clauses.
          enum:
            - and
            - or
            - not
      description: >-
        A JQL query clause that consists of nested clauses. For example,
        `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note
        that, where nesting is not defined, the parser nests JQL clauses based
        on the operator precedence. For example, "A OR B AND C" is parsed as "(A
        OR B) AND C". See Setting the precedence of operators for more
        information about precedence in JQL queries.`
    IssueUpdateMetadata:
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldMetadata'
          description: A list of editable field details.
          readOnly: true
      description: A list of editable field details.
    LinkGroup:
      type: object
      properties:
        id:
          type: string
        styleClass:
          type: string
        header:
          $ref: '#/components/schemas/SimpleLink'
        weight:
          type: integer
          format: int32
        links:
          type: array
          items:
            $ref: '#/components/schemas/SimpleLink'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/LinkGroup'
      additionalProperties: false
      description: 'Details a link group, which defines issue operations.'
    IssueTypeWorkflowMapping:
      type: object
      properties:
        issueType:
          type: string
          description: >-
            The ID of the issue type. Not required if updating the issue
            type-workflow mapping.
        workflow:
          type: string
          description: The name of the workflow.
        updateDraftIfNeeded:
          type: boolean
          description: >-
            Set to true to create or update the draft of a workflow scheme and
            update the mapping in the draft, when the workflow scheme cannot be
            edited. Defaults to `false`. Only applicable when updating the
            workflow-issue types mapping.
      additionalProperties: false
      description: Details about the mapping between an issue type and a workflow.
    UserBean:
      type: object
      properties:
        key:
          type: string
          description: >-
            This property is deprecated in favor of `accountId` because of
            privacy changes. See the [migration
            guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.  

            The key of the user.
        self:
          type: string
          description: The URL of the user.
          format: uri
        name:
          type: string
          description: >-
            This property is deprecated in favor of `accountId` because of
            privacy changes. See the [migration
            guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.  

            The username of the user.
        displayName:
          type: string
          description: >-
            The display name of the user. Depending on the user’s privacy
            setting, this may return an alternative value.
        active:
          type: boolean
          description: Indicates whether the user is active.
        accountId:
          type: string
          description: >-
            The accountId of the user, which uniquely identifies the user across
            all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        avatarUrls:
          description: The avatars of the user.
          allOf:
            - $ref: '#/components/schemas/UserBeanAvatarUrls'
      additionalProperties: false
    IssueEntityProperties:
      type: object
      properties:
        entitiesIds:
          maxItems: 10000
          minItems: 1
          uniqueItems: true
          type: array
          description: A list of entity IDs.
          items:
            type: integer
        properties:
          maxProperties: 10
          minProperties: 1
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonNode'
          description: A list of entity property keys and values.
      additionalProperties: false
      description: >-
        Lists of issues and entity properties. See [Entity
        properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/)
        for more information.
    ContextID:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the context.
      additionalProperties: false
      description: ID of a context.
    SharePermission:
      required:
        - type
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the share permission.
          readOnly: true
        type:
          type: string
          description: |-
            The type of share permission:

             *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
             *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
             *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
             *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
             *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
             *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
          enum:
            - group
            - project
            - projectRole
            - global
            - loggedin
            - authenticated
            - project-unknown
        project:
          description: >-
            The project that the filter is shared with. This is similar to the
            project object returned by [Get
            project](#api-rest-api-3-project-projectIdOrKey-get) but it contains
            a subset of the properties, which are: `self`, `id`, `key`,
            `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`,
            `simplified`.  

            For a request, specify the `id` for the project.
          allOf:
            - $ref: '#/components/schemas/Project'
        role:
          description: >-
            The project role that the filter is shared with.  

            For a request, specify the `id` for the role. You must also specify
            the `project` object and `id` for the project that the role is in.
          allOf:
            - $ref: '#/components/schemas/ProjectRole'
        group:
          description: >-
            The group that the filter is shared with. For a request, specify the
            `name` property for the group.
          allOf:
            - $ref: '#/components/schemas/GroupName'
      additionalProperties: false
      description: Details of a share permission for the filter.
    Comment:
      type: object
      properties:
        self:
          type: string
          description: The URL of the comment.
          readOnly: true
        id:
          type: string
          description: The ID of the comment.
          readOnly: true
        author:
          description: The ID of the user who created the comment.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        body:
          description: >-
            The comment text in [Atlassian Document
            Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).
        renderedBody:
          type: string
          description: The rendered version of the comment.
          readOnly: true
        updateAuthor:
          description: The ID of the user who updated the comment last.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/UserDetails'
        created:
          type: string
          description: The date and time at which the comment was created.
          format: date-time
          readOnly: true
        updated:
          type: string
          description: The date and time at which the comment was updated last.
          format: date-time
          readOnly: true
        visibility:
          description: >-
            The group or role to which this comment is visible. Optional on
            create and update.
          allOf:
            - $ref: '#/components/schemas/Visibility'
        jsdPublic:
          type: boolean
          description: >-
            Indicates whether the comment is visible in Jira Service Desk.
            Defaults to true when comments are created in the Jira Cloud
            Platform. This includes when the site doesn't use Jira Service Desk
            or the project isn't a Jira Service Desk project and, therefore,
            there is no Jira Service Desk for the issue to be visible on. To
            create a comment with its visibility in Jira Service Desk set to
            false, use the Jira Service Desk REST API [Create request
            comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post)
            operation.
          readOnly: true
        properties:
          type: array
          description: A list of comment properties. Optional on create and update.
          items:
            $ref: '#/components/schemas/EntityProperty'
      additionalProperties: true
      description: A comment.
    WorkflowSchemeAssociations:
      required:
        - projectIds
      type: object
      properties:
        projectIds:
          type: array
          description: The list of projects that use the workflow scheme.
          items:
            type: string
        workflowScheme:
          description: The workflow scheme.
          allOf:
            - $ref: '#/components/schemas/WorkflowScheme'
      additionalProperties: false
      description: A workflow scheme along with a list of projects that use it.
    FoundUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserPickerUser'
        total:
          type: integer
          description: The total number of users found in the search.
          format: int32
        header:
          type: string
          description: >-
            Header text indicating the number of users in the response and the
            total number of users found in the search.
      additionalProperties: false
      description: >-
        The list of users found in a search, including header text (Showing X of
        Y matching users) and total of matched users.
    FieldWasClause:
      required:
        - field
        - operand
        - operator
        - predicates
      type: object
      properties:
        field:
          $ref: '#/components/schemas/JqlQueryField'
        operator:
          type: string
          description: The operator between the field and operand.
          enum:
            - was
            - was in
            - was not in
            - was not
        operand:
          $ref: '#/components/schemas/JqlQueryClauseOperand'
        predicates:
          type: array
          description: The list of time predicates.
          items:
            $ref: '#/components/schemas/JqlQueryClauseTimePredicate'
      description: >-
        A clause that asserts a previous value of a field. For example, `status
        WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See
        [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS)
        for more information about the WAS operator.
    ProjectRoleGroupBean:
      type: object
      properties:
        displayName:
          type: string
        name:
          type: string
      additionalProperties: false
    KeywordOperand:
      required:
        - keyword
      type: object
      properties:
        keyword:
          type: string
          description: The keyword that is the operand value.
          enum:
            - empty
      description: >-
        An operand that is a JQL keyword. See [Advanced searching - keywords
        reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY)
        for more information about operand keywords.
    JiraExpressionEvaluationMetaDataBean:
      type: object
      properties:
        complexity:
          description: >-
            Contains information about the expression complexity. For example,
            the number of steps it took to evaluate the expression.
          allOf:
            - $ref: '#/components/schemas/JiraExpressionsComplexityBean'
        issues:
          description: >-
            Contains information about the `issues` variable in the context. For
            example, is the issues were loaded with JQL, information about the
            page will be included here.
          allOf:
            - $ref: '#/components/schemas/IssuesMetaBean'
      additionalProperties: false
    JsonTypeBean:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: The data type of the field.
          readOnly: true
        items:
          type: string
          description: >-
            When the data type is an array, the name of the field items within
            the array.
          readOnly: true
        system:
          type: string
          description: 'If the field is a system field, the name of the field.'
          readOnly: true
        custom:
          type: string
          description: 'If the field is a custom field, the URI of the field.'
          readOnly: true
        customId:
          type: integer
          description: 'If the field is a custom field, the custom ID of the field.'
          readOnly: true
        configuration:
          type: object
          additionalProperties:
            readOnly: true
          description: 'If the field is a custom field, the configuration of the field.'
          readOnly: true
      additionalProperties: false
      description: The schema of a field.
    AuditRecordBean:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the audit record.
          readOnly: true
        summary:
          type: string
          description: The summary of the audit record.
          readOnly: true
        remoteAddress:
          type: string
          description: >-
            The URL of the computer where the creation of the audit record was
            initiated.
          readOnly: true
        authorKey:
          type: string
          description: The key of the user who created the audit record.
          readOnly: true
        created:
          type: string
          description: The date and time on which the audit record was created.
          format: date-time
          readOnly: true
        category:
          type: string
          description: >-
            The category of the audit record. For a list of these categories,
            see the help article [Auditing in Jira
            applications](https://confluence.atlassian.com/x/noXKM).
          readOnly: true
        eventSource:
          type: string
          description: The event the audit record originated from.
          readOnly: true
        description:
          type: string
          description: The description of the audit record.
          readOnly: true
        objectItem:
          $ref: '#/components/schemas/AssociatedItemBean'
        changedValues:
          type: array
          description: The list of values changed in the record event.
          readOnly: true
          items:
            $ref: '#/components/schemas/ChangedValueBean'
        associatedItems:
          type: array
          description: The list of items associated with the changed record.
          readOnly: true
          items:
            $ref: '#/components/schemas/AssociatedItemBean'
      additionalProperties: false
      description: An audit record.
    NotificationEvent:
      type: object
      properties:
        id:
          type: integer
          description: >-
            The ID of the event. The event can be a [Jira system
            event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents)
            or a [custom event](https://confluence.atlassian.com/x/AIlKLg).
        name:
          type: string
          description: The name of the event.
        description:
          type: string
          description: The description of the event.
        templateEvent:
          description: >-
            The template of the event. Only custom events configured by Jira
            administrators have template.
          allOf:
            - $ref: '#/components/schemas/NotificationEvent'
      additionalProperties: false
      description: Details about a notification event.
    BulkProjectPermissionGrants:
      required:
        - issues
        - permission
        - projects
      type: object
      properties:
        permission:
          type: string
          description: 'A project permission,'
        issues:
          uniqueItems: true
          type: array
          description: IDs of the issues the user has the permission for.
          items:
            type: integer
        projects:
          uniqueItems: true
          type: array
          description: IDs of the projects the user has the permission for.
          items:
            type: integer
      additionalProperties: false
      description: >-
        List of project permissions and the projects and issues those
        permissions grant access to.
    IssueMatches:
      required:
        - matches
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/IssueMatchesForJQL'
      additionalProperties: false
      description: >-
        A list of matched issues or errors for each JQL query, in the order the
        JQL queries were passed.
    ListWrapperCallbackGroupName:
      type: object
      additionalProperties: false
    ScreenID:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the screen.
      additionalProperties: false
      description: ID of a screen.
    VersionMoveBean:
      type: object
      properties:
        after:
          type: string
          description: >-
            The URL (self link) of the version after which to place the moved
            version. Cannot be used with `position`.
          format: uri
        position:
          type: string
          description: >-
            An absolute position in which to place the moved version. Cannot be
            used with `after`.
          enum:
            - Earlier
            - Later
            - First
            - Last
      additionalProperties: false
      xml:
        name: version
    GroupLabel:
      type: object
      properties:
        text:
          type: string
          description: The group label name.
        title:
          type: string
          description: The title of the group label.
        type:
          type: string
          description: The type of the group label.
          enum:
            - ADMIN
            - SINGLE
            - MULTIPLE
      additionalProperties: false
      description: A group label.
      xml:
        name: grouplabel
    ApplicationRole:
      type: object
      properties:
        key:
          type: string
          description: The key of the application role.
        groups:
          uniqueItems: true
          type: array
          description: The groups associated with the application role.
          items:
            type: string
        name:
          type: string
          description: The display name of the application role.
        defaultGroups:
          uniqueItems: true
          type: array
          description: >-
            The groups that are granted default access for this application
            role.
          items:
            type: string
        selectedByDefault:
          type: boolean
          description: >-
            Determines whether this application role should be selected by
            default on user creation.
        defined:
          type: boolean
          description: Deprecated.
        numberOfSeats:
          type: integer
          description: The maximum count of users on your license.
          format: int32
        remainingSeats:
          type: integer
          description: The count of users remaining on your license.
          format: int32
        userCount:
          type: integer
          description: The number of users counting against your license.
          format: int32
        userCountDescription:
          type: string
          description: >-
            The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being
            counted against your license.
        hasUnlimitedSeats:
          type: boolean
        platform:
          type: boolean
          description: >-
            Indicates if the application role belongs to Jira platform
            (`jira-core`).
      additionalProperties: false
      description: Details of an application role.
    JqlQueryField:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the field.
        property:
          type: array
          description: >-
            When the field refers to a value in an entity property, details of
            the entity property value.
          items:
            $ref: '#/components/schemas/JqlQueryFieldEntityProperty'
      additionalProperties: false
      description: >-
        A field used in a JQL query. See [Advanced searching - fields
        reference](https://confluence.atlassian.com/x/dAiiLQ) for more
        information about fields in JQL queries.
  securitySchemes:
    basicAuth:
      type: http
      description: You can access this resource via basic auth.
      scheme: basic
    OAuth2:
      type: oauth2
      description: OAuth2 scopes for Jira
      flows:
        authorizationCode:
          authorizationUrl: 'https://auth.atlassian.com/authorize'
          tokenUrl: 'https://auth.atlassian.com/oauth/token'
          scopes:
            'read:jira-user': >-
              View user information in Jira that you have access to, including
              usernames, email addresses, and avatars.
            'read:jira-work': >-
              Read project and issue data. Search for issues and objects
              associated with issues (such as attachments and worklogs).
            'write:jira-work': >-
              Create and edit issues in Jira, post comments, create worklogs,
              and delete issues.
            'manage:jira-project': >-
              Create and edit project settings and create new project-level
              objects, for example, versions, components.
            'manage:jira-configuration': >-
              Configure Jira settings that require the Jira administrators
              permission, for example, create projects and custom fields, view
              workflows, manage issue link types.
x-atlassian-narrative:
  documents:
    - title: About
      anchor: about
      body: >-
        The Jira REST API enables you to interact with Jira programmatically.
        Use this API to 

        [build
        apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/),
        script interactions with 

        Jira, or develop any other type of integration. This page documents the
        REST resources available in Jira Cloud, including 

        the HTTP response codes and example requests and responses.


        **NOTE:** Personal data that is used to identify users, such as
        `username` and `userKey`, has been 

        removed from the Jira Cloud REST APIs. In addition, other personal data
        (for example, email) is now restricted by a 

        user's profile settings (or in the case of managed accounts, the
        visibility settings decided by the site administrator). 

        You must update your apps to accommodate these changes, if you have not
        done so already. This change was previously 

        announced on 01 October 2018 and followed by a deprecation period 

        (see the
        [announcement](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)).
    - title: Version and URI
      anchor: version
      body: >-
        This documentation is for **version 3** of the Jira Cloud platform REST
        API, which is the latest version. 


        The URIs for resources have the following structure:


        `https://<site-url>/rest/api/3/<resource-name>`


        For example,

        `https://your-domain.atlassian.net/rest/api/3/issue/DEMO-1`


        **Note that version 3 of the Jira Cloud platform REST API is in beta**.
        All the endpoints from the 

        [version
        2](https://developer.atlassian.com/cloud/jira/platform/rest/v2/) API are
        available. However,

        they are under development and may change. 


        The change from version 2 is the introduction of the 

        [Atlassian Document
        Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/) 

        to: 

        - `body` in comments, including where comments are used in issue, issue
        link, and transition resources.

        - `comment` in worklogs.

        - `description` and `environment` fields in issues.

        - `textarea` type custom fields (multi-line text fields) in issues.
        Single line custom fields 
          (`textfield`) accept a string and don't handle Atlassian Document Format content.
    - title: Authentication and authorization
      anchor: authentication
      body: >-
        ### Connect apps


        For Connect apps, authentication (JWT-based) is built into the Connect
        libraries. Authorization is implemented using either 

        scopes (shown as _App scope required_ for operations on this page) or
        user impersonation. See 

        [Security for Connect
        apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/) 

        for details.


        ### Other integrations


        For integrations that are not Connect apps, use OAuth 2.0 authorization
        code grants (3LO) for security 

        (3LO scopes are shown as _OAuth scopes required_ for operations on this
        page). Basic authentication is also available, 

        but you should only use it for tools such as personal scripts or bots.
        See 

        [Security for other
        integrations](https://developer.atlassian.com/cloud/jira/platform/security-for-other-integrations/) 

        for details.
    - title: Permissions
      anchor: permissions
      body: >-
        Most operations in this API require permissions. The calling user must
        have the required permissions for an operation to 

        use it. Note that for Connect apps, the app user must have the required
        permissions for the operation and the app must 

        have scopes that permit the operation.


        A permission can be granted to a group, project role, or issue role that
        the user is a member of, or granted directly to a user. 

        See [Permissions overview](https://confluence.atlassian.com/x/FQiiLQ)
        for details. The most common permissions are:


        - **Administer the Cloud site**: Users in the _site-admins_ group have
        this 

        permission. See [Manage
        groups](https://confluence.atlassian.com/x/24xjL) for details.

        - **Administer Jira**: Granted by the _Jira Administrators_ global
        permission. Users in the _administrators_ group have this 

        permission. See [Manage
        groups](https://confluence.atlassian.com/x/24xjL) and 

        [Managing global permissions](https://confluence.atlassian.com/x/x4dKLg)
        for details.

        - **Administer a project in Jira**: Granted by the _Administer projects_
        project permission for a project. This can be 

        granted to a user, a group, a project role, and more. 

        See [Managing project
        permissions](https://confluence.atlassian.com/x/yodKLg) for details.

        - **Access a project in Jira**: Granted by the _Browse projects_ project
        permission for a project. This can be 

        granted to a user, a group, a project role, and more. 

        See [Managing project
        permissions](https://confluence.atlassian.com/x/yodKLg) for details.

        - **Access Jira**: Granted by the _Jira Users_ global permission. Users
        in the _\[product]-users_ (for example, 

        _jira-software-users_) group have this permission. 

        See [Manage groups](https://confluence.atlassian.com/x/24xjL) and 

        [Managing global permissions](https://confluence.atlassian.com/x/x4dKLg)
        for details.
    - title: 'Expansion, pagination, and ordering'
      anchor: expansion
      body: >+
        ### Expansion


        The Jira REST API uses resource expansion, which means that some parts
        of a resource are not returned unless specified 

        in the request. This simplifies responses and minimizes network traffic.


        To expand part of a resource in a request, use the expand query
        parameter and specify the object(s) to be expanded. 

        If you need to expand nested objects, use the `.` dot notation. If you
        need to expand multiple objects, use a 

        comma-separated list. 


        For example, the following request expands the `names` and
        `renderedFields` properties for the _JRACLOUD-34423_ issue:


        `GET issue/JRACLOUD-34423?expand=names,renderedFields`


        To discover which object can be expanded, refer to the `expand` property
        in the object. 

        In the JSON example below, the resource declares `widgets` as
        expandable.


        ```json

        {
          "expand": "widgets", 
          "self": "https://your-domain.atlassian.net/rest/api/3/resource/KEY-1", 
          "widgets": {
            "widgets": [],
            "size": 5
           }
        }

        ```


        ### Pagination


        The Jira REST API uses pagination to improve performance. Pagination is
        enforced for operations that could return a large 

        collection of items. When you make a request to a paginated resource,
        the response wraps the returned array of values in 

        a JSON object with paging metadata. For example:


        ```json

        {
            "startAt" : 0,
            "maxResults" : 10,
            "total": 200,
            "isLast": false,
            "values": [
                { /* result 0 */ },
                { /* result 1 */ },
                { /* result 2 */ }
            ]
        }

        ```


        *   `startAt` is the index of the first item returned in the page.

        *   `maxResults` is the maximum number of items that can be returned per
        page. Each API endpoint may have a different 

        limit for the number of items returned, and these limits may change
        without notice.

        *   `total` is the total number of items contained in all pages. This
        number **_may change_** as the client 

        requests the subsequent pages, therefore the client should always assume
        that the requested page can be empty. Note 

        that this property is not returned for all operations.

        *   `isLast` indicates whether the page returned is the last one. Note
        that this property is not returned for all operations.


        ### Ordering


        Some operations support ordering the elements of a response by a field.
        Check the documentation for the operation to 

        confirm whether ordering of a response is supported and which fields can
        be used. Responses are listed in ascending order 

        by default. You can change the order using the `orderby` query parameter
        with a `-` or `+` symbol. For example:


        *   `?orderBy=name` to order by `name` field ascending.

        *   `?orderBy=+name` to order by `name` field ascending.

        *   `?orderBy=-name` to order by `name` field descending.


    - title: Special headers
      anchor: special-request-headers
      body: >-
        The following request and response headers define important metadata for
        the Jira Cloud REST API resources.


        -   `X-Atlassian-Token` (request): Operations that accept
        multipart/form-data must include the `X-Atlassian-Token: no-check` 

        header in requests. Otherwise the request will be blocked by cross-site
        request forgery (CSRF/XSRF) protection.

        -   `X-AACCOUNTID` (response): This response header contains the
        Atlassian account ID of the authenticated user.
    - title: Anonymous operations
      anchor: anonymous-operations
      body: |2-
         Jira provides for all permissions, except the [global permission](https://confluence.atlassian.com/x/x4dKLg) Administer Jira, to be assigned to *Anyone*. Once a permission is assigned to *Anyone*, anyone knowing a project's URL is able to use the features in Jira enabled by the permission. However, the Jira REST API does not enable anonymous access for operations by default. This means that an anonymous user who may be able to perform an action through Jira, may not be able to perform the same action where it's enabled by the REST API. 

         The operations that provide anonymous access are annotated "This operation can be accessed anonymously."
    - title: Asynchronous operations
      anchor: async-operations
      body: >-
        Some Jira REST API operations may trigger long-running or
        computationally expensive tasks. In these cases, the operation 

        will schedule an asynchronous task and return a `303 (See Other)`
        response, indicating the location of the queued task 

        in the `Location` header. You can query this task to get progress
        updates.


        When the task finishes, the response object will contain the `result`
        field. The content of the field is specific to the 

        operation that created the task. Refer to the operation’s documentation
        for more information.


        Note that asynchronous tasks are not guaranteed to be run in order. In
        other words, if you need your tasks to execute 

        in a certain order, you should start a task only after the prerequisite
        task(s) have finished.
    - title: Experimental features
      anchor: experimental
      body: >
        Features and methods marked as experimental may change without notice.
        Feedback on experimental functionality is welcome. 

        Report your suggestions and bugs in the [ACJIRA
        project](https://ecosystem.atlassian.net/projects/ACJIRA) (preferred) or
        use the 

        **Give docs feedback** link at the top of this page. 
    - title: Status codes
      anchor: status-codes
      body: >-
        The Jira Cloud platform REST API uses the [standard HTTP status
        codes](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).


        Operations that return an error status code may also return a response
        body containing details of the error or errors. 

        The schema for the response body is shown below:



        ```json

        {
          "id": "https://docs.atlassian.com/jira/REST/schema/error-collection#",
          "title": "Error Collection",
          "type": "object",
          "properties": {
            "errorMessages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "errors": {
              "type": "object",
              "patternProperties": {
                ".+": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "status": { 
              "type": "integer"
            }
          },
          "additionalProperties": false
        }

        ```
